%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: PIXEL3-02.eps
%%Creator: Adobe Illustrator(R) 19.0
%%For: Ayib
%%CreationDate: 8/30/16
%%BoundingBox: 0 0 800 800
%%HiResBoundingBox: 0 0 800 800
%%CropBox: 0 0 800 800
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.0.0 x44 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: font BebasNeue-Thin
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: BebasNeue-Thin
%%DocumentNeededFonts: BebasNeue-Thin
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 2 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">FREEP-TEMPLA</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-08-30T18:12:30+07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-08-30T18:12:30+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-08-30T18:12:30+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>128</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAgAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6DmI692KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxVNPLP/Hfsf8AjIP1HJQ5s8f1Bj/nX/lKtT/4zH9QzBz/AFl6jT/QEkyl&#xA;udirsVdirsVdirsVdirsVdirsVdirsVdirsVZPmyeOdirsVdiqOsWt0tLh5lDfHGoBRWJBWSoBP2&#xA;eg3GEM41SaXFtbi6uRbRK3FXJ9OJJqSerGCFQ0FAp+ipyVMyBeyCFosWszevCFgiaSQRyDghUMQn&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:0eae4698-8ff9-438e-bd62-00491cb7b3d4</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:0eae4698-8ff9-438e-bd62-00491cb7b3d4</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:132741ba-bea9-4041-8778-90ee953a078f</stRef:instanceID>
            <stRef:documentID>xmp.did:132741ba-bea9-4041-8778-90ee953a078f</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9055feea-6df3-418a-84b0-35eb367eec15</stEvt:instanceID>
                  <stEvt:when>2016-04-18T22:41:34+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0eae4698-8ff9-438e-bd62-00491cb7b3d4</stEvt:instanceID>
                  <stEvt:when>2016-08-30T18:12:30+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.000000</stDim:w>
            <stDim:h>800.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>BebasNeue-Thin</stFnt:fontName>
                  <stFnt:fontFamily>Bebas Neue</stFnt:fontFamily>
                  <stFnt:fontFace>Thin</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 1.003;PS 001.003;hotconv 1.0.70;makeotf.lib2.5.58329</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>BebasNeue Thin.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=189 G=136 B=100 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>189</xmpG:red>
                           <xmpG:green>136</xmpG:green>
                           <xmpG:blue>100</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=247 G=246 B=242 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>247</xmpG:red>
                           <xmpG:green>246</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 1</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=252 G=100 B=96 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>252</xmpG:red>
                           <xmpG:green>100</xmpG:green>
                           <xmpG:blue>96</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=189 G=136 B=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>189</xmpG:red>
                           <xmpG:green>136</xmpG:green>
                           <xmpG:blue>100</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=216 G=208 B=187</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>216</xmpG:red>
                           <xmpG:green>208</xmpG:green>
                           <xmpG:blue>187</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=191 G=188 B=98</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>191</xmpG:red>
                           <xmpG:green>188</xmpG:green>
                           <xmpG:blue>98</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=157 G=191 B=159</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>157</xmpG:red>
                           <xmpG:green>191</xmpG:green>
                           <xmpG:blue>159</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=59 G=77 B=87</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>59</xmpG:red>
                           <xmpG:green>77</xmpG:green>
                           <xmpG:blue>87</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 2</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=252 G=139 B=96</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>252</xmpG:red>
                           <xmpG:green>139</xmpG:green>
                           <xmpG:blue>96</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=252 G=191 B=96</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>252</xmpG:red>
                           <xmpG:green>191</xmpG:green>
                           <xmpG:blue>96</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 3</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=239 G=215 B=184</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>239</xmpG:red>
                           <xmpG:green>215</xmpG:green>
                           <xmpG:blue>184</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -800 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 800 li
800 800 li
800 0 li
cp
clp
800 800 mo
0 800 li
0 0 li
800 0 li
800 800 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.244144 .481788 .647761 .0353094 cmyk
f
283.392 772.615 mo
283.392 773.318 283.501 773.916 283.72 774.41 cv
283.938 774.904 284.237 775.275 284.617 775.525 cv
284.997 775.775 285.412 775.902 285.861 775.902 cv
286.317 775.902 286.733 775.783 287.111 775.545 cv
287.487 775.309 287.788 774.943 288.012 774.453 cv
288.237 773.963 288.349 773.348 288.349 772.615 cv
288.349 771.924 288.237 771.33 288.012 770.832 cv
287.788 770.336 287.484 769.957 287.101 769.693 cv
286.718 769.432 286.298 769.301 285.843 769.301 cv
285.368 769.301 284.944 769.435 284.57 769.703 cv
284.196 769.973 283.906 770.357 283.701 770.861 cv
283.494 771.365 283.392 771.949 283.392 772.615 cv
cp
288.492 776.424 mo
288.492 776.166 li
288.144 776.564 287.801 776.891 287.462 777.139 cv
287.123 777.391 286.756 777.58 286.36 777.709 cv
285.964 777.842 285.533 777.904 285.064 777.904 cv
284.443 777.904 283.868 777.773 283.339 777.512 cv
282.811 777.248 282.353 776.873 281.968 776.385 cv
281.58 775.898 281.288 775.326 281.089 774.666 cv
280.889 774.008 280.789 773.295 280.789 772.529 cv
280.789 770.908 281.185 769.644 281.977 768.738 cv
282.768 767.834 283.81 767.381 285.102 767.381 cv
285.848 767.381 286.479 767.51 286.991 767.766 cv
287.505 768.021 288.005 768.418 288.492 768.947 cv
288.492 765.121 li
288.492 764.588 288.598 764.187 288.811 763.914 cv
289.022 763.643 289.325 763.506 289.718 763.506 cv
290.11 763.506 290.412 763.631 290.624 763.881 cv
290.837 764.133 290.943 764.5 290.943 764.988 cv
290.943 776.424 li
290.943 776.918 290.829 777.287 290.601 777.535 cv
290.373 777.781 290.079 777.904 289.718 777.904 cv
289.363 777.904 289.07 777.777 288.839 777.521 cv
288.608 777.264 288.492 776.898 288.492 776.424 cv
cp
.0192874 .0142519 .0343023 0 cmyk
f
294.855 771.799 mo
299.556 771.799 li
299.494 770.912 299.253 770.248 298.839 769.809 cv
298.424 769.367 297.879 769.148 297.201 769.148 cv
296.555 769.148 296.024 769.371 295.61 769.816 cv
295.195 770.264 294.944 770.924 294.855 771.799 cv
cp
299.926 773.271 mo
294.855 773.271 li
294.861 773.859 294.979 774.379 295.211 774.828 cv
295.442 775.277 295.749 775.617 296.132 775.844 cv
296.515 776.072 296.938 776.185 297.4 776.185 cv
297.71 776.185 297.993 776.15 298.25 776.078 cv
298.507 776.004 298.755 775.891 298.996 775.734 cv
299.237 775.58 299.458 775.414 299.661 775.236 cv
299.863 775.059 300.125 774.816 300.449 774.514 cv
300.582 774.4 300.772 774.342 301.02 774.342 cv
301.285 774.342 301.5 774.416 301.664 774.562 cv
301.829 774.709 301.912 774.912 301.912 775.18 cv
301.912 775.414 301.82 775.685 301.637 776 cv
301.452 776.314 301.175 776.615 300.805 776.902 cv
300.434 777.191 299.97 777.43 299.408 777.619 cv
298.849 777.81 298.204 777.904 297.476 777.904 cv
295.811 777.904 294.516 777.43 293.591 776.48 cv
292.667 775.531 292.205 774.242 292.205 772.615 cv
292.205 771.848 292.319 771.137 292.547 770.482 cv
292.775 769.826 293.108 769.266 293.544 768.797 cv
293.981 768.328 294.519 767.969 295.159 767.719 cv
295.798 767.469 296.508 767.344 297.286 767.344 cv
298.299 767.344 299.168 767.557 299.892 767.984 cv
300.618 768.412 301.162 768.965 301.522 769.641 cv
301.882 770.318 302.064 771.01 302.064 771.711 cv
302.064 772.365 301.877 772.787 301.504 772.98 cv
301.131 773.174 300.604 773.271 299.926 773.271 cv
cp
f
311.741 774.514 mo
311.741 775.228 311.568 775.842 311.219 776.351 cv
310.871 776.861 310.356 777.248 309.675 777.512 cv
308.995 777.773 308.167 777.904 307.192 777.904 cv
306.261 777.904 305.463 777.762 304.798 777.476 cv
304.133 777.193 303.642 776.836 303.326 776.41 cv
303.01 775.98 302.851 775.553 302.851 775.121 cv
302.851 774.836 302.952 774.594 303.156 774.391 cv
303.358 774.189 303.615 774.088 303.925 774.088 cv
304.197 774.088 304.405 774.154 304.551 774.287 cv
304.697 774.42 304.837 774.607 304.969 774.846 cv
305.235 775.31 305.554 775.652 305.924 775.883 cv
306.294 776.109 306.799 776.225 307.439 776.225 cv
307.958 776.225 308.384 776.107 308.716 775.877 cv
309.049 775.644 309.215 775.381 309.215 775.084 cv
309.215 774.627 309.043 774.297 308.697 774.088 cv
308.352 773.879 307.783 773.678 306.992 773.488 cv
306.099 773.268 305.373 773.033 304.812 772.789 cv
304.252 772.547 303.804 772.225 303.469 771.826 cv
303.133 771.428 302.965 770.935 302.965 770.353 cv
302.965 769.836 303.12 769.344 303.43 768.881 cv
303.741 768.42 304.198 768.051 304.804 767.775 cv
305.408 767.5 306.137 767.361 306.992 767.361 cv
307.663 767.361 308.267 767.432 308.801 767.572 cv
309.337 767.709 309.784 767.898 310.141 768.133 cv
310.499 768.365 310.771 768.625 310.957 768.91 cv
311.144 769.195 311.237 769.473 311.237 769.746 cv
311.237 770.043 311.137 770.287 310.939 770.478 cv
310.74 770.666 310.456 770.764 310.088 770.764 cv
309.822 770.764 309.596 770.687 309.409 770.533 cv
309.223 770.383 309.009 770.154 308.768 769.851 cv
308.572 769.598 308.342 769.394 308.075 769.242 cv
307.809 769.09 307.448 769.016 306.992 769.016 cv
306.523 769.016 306.135 769.113 305.824 769.314 cv
305.514 769.514 305.359 769.762 305.359 770.059 cv
305.359 770.332 305.472 770.555 305.7 770.728 cv
305.929 770.904 306.235 771.049 306.622 771.162 cv
307.008 771.275 307.539 771.414 308.218 771.578 cv
309.021 771.775 309.678 772.01 310.188 772.281 cv
310.698 772.553 311.084 772.875 311.348 773.246 cv
311.61 773.617 311.741 774.039 311.741 774.514 cv
cp
f
315.673 768.834 mo
315.673 776.328 li
315.673 776.848 315.549 777.24 315.302 777.506 cv
315.054 777.771 314.742 777.904 314.362 777.904 cv
313.981 777.904 313.673 777.769 313.435 777.496 cv
313.198 777.225 313.079 776.834 313.079 776.328 cv
313.079 768.91 li
313.079 768.398 313.198 768.012 313.435 767.752 cv
313.673 767.492 313.981 767.361 314.362 767.361 cv
314.742 767.361 315.054 767.492 315.302 767.752 cv
315.549 768.012 315.673 768.373 315.673 768.834 cv
cp
314.39 766.156 mo
314.029 766.156 313.721 766.045 313.464 765.824 cv
313.208 765.603 313.079 765.289 313.079 764.883 cv
313.079 764.516 313.211 764.215 313.473 763.976 cv
313.736 763.738 314.042 763.619 314.39 763.619 cv
314.726 763.619 315.023 763.726 315.283 763.943 cv
315.542 764.158 315.673 764.471 315.673 764.883 cv
315.673 765.283 315.545 765.594 315.292 765.818 cv
315.039 766.043 314.738 766.156 314.39 766.156 cv
cp
f
319.518 772.549 mo
319.518 773.6 319.747 774.394 320.206 774.932 cv
320.665 775.471 321.26 775.74 321.987 775.74 cv
322.418 775.74 322.825 775.623 323.207 775.393 cv
323.591 775.162 323.903 774.812 324.144 774.348 cv
324.383 773.883 324.505 773.318 324.505 772.652 cv
324.505 771.596 324.272 770.771 323.806 770.184 cv
323.341 769.596 322.728 769.301 321.968 769.301 cv
321.227 769.301 320.633 769.582 320.188 770.146 cv
319.741 770.709 319.518 771.51 319.518 772.549 cv
cp
327.031 769.262 mo
327.031 776.793 li
327.031 777.654 326.939 778.396 326.755 779.018 cv
326.573 779.637 326.278 780.15 325.872 780.555 cv
325.466 780.959 324.936 781.262 324.281 781.457 cv
323.626 781.654 322.811 781.752 321.835 781.752 cv
320.943 781.752 320.145 781.627 319.442 781.377 cv
318.74 781.125 318.198 780.803 317.818 780.408 cv
317.438 780.012 317.247 779.605 317.247 779.187 cv
317.247 778.871 317.355 778.611 317.571 778.414 cv
317.786 778.213 318.046 778.113 318.349 778.113 cv
318.729 778.113 319.062 778.281 319.347 778.617 cv
319.486 778.787 319.63 778.961 319.779 779.135 cv
319.927 779.31 320.093 779.459 320.273 779.582 cv
320.453 779.705 320.67 779.797 320.923 779.857 cv
321.177 779.916 321.469 779.947 321.797 779.947 cv
322.469 779.947 322.99 779.853 323.36 779.666 cv
323.731 779.48 323.991 779.219 324.139 778.883 cv
324.288 778.549 324.375 778.189 324.4 777.805 cv
324.426 777.422 324.444 776.807 324.457 775.957 cv
324.057 776.516 323.598 776.939 323.075 777.23 cv
322.552 777.521 321.93 777.668 321.209 777.668 cv
320.341 777.668 319.583 777.445 318.933 777.002 cv
318.285 776.559 317.786 775.939 317.438 775.141 cv
317.09 774.342 316.916 773.422 316.916 772.377 cv
316.916 771.6 317.022 770.894 317.234 770.269 cv
317.447 769.641 317.749 769.113 318.141 768.682 cv
318.533 768.252 318.986 767.928 319.499 767.709 cv
320.012 767.49 320.575 767.381 321.19 767.381 cv
321.924 767.381 322.56 767.523 323.099 767.803 cv
323.637 768.086 324.137 768.527 324.599 769.129 cv
324.599 768.777 li
324.599 768.328 324.71 767.98 324.931 767.732 cv
325.154 767.486 325.439 767.361 325.787 767.361 cv
326.287 767.361 326.619 767.525 326.783 767.851 cv
326.948 768.178 327.031 768.648 327.031 769.262 cv
cp
f
331.152 768.797 mo
331.152 769.109 li
331.607 768.508 332.106 768.066 332.648 767.785 cv
333.189 767.504 333.811 767.361 334.514 767.361 cv
335.198 767.361 335.809 767.512 336.347 767.809 cv
336.885 768.107 337.288 768.527 337.553 769.07 cv
337.725 769.389 337.835 769.73 337.885 770.098 cv
337.936 770.465 337.963 770.934 337.963 771.504 cv
337.963 776.328 li
337.963 776.848 337.844 777.24 337.606 777.506 cv
337.368 777.771 337.06 777.904 336.68 777.904 cv
336.293 777.904 335.98 777.769 335.74 777.496 cv
335.498 777.225 335.379 776.834 335.379 776.328 cv
335.379 772.006 li
335.379 771.152 335.26 770.498 335.022 770.045 cv
334.784 769.594 334.312 769.365 333.602 769.365 cv
333.14 769.365 332.719 769.504 332.339 769.779 cv
331.959 770.055 331.68 770.434 331.503 770.914 cv
331.377 771.301 331.313 772.021 331.313 773.08 cv
331.313 776.328 li
331.313 776.853 331.191 777.248 330.948 777.512 cv
330.704 777.773 330.389 777.904 330.003 777.904 cv
329.629 777.904 329.323 777.769 329.081 777.496 cv
328.841 777.225 328.721 776.834 328.721 776.328 cv
328.721 768.834 li
328.721 768.34 328.828 767.971 329.043 767.726 cv
329.258 767.484 329.553 767.361 329.926 767.361 cv
330.155 767.361 330.361 767.416 330.545 767.523 cv
330.727 767.633 330.875 767.793 330.986 768.008 cv
331.097 768.223 331.152 768.486 331.152 768.797 cv
cp
f
341.855 771.799 mo
346.556 771.799 li
346.493 770.912 346.254 770.248 345.84 769.809 cv
345.425 769.367 344.879 769.148 344.201 769.148 cv
343.555 769.148 343.024 769.371 342.61 769.816 cv
342.195 770.264 341.944 770.924 341.855 771.799 cv
cp
346.927 773.271 mo
341.855 773.271 li
341.862 773.859 341.98 774.379 342.212 774.828 cv
342.443 775.277 342.749 775.617 343.133 775.844 cv
343.515 776.072 343.938 776.185 344.4 776.185 cv
344.711 776.185 344.994 776.15 345.251 776.078 cv
345.507 776.004 345.755 775.891 345.997 775.734 cv
346.237 775.58 346.458 775.414 346.662 775.236 cv
346.864 775.059 347.126 774.816 347.45 774.514 cv
347.582 774.4 347.772 774.342 348.019 774.342 cv
348.285 774.342 348.501 774.416 348.665 774.562 cv
348.83 774.709 348.912 774.912 348.912 775.18 cv
348.912 775.414 348.821 775.685 348.637 776 cv
348.452 776.314 348.176 776.615 347.805 776.902 cv
347.434 777.191 346.97 777.43 346.409 777.619 cv
345.849 777.81 345.204 777.904 344.476 777.904 cv
342.811 777.904 341.516 777.43 340.591 776.48 cv
339.668 775.531 339.205 774.242 339.205 772.615 cv
339.205 771.848 339.319 771.137 339.547 770.482 cv
339.775 769.826 340.108 769.266 340.545 768.797 cv
340.981 768.328 341.52 767.969 342.159 767.719 cv
342.798 767.469 343.508 767.344 344.287 767.344 cv
345.3 767.344 346.168 767.557 346.893 767.984 cv
347.618 768.412 348.161 768.965 348.523 769.641 cv
348.883 770.318 349.064 771.01 349.064 771.711 cv
349.064 772.365 348.878 772.787 348.504 772.98 cv
348.131 773.174 347.605 773.271 346.927 773.271 cv
cp
f
352.397 772.615 mo
352.397 773.318 352.505 773.916 352.724 774.41 cv
352.942 774.904 353.241 775.275 353.622 775.525 cv
354.002 775.775 354.416 775.902 354.866 775.902 cv
355.322 775.902 355.739 775.783 356.115 775.545 cv
356.491 775.309 356.793 774.943 357.017 774.453 cv
357.242 773.963 357.354 773.348 357.354 772.615 cv
357.354 771.924 357.242 771.33 357.017 770.832 cv
356.793 770.336 356.489 769.957 356.105 769.693 cv
355.721 769.432 355.302 769.301 354.846 769.301 cv
354.372 769.301 353.948 769.435 353.574 769.703 cv
353.201 769.973 352.911 770.357 352.705 770.861 cv
352.499 771.365 352.397 771.949 352.397 772.615 cv
cp
357.496 776.424 mo
357.496 776.166 li
357.148 776.564 356.805 776.891 356.466 777.139 cv
356.127 777.391 355.76 777.58 355.365 777.709 cv
354.97 777.842 354.537 777.904 354.069 777.904 cv
353.447 777.904 352.873 777.773 352.345 777.512 cv
351.816 777.248 351.358 776.873 350.972 776.385 cv
350.585 775.898 350.293 775.326 350.094 774.666 cv
349.894 774.008 349.794 773.295 349.794 772.529 cv
349.794 770.908 350.19 769.644 350.981 768.738 cv
351.773 767.834 352.815 767.381 354.106 767.381 cv
354.853 767.381 355.484 767.51 355.996 767.766 cv
356.509 768.021 357.01 768.418 357.496 768.947 cv
357.496 765.121 li
357.496 764.588 357.603 764.187 357.815 763.914 cv
358.027 763.643 358.33 763.506 358.722 763.506 cv
359.115 763.506 359.417 763.631 359.629 763.881 cv
359.841 764.133 359.948 764.5 359.948 764.988 cv
359.948 776.424 li
359.948 776.918 359.834 777.287 359.606 777.535 cv
359.378 777.781 359.084 777.904 358.722 777.904 cv
358.368 777.904 358.075 777.777 357.844 777.521 cv
357.612 777.264 357.496 776.898 357.496 776.424 cv
cp
f
368.218 772.691 mo
368.218 773.723 368.454 774.516 368.926 775.068 cv
369.397 775.623 370.016 775.902 370.783 775.902 cv
371.434 775.902 371.997 775.619 372.468 775.051 cv
372.94 774.484 373.176 773.672 373.176 772.615 cv
373.176 771.932 373.078 771.342 372.882 770.848 cv
372.685 770.353 372.407 769.973 372.046 769.703 cv
371.685 769.435 371.263 769.301 370.783 769.301 cv
370.289 769.301 369.848 769.435 369.462 769.703 cv
369.076 769.973 368.772 770.361 368.55 770.871 cv
368.329 771.381 368.218 771.988 368.218 772.691 cv
cp
368.095 764.988 mo
368.095 768.947 li
368.582 768.441 369.079 768.053 369.586 767.785 cv
370.092 767.516 370.72 767.381 371.466 767.381 cv
372.328 767.381 373.082 767.586 373.732 767.992 cv
374.38 768.402 374.883 768.994 375.242 769.769 cv
375.599 770.545 375.779 771.465 375.779 772.529 cv
375.779 773.314 375.679 774.033 375.48 774.689 cv
375.28 775.346 374.99 775.914 374.611 776.394 cv
374.23 776.875 373.77 777.248 373.229 777.512 cv
372.687 777.773 372.09 777.904 371.438 777.904 cv
371.039 777.904 370.663 777.857 370.313 777.762 cv
369.961 777.668 369.661 777.543 369.415 777.387 cv
369.169 777.232 368.958 777.072 368.783 776.908 cv
368.609 776.744 368.379 776.496 368.095 776.166 cv
368.095 776.424 li
368.095 776.91 367.977 777.279 367.743 777.531 cv
367.51 777.781 367.212 777.904 366.85 777.904 cv
366.483 777.904 366.19 777.781 365.972 777.531 cv
365.753 777.279 365.644 776.91 365.644 776.424 cv
365.644 765.101 li
365.644 764.576 365.75 764.178 365.962 763.91 cv
366.174 763.641 366.471 763.506 366.85 763.506 cv
367.25 763.506 367.556 763.635 367.772 763.891 cv
367.987 764.148 368.095 764.512 368.095 764.988 cv
cp
f
379.14 778.228 mo
379.378 777.648 li
376.186 769.613 li
375.991 769.152 375.891 768.814 375.891 768.605 cv
375.891 768.385 375.949 768.18 376.063 767.99 cv
376.177 767.799 376.333 767.646 376.533 767.533 cv
376.732 767.418 376.94 767.361 377.155 767.361 cv
377.528 767.361 377.81 767.48 378.001 767.719 cv
378.191 767.955 378.358 768.295 378.504 768.738 cv
380.698 775.121 li
382.778 769.185 li
382.942 768.705 383.091 768.328 383.224 768.055 cv
383.357 767.783 383.498 767.6 383.647 767.506 cv
383.795 767.41 384.006 767.361 384.279 767.361 cv
384.476 767.361 384.663 767.414 384.844 767.519 cv
385.024 767.623 385.163 767.764 385.262 767.941 cv
385.359 768.119 385.409 768.305 385.409 768.502 cv
385.383 768.621 385.343 768.793 385.285 769.016 cv
385.228 769.236 385.159 769.463 385.077 769.689 cv
381.696 778.541 li
381.404 779.32 381.119 779.93 380.84 780.373 cv
380.561 780.816 380.193 781.158 379.734 781.394 cv
379.274 781.633 378.656 781.752 377.877 781.752 cv
377.117 781.752 376.547 781.67 376.168 781.506 cv
375.787 781.34 375.598 781.039 375.598 780.601 cv
375.598 780.305 375.687 780.074 375.869 779.914 cv
376.049 779.752 376.317 779.67 376.67 779.67 cv
376.81 779.67 376.947 779.689 377.079 779.728 cv
377.244 779.766 377.386 779.785 377.506 779.785 cv
377.804 779.785 378.038 779.742 378.21 779.652 cv
378.38 779.564 378.533 779.41 378.67 779.191 cv
378.806 778.975 378.963 778.652 379.14 778.228 cv
cp
f
416.703 767.586 mo
417.322 767.586 li
417.322 766.809 li
417.322 765.994 417.422 765.351 417.629 764.871 cv
417.832 764.393 418.183 764.045 418.676 763.826 cv
419.166 763.609 419.838 763.5 420.691 763.5 cv
422.211 763.5 422.965 763.867 422.965 764.613 cv
422.965 764.851 422.885 765.059 422.724 765.228 cv
422.57 765.398 422.381 765.484 422.166 765.484 cv
422.066 765.484 421.888 765.467 421.638 765.426 cv
421.402 765.393 421.187 765.369 421.015 765.369 cv
420.549 765.369 420.25 765.51 420.111 765.785 cv
419.984 766.06 419.916 766.453 419.916 766.969 cv
419.916 767.586 li
420.549 767.586 li
421.539 767.586 422.029 767.883 422.029 768.482 cv
422.029 768.9 421.902 769.172 421.637 769.287 cv
421.375 769.4 421.013 769.457 420.549 769.457 cv
419.916 769.457 li
419.916 776.328 li
419.916 776.84 419.795 777.228 419.547 777.496 cv
419.304 777.769 418.992 777.902 418.603 777.902 cv
418.236 777.902 417.933 777.769 417.685 777.496 cv
417.441 777.228 417.322 776.84 417.322 776.328 cv
417.322 769.457 li
416.607 769.457 li
416.219 769.457 415.926 769.373 415.715 769.195 cv
415.506 769.025 415.4 768.797 415.4 768.518 cv
415.4 767.894 415.834 767.586 416.703 767.586 cv
f
425.193 774.16 mo
425.193 776.328 li
425.193 776.851 425.06 777.248 424.818 777.508 cv
424.572 777.773 424.26 777.902 423.881 777.902 cv
423.5 777.902 423.193 777.771 422.955 777.502 cv
422.719 777.238 422.594 776.846 422.594 776.328 cv
422.594 769.105 li
422.594 767.939 423.013 767.357 423.855 767.357 cv
424.289 767.357 424.597 767.492 424.789 767.766 cv
424.978 768.039 425.084 768.439 425.105 768.973 cv
425.414 768.439 425.73 768.039 426.054 767.766 cv
426.387 767.492 426.816 767.357 427.363 767.357 cv
427.912 767.357 428.435 767.492 428.949 767.766 cv
429.465 768.039 429.721 768.402 429.721 768.85 cv
429.721 769.164 429.609 769.43 429.394 769.631 cv
429.174 769.84 428.939 769.943 428.687 769.943 cv
428.588 769.943 428.357 769.881 427.996 769.764 cv
427.631 769.65 427.306 769.59 427.033 769.59 cv
426.652 769.59 426.34 769.693 426.101 769.889 cv
425.859 770.094 425.67 770.385 425.537 770.775 cv
425.408 771.17 425.318 771.641 425.263 772.18 cv
425.215 772.721 425.193 773.383 425.193 774.16 cv
f
432.039 771.793 mo
436.74 771.793 li
436.677 770.908 436.443 770.244 436.027 769.807 cv
435.609 769.365 435.068 769.146 434.387 769.146 cv
433.74 769.146 433.209 769.367 432.795 769.816 cv
432.381 770.262 432.127 770.92 432.039 771.793 cv
437.113 773.268 mo
432.039 773.268 li
432.049 773.855 432.164 774.379 432.394 774.826 cv
432.629 775.273 432.933 775.613 433.318 775.844 cv
433.703 776.07 434.123 776.184 434.588 776.184 cv
434.898 776.184 435.179 776.15 435.437 776.072 cv
435.691 776.002 435.941 775.887 436.181 775.73 cv
436.424 775.578 436.642 775.412 436.846 775.23 cv
437.049 775.057 437.312 774.814 437.637 774.512 cv
437.771 774.398 437.961 774.338 438.205 774.338 cv
438.472 774.338 438.685 774.412 438.853 774.56 cv
439.019 774.707 439.097 774.91 439.097 775.178 cv
439.097 775.412 439.008 775.685 438.83 775.996 cv
438.642 776.314 438.367 776.613 437.994 776.902 cv
437.619 777.187 437.154 777.43 436.596 777.617 cv
436.037 777.807 435.39 777.902 434.664 777.902 cv
432.994 777.902 431.701 777.43 430.777 776.48 cv
429.853 775.529 429.387 774.238 429.387 772.613 cv
429.387 771.846 429.504 771.135 429.734 770.478 cv
429.959 769.82 430.291 769.262 430.732 768.791 cv
431.168 768.32 431.703 767.963 432.346 767.713 cv
432.982 767.463 433.691 767.338 434.472 767.338 cv
435.484 767.338 436.353 767.553 437.08 767.984 cv
437.802 768.406 438.353 768.961 438.709 769.639 cv
439.07 770.318 439.25 771.006 439.25 771.713 cv
439.25 772.361 439.062 772.783 438.689 772.978 cv
438.316 773.172 437.791 773.268 437.113 773.268 cv
f
442.828 771.793 mo
447.529 771.793 li
447.465 770.908 447.224 770.244 446.814 769.807 cv
446.392 769.365 445.851 769.146 445.172 769.146 cv
444.525 769.146 443.996 769.367 443.578 769.816 cv
443.166 770.262 442.912 770.92 442.828 771.793 cv
447.9 773.268 mo
442.828 773.268 li
442.834 773.855 442.953 774.379 443.181 774.826 cv
443.414 775.273 443.721 775.613 444.103 775.844 cv
444.486 776.07 444.908 776.184 445.375 776.184 cv
445.681 776.184 445.966 776.15 446.219 776.072 cv
446.478 776.002 446.724 775.887 446.969 775.73 cv
447.211 775.578 447.429 775.412 447.633 775.23 cv
447.832 775.057 448.097 774.814 448.422 774.512 cv
448.556 774.398 448.748 774.338 448.99 774.338 cv
449.258 774.338 449.472 774.412 449.64 774.56 cv
449.804 774.707 449.881 774.91 449.881 775.178 cv
449.881 775.412 449.793 775.685 449.607 775.996 cv
449.429 776.314 449.152 776.613 448.777 776.902 cv
448.406 777.187 447.937 777.43 447.381 777.617 cv
446.824 777.807 446.174 777.902 445.447 777.902 cv
443.779 777.902 442.488 777.43 441.56 776.48 cv
440.637 775.529 440.172 774.238 440.172 772.613 cv
440.172 771.846 440.287 771.135 440.519 770.478 cv
440.746 769.82 441.078 769.262 441.515 768.791 cv
441.951 768.32 442.488 767.963 443.129 767.713 cv
443.767 767.463 444.48 767.338 445.258 767.338 cv
446.267 767.338 447.137 767.553 447.871 767.984 cv
448.591 768.406 449.137 768.961 449.492 769.639 cv
449.851 770.318 450.037 771.006 450.037 771.713 cv
450.037 772.361 449.846 772.783 449.476 772.978 cv
449.101 773.172 448.576 773.268 447.9 773.268 cv
f
458.664 772.584 mo
458.664 771.898 458.558 771.31 458.349 770.82 cv
458.14 770.328 457.851 769.953 457.484 769.693 cv
457.117 769.43 456.701 769.297 456.252 769.297 cv
455.537 769.297 454.933 769.58 454.443 770.141 cv
453.951 770.707 453.703 771.535 453.703 772.633 cv
453.703 773.66 453.947 774.467 454.439 775.039 cv
454.926 775.613 455.525 775.898 456.252 775.898 cv
456.679 775.898 457.082 775.771 457.449 775.525 cv
457.82 775.273 458.113 774.898 458.332 774.398 cv
458.552 773.896 458.664 773.291 458.664 772.584 cv
453.58 768.816 mo
453.58 769.127 li
454.066 768.525 454.574 768.084 455.105 767.803 cv
455.623 767.518 456.222 767.375 456.887 767.375 cv
457.681 767.375 458.422 767.584 459.094 767.992 cv
459.765 768.406 460.293 769.008 460.683 769.799 cv
461.072 770.594 461.269 771.529 461.269 772.613 cv
461.269 773.408 461.156 774.144 460.933 774.814 cv
460.709 775.482 460.396 776.041 460.004 776.494 cv
459.611 776.943 459.148 777.295 458.615 777.539 cv
458.072 777.781 457.504 777.902 456.887 777.902 cv
456.148 777.902 455.523 777.754 455.021 777.455 cv
454.519 777.164 454.039 776.723 453.58 776.15 cv
453.58 780.043 li
453.58 781.178 453.164 781.752 452.336 781.752 cv
451.846 781.752 451.527 781.605 451.365 781.312 cv
451.213 781.014 451.131 780.59 451.131 780.021 cv
451.131 768.828 li
451.131 768.334 451.238 767.969 451.451 767.721 cv
451.666 767.482 451.963 767.357 452.336 767.357 cv
452.705 767.357 453.002 767.482 453.232 767.73 cv
453.466 767.984 453.58 768.342 453.58 768.816 cv
f
465.164 768.828 mo
465.164 776.33 li
465.164 776.846 465.041 777.238 464.795 777.502 cv
464.545 777.771 464.234 777.902 463.853 777.902 cv
463.472 777.902 463.168 777.769 462.926 777.496 cv
462.691 777.221 462.57 776.832 462.57 776.33 cv
462.57 768.902 li
462.57 768.393 462.691 768.008 462.926 767.748 cv
463.168 767.484 463.472 767.357 463.853 767.357 cv
464.234 767.357 464.545 767.484 464.795 767.748 cv
465.041 768.008 465.164 768.371 465.164 768.828 cv
463.881 766.15 mo
463.517 766.15 463.211 766.035 462.957 765.814 cv
462.697 765.592 462.57 765.283 462.57 764.879 cv
462.57 764.51 462.701 764.209 462.966 763.969 cv
463.228 763.734 463.533 763.613 463.881 763.613 cv
464.221 763.613 464.515 763.719 464.773 763.932 cv
465.033 764.15 465.164 764.467 465.164 764.879 cv
465.164 765.277 465.037 765.59 464.787 765.814 cv
464.533 766.035 464.232 766.15 463.881 766.15 cv
f
473.523 776.719 mo
471.24 772.953 li
469.832 774.281 li
469.832 776.348 li
469.832 776.846 469.699 777.228 469.435 777.496 cv
469.177 777.769 468.869 777.902 468.529 777.902 cv
468.131 777.902 467.814 777.771 467.588 777.502 cv
467.361 777.238 467.244 776.846 467.244 776.328 cv
467.244 765.266 li
467.244 764.691 467.359 764.254 467.576 763.951 cv
467.799 763.646 468.121 763.5 468.529 763.5 cv
468.927 763.5 469.242 763.637 469.478 763.91 cv
469.713 764.182 469.832 764.584 469.832 765.113 cv
469.832 771.406 li
472.748 768.344 li
473.109 767.967 473.381 767.703 473.574 767.564 cv
473.763 767.426 473.994 767.357 474.263 767.357 cv
474.59 767.357 474.857 767.461 475.08 767.666 cv
475.291 767.871 475.4 768.131 475.4 768.439 cv
475.4 768.818 475.047 769.328 474.346 769.961 cv
472.969 771.223 li
475.627 775.406 li
475.82 775.719 475.966 775.949 476.051 776.111 cv
476.135 776.271 476.181 776.432 476.181 776.574 cv
476.181 776.986 476.066 777.309 475.84 777.549 cv
475.615 777.785 475.316 777.902 474.955 777.902 cv
474.638 777.902 474.39 777.822 474.221 777.646 cv
474.051 777.475 473.814 777.164 473.523 776.719 cv
f
479.16 777.902 mo
478.767 777.902 478.431 777.777 478.146 777.521 cv
477.861 777.273 477.716 776.916 477.716 776.457 cv
477.716 776.072 477.855 775.738 478.127 775.463 cv
478.402 775.184 478.734 775.043 479.135 775.043 cv
479.533 775.043 479.871 775.184 480.158 775.455 cv
480.437 775.73 480.58 776.068 480.58 776.457 cv
480.58 776.91 480.437 777.266 480.158 777.518 cv
479.871 777.777 479.539 777.902 479.16 777.902 cv
f
492.058 774.693 mo
492.058 775.014 491.961 775.361 491.767 775.726 cv
491.576 776.098 491.279 776.445 490.881 776.777 cv
490.486 777.109 489.99 777.379 489.386 777.58 cv
488.785 777.783 488.105 777.887 487.355 777.887 cv
485.75 777.887 484.498 777.418 483.597 776.486 cv
482.703 775.551 482.252 774.297 482.252 772.726 cv
482.252 771.658 482.457 770.721 482.871 769.902 cv
483.279 769.088 483.875 768.455 484.652 768.008 cv
485.431 767.56 486.369 767.338 487.447 767.338 cv
488.121 767.338 488.734 767.435 489.299 767.633 cv
489.859 767.828 490.332 768.084 490.724 768.393 cv
491.111 768.707 491.41 769.035 491.613 769.385 cv
491.82 769.736 491.922 770.064 491.922 770.371 cv
491.922 770.68 491.808 770.943 491.578 771.158 cv
491.344 771.373 491.062 771.482 490.74 771.482 cv
490.521 771.482 490.342 771.426 490.199 771.316 cv
490.054 771.205 489.894 771.027 489.72 770.775 cv
489.402 770.297 489.074 769.934 488.724 769.695 cv
488.381 769.453 487.943 769.334 487.41 769.334 cv
486.648 769.334 486.027 769.631 485.556 770.23 cv
485.09 770.826 484.853 771.65 484.853 772.685 cv
484.853 773.174 484.916 773.625 485.037 774.033 cv
485.154 774.439 485.328 774.789 485.556 775.076 cv
485.787 775.363 486.06 775.582 486.383 775.73 cv
486.707 775.885 487.064 775.957 487.447 775.957 cv
487.969 775.957 488.414 775.836 488.783 775.596 cv
489.16 775.355 489.486 774.988 489.769 774.494 cv
489.927 774.203 490.097 773.976 490.279 773.81 cv
490.461 773.646 490.687 773.56 490.955 773.56 cv
491.271 773.56 491.535 773.684 491.74 773.924 cv
491.951 774.164 492.058 774.422 492.058 774.693 cv
f
500.644 772.633 mo
500.644 771.574 500.41 770.752 499.947 770.164 cv
499.484 769.568 498.857 769.275 498.072 769.275 cv
497.564 769.275 497.117 769.408 496.73 769.67 cv
496.344 769.932 496.049 770.318 495.84 770.834 cv
495.631 771.348 495.525 771.947 495.525 772.633 cv
495.525 773.31 495.627 773.9 495.834 774.406 cv
496.043 774.916 496.336 775.303 496.72 775.572 cv
497.105 775.838 497.554 775.976 498.072 775.976 cv
498.857 775.976 499.484 775.68 499.947 775.084 cv
500.41 774.494 500.644 773.674 500.644 772.633 cv
503.248 772.633 mo
503.248 773.402 503.127 774.117 502.892 774.771 cv
502.646 775.424 502.301 775.984 501.844 776.449 cv
501.388 776.918 500.842 777.277 500.211 777.529 cv
499.572 777.777 498.861 777.904 498.072 777.904 cv
497.287 777.904 496.58 777.777 495.951 777.521 cv
495.328 777.273 494.781 776.908 494.326 776.439 cv
493.865 775.963 493.517 775.406 493.273 774.764 cv
493.045 774.119 492.924 773.408 492.924 772.633 cv
492.924 771.846 493.047 771.127 493.281 770.475 cv
493.523 769.82 493.871 769.262 494.32 768.801 cv
494.771 768.34 495.314 767.984 495.951 767.73 cv
496.595 767.482 497.301 767.357 498.072 767.357 cv
498.857 767.357 499.57 767.482 500.211 767.738 cv
500.849 767.99 501.394 768.353 501.855 768.818 cv
502.312 769.293 502.658 769.848 502.894 770.49 cv
503.129 771.141 503.248 771.85 503.248 772.633 cv
f
513.14 772.822 mo
513.14 776.269 li
513.14 776.816 513.019 777.221 512.771 777.496 cv
512.521 777.769 512.199 777.904 511.793 777.904 cv
511.4 777.904 511.08 777.769 510.842 777.496 cv
510.595 777.221 510.47 776.816 510.47 776.269 cv
510.47 772.139 li
510.47 771.484 510.449 770.976 510.406 770.613 cv
510.361 770.26 510.238 769.959 510.045 769.73 cv
509.847 769.496 509.535 769.379 509.113 769.379 cv
508.263 769.379 507.707 769.67 507.437 770.26 cv
507.17 770.836 507.031 771.674 507.031 772.768 cv
507.031 776.269 li
507.031 776.807 506.908 777.215 506.67 777.492 cv
506.42 777.766 506.101 777.904 505.705 777.904 cv
505.308 777.904 504.988 777.766 504.738 777.492 cv
504.486 777.215 504.361 776.807 504.361 776.269 cv
504.361 768.85 li
504.361 768.361 504.472 767.99 504.697 767.738 cv
504.926 767.482 505.222 767.357 505.586 767.357 cv
505.943 767.357 506.238 767.48 506.478 767.713 cv
506.715 767.951 506.832 768.279 506.832 768.697 cv
506.832 768.941 li
507.285 768.406 507.767 768.01 508.277 767.762 cv
508.793 767.502 509.359 767.375 509.99 767.375 cv
510.64 767.375 511.201 767.506 511.668 767.766 cv
512.136 768.025 512.521 768.42 512.828 768.941 cv
513.267 768.414 513.736 768.019 514.238 767.762 cv
514.738 767.504 515.291 767.375 515.9 767.375 cv
516.605 767.375 517.22 767.518 517.734 767.795 cv
518.244 768.072 518.627 768.475 518.881 768.99 cv
519.101 769.463 519.211 770.199 519.211 771.207 cv
519.211 776.269 li
519.211 776.816 519.09 777.221 518.844 777.496 cv
518.597 777.769 518.269 777.904 517.865 777.904 cv
517.47 777.904 517.15 777.766 516.9 777.492 cv
516.65 777.215 516.523 776.807 516.523 776.269 cv
516.523 771.908 li
516.523 771.35 516.5 770.904 516.455 770.57 cv
516.408 770.232 516.277 769.949 516.072 769.723 cv
515.859 769.496 515.541 769.379 515.119 769.379 cv
514.777 769.379 514.453 769.486 514.144 769.687 cv
513.838 769.885 513.597 770.164 513.424 770.5 cv
513.238 770.937 513.14 771.713 513.14 772.822 cv
f
392.435 772.004 mo
392.433 772 392.433 771.994 392.433 771.986 cv
392.433 771.994 392.433 772 392.435 772.004 cv
cp
f
392.566 772.834 mo
392.568 772.834 392.568 772.834 392.569 772.834 cv
392.519 772.598 392.481 772.363 392.45 772.131 cv
392.481 772.365 392.519 772.6 392.566 772.834 cv
cp
f
393.425 775.24 mo
393.419 775.23 393.414 775.219 393.408 775.207 cv
393.414 775.219 393.419 775.23 393.425 775.24 cv
cp
f
393.343 775.08 mo
393.32 775.035 393.299 774.99 393.277 774.945 cv
393.299 774.992 393.32 775.035 393.343 775.08 cv
cp
f
392.807 773.76 mo
392.934 774.16 393.087 774.549 393.264 774.918 cv
393.084 774.541 392.934 774.152 392.811 773.76 cv
392.81 773.76 392.808 773.76 392.807 773.76 cv
cp
f
402.472 762.068 mo
402.974 762.068 403.344 762.107 403.767 762.18 cv
403.888 761.416 li
403.888 761.416 402.716 761.057 401.177 761.182 cv
401.056 760.768 li
401.535 760.666 401.894 760.24 401.894 759.732 cv
401.894 759.15 401.42 758.68 400.837 758.68 cv
400.254 758.68 399.781 759.15 399.781 759.732 cv
399.781 760.24 400.14 760.666 400.617 760.768 cv
400.751 761.23 li
399.117 761.455 397.816 762.092 397.816 762.092 cv
398.047 762.797 li
399.035 762.469 399.893 762.268 400.671 762.184 cv
401.432 762.103 402.006 762.068 402.472 762.068 cv
cp
f
393.405 765.926 mo
393.411 765.918 li
393.45 765.869 393.487 765.822 393.524 765.775 cv
393.211 765.551 li
392.723 765.193 li
392.696 765.232 391.929 765.937 391.322 767.242 cv
391.297 767.201 391.266 767.16 391.232 767.123 cv
391.051 766.924 390.797 766.822 390.474 766.828 cv
390.47 766.828 390.465 766.828 390.459 766.828 cv
390.26 766.828 390.122 766.762 390.033 766.682 cv
390.122 766.568 390.176 766.426 390.176 766.268 cv
390.176 765.9 389.876 765.6 389.506 765.6 cv
389.137 765.6 388.838 765.9 388.838 766.268 cv
388.838 766.639 389.137 766.937 389.506 766.937 cv
389.564 766.937 389.619 766.928 389.673 766.916 cv
389.838 767.1 390.098 767.258 390.481 767.25 cv
390.677 767.248 390.822 767.299 390.918 767.406 cv
391.029 767.527 391.067 767.701 391.078 767.834 cv
391.077 767.836 391.077 767.838 391.075 767.838 cv
390.639 769.027 390.764 770.508 390.764 770.508 cv
391.821 770.551 li
391.843 770.012 391.92 769.068 392.193 768.32 cv
392.719 766.871 393.378 765.965 393.405 765.926 cv
cp
f
411.672 762.951 mo
411.304 762.951 411.004 763.25 411.004 763.621 cv
411.004 763.678 411.012 763.732 411.027 763.785 cv
410.844 763.951 410.683 764.213 410.689 764.596 cv
410.693 764.793 410.642 764.935 410.535 765.033 cv
410.451 765.107 410.344 765.148 410.24 765.174 cv
409.453 764.07 408.484 763.398 408.484 763.398 cv
407.724 764.211 li
408.299 764.732 408.885 765.387 409.453 766.201 cv
409.847 766.766 410.252 767.492 410.59 768.217 cv
411.613 767.73 li
411.613 767.73 411.146 766.574 410.488 765.539 cv
410.601 765.498 410.716 765.435 410.818 765.346 cv
411.019 765.166 411.117 764.91 411.111 764.588 cv
411.109 764.381 411.177 764.24 411.26 764.146 cv
411.375 764.234 411.517 764.289 411.672 764.289 cv
412.043 764.289 412.341 763.99 412.341 763.621 cv
412.341 763.25 412.043 762.951 411.672 762.951 cv
cp
f
409.015 772.154 mo
407.605 772.84 405.287 773.748 402.234 774.174 cv
401.035 774.34 399.874 774.4 398.805 774.4 cv
397.415 774.4 396.186 774.297 395.243 774.178 cv
394.167 774.043 393.325 773.877 392.811 773.76 cv
392.934 774.152 393.084 774.541 393.264 774.918 cv
393.268 774.928 393.272 774.939 393.277 774.945 cv
393.299 774.99 393.32 775.035 393.343 775.08 cv
393.364 775.123 393.385 775.166 393.408 775.207 cv
393.414 775.219 393.419 775.23 393.425 775.24 cv
393.727 775.81 394.091 776.334 394.505 776.789 cv
395.945 778.363 397.412 778.613 397.426 778.615 cv
397.449 778.617 li
397.471 778.625 li
397.484 778.631 398.784 779.051 400.762 779.051 cv
402.707 779.051 404.617 778.658 406.435 777.883 cv
407.783 777.193 409.058 776.146 409.689 775.213 cv
410.177 774.49 410.531 773.721 410.74 772.92 cv
410.851 772.494 410.939 771.812 410.887 771.094 cv
410.49 771.361 409.863 771.74 409.015 772.154 cv
cp
f
397.885 765.523 mo
399.442 765.523 400.702 766.785 400.702 768.342 cv
400.702 769.896 399.442 771.156 397.885 771.156 cv
396.331 771.156 395.07 769.896 395.07 768.342 cv
395.07 766.785 396.331 765.523 397.885 765.523 cv
cp
406.127 765.594 mo
407.088 765.594 407.871 766.375 407.871 767.336 cv
407.871 768.299 407.088 769.08 406.127 769.08 cv
405.166 769.08 404.385 768.299 404.385 767.336 cv
404.385 766.375 405.166 765.594 406.127 765.594 cv
cp
393.858 766.26 mo
393.817 766.32 393.205 767.185 392.722 768.514 cv
392.361 769.508 392.377 770.957 392.377 770.973 cv
392.377 770.976 li
392.377 771.316 392.396 771.652 392.433 771.986 cv
392.433 771.994 392.433 772 392.435 772.004 cv
392.439 772.047 392.447 772.088 392.45 772.131 cv
392.481 772.363 392.519 772.598 392.569 772.834 cv
393.269 773.012 397.448 773.986 402.117 773.336 cv
405.045 772.928 407.267 772.062 408.617 771.408 cv
409.738 770.865 410.459 770.373 410.736 770.17 cv
410.459 769.143 409.695 767.529 408.994 766.523 cv
406.988 763.658 404.826 762.924 403.716 762.74 cv
403.293 762.672 402.953 762.631 402.472 762.631 cv
402.026 762.631 401.471 762.668 400.73 762.746 cv
399.987 762.822 399.158 763.018 398.198 763.342 cv
396.85 763.793 395.63 764.5 394.671 765.389 cv
394.638 765.42 li
394.496 765.551 394.199 765.826 393.858 766.26 cv
cp
f
225.402 208.398 mo
225.402 229.998 li
214.602 229.998 li
214.602 208.398 li
225.402 208.398 li
cp
0 .561791 .637842 0 cmyk
f
214.602 208.398 mo
214.602 229.998 li
203.802 229.998 li
203.802 208.398 li
203.802 186.798 li
203.802 175.998 li
214.602 175.998 li
214.602 208.398 li
cp
f
203.802 337.998 mo
203.802 348.798 li
193.002 348.798 li
193.002 337.998 li
203.802 337.998 li
cp
0 .759121 .565881 0 cmyk
f
203.802 327.198 mo
203.802 337.998 li
193.002 337.998 li
193.002 327.198 li
203.802 327.198 li
cp
.0538033 .142031 .277562 0 cmyk
f
203.802 251.598 mo
203.802 327.198 li
193.002 327.198 li
193.002 251.598 li
203.802 251.598 li
cp
f
203.802 208.398 mo
203.802 229.998 li
193.002 229.998 li
193.002 208.398 li
203.802 208.398 li
cp
0 .561791 .637842 0 cmyk
f
203.802 186.798 mo
203.802 208.398 li
193.002 208.398 li
193.002 186.798 li
203.802 186.798 li
cp
.0538033 .142031 .277562 0 cmyk
f
203.802 175.998 mo
203.802 186.798 li
193.002 186.798 li
193.002 175.998 li
193.002 165.198 li
203.802 165.198 li
203.802 175.998 li
cp
0 .561791 .637842 0 cmyk
f
193.002 413.598 mo
193.002 424.398 li
171.402 424.398 li
171.402 413.598 li
193.002 413.598 li
cp
0 .759121 .565881 0 cmyk
f
193.002 348.798 mo
193.002 413.598 li
171.402 413.598 li
171.402 348.798 li
193.002 348.798 li
cp
.0538033 .142031 .277562 0 cmyk
f
193.002 337.998 mo
193.002 348.798 li
171.402 348.798 li
171.402 337.998 li
193.002 337.998 li
cp
0 .759121 .565881 0 cmyk
f
193.002 327.198 mo
193.002 337.998 li
171.402 337.998 li
171.402 327.198 li
193.002 327.198 li
cp
f
193.002 251.598 mo
193.002 327.198 li
171.402 327.198 li
160.602 327.198 li
139.002 327.198 li
139.002 251.598 li
139.002 240.798 li
149.802 240.798 li
155.058 240.798 li
155.058 251.598 li
176.658 251.598 li
176.658 240.798 li
182.202 240.798 li
193.002 240.798 li
193.002 251.598 li
cp
f
193.002 229.998 mo
193.002 240.798 li
182.202 240.798 li
182.202 229.998 li
193.002 229.998 li
cp
f
160.602 197.598 mo
160.602 186.798 li
149.802 186.798 li
149.802 197.598 li
160.602 197.598 li
cp
182.202 197.598 mo
182.202 186.798 li
171.402 186.798 li
171.402 197.598 li
182.202 197.598 li
cp
182.202 219.198 mo
182.202 208.398 li
149.802 208.398 li
149.802 219.198 li
182.202 219.198 li
cp
193.002 208.398 mo
193.002 229.998 li
182.202 229.998 li
171.402 229.998 li
160.602 229.998 li
149.802 229.998 li
139.002 229.998 li
139.002 208.398 li
139.002 186.798 li
139.002 175.998 li
149.802 175.998 li
149.802 165.198 li
182.202 165.198 li
182.202 175.998 li
193.002 175.998 li
193.002 186.798 li
193.002 208.398 li
cp
.0538033 .142031 .277562 0 cmyk
f
193.002 165.198 mo
193.002 175.998 li
182.202 175.998 li
182.202 165.198 li
193.002 165.198 li
cp
0 .561791 .637842 0 cmyk
f
193.002 154.398 mo
193.002 165.198 li
182.202 165.198 li
149.802 165.198 li
139.002 165.198 li
139.002 154.398 li
149.802 154.398 li
182.202 154.398 li
193.002 154.398 li
cp
f
182.202 208.398 mo
182.202 219.198 li
149.802 219.198 li
149.802 208.398 li
182.202 208.398 li
cp
.0192874 .0142519 .0343023 0 cmyk
f
182.202 186.798 mo
182.202 197.598 li
171.402 197.598 li
171.402 186.798 li
182.202 186.798 li
cp
.774716 .592889 .500999 .328893 cmyk
f
182.202 143.598 mo
182.202 154.398 li
149.802 154.398 li
149.802 143.598 li
182.202 143.598 li
cp
0 .561791 .637842 0 cmyk
f
176.658 240.798 mo
176.658 251.598 li
155.058 251.598 li
155.058 240.798 li
160.602 240.798 li
171.402 240.798 li
176.658 240.798 li
cp
.0538033 .142031 .277562 0 cmyk
f
171.402 337.998 mo
171.402 348.798 li
160.602 348.798 li
160.602 337.998 li
171.402 337.998 li
cp
0 .759121 .565881 0 cmyk
f
171.402 327.198 mo
171.402 337.998 li
160.602 337.998 li
160.602 327.198 li
171.402 327.198 li
cp
f
171.402 229.998 mo
171.402 240.798 li
160.602 240.798 li
160.602 229.998 li
171.402 229.998 li
cp
.0538033 .142031 .277562 0 cmyk
f
160.602 413.598 mo
160.602 424.398 li
139.002 424.398 li
139.002 413.598 li
160.602 413.598 li
cp
0 .759121 .565881 0 cmyk
f
160.602 348.798 mo
160.602 413.598 li
139.002 413.598 li
139.002 348.798 li
160.602 348.798 li
cp
.0538033 .142031 .277562 0 cmyk
f
160.602 337.998 mo
160.602 348.798 li
139.002 348.798 li
139.002 337.998 li
160.602 337.998 li
cp
0 .759121 .565881 0 cmyk
f
160.602 327.198 mo
160.602 337.998 li
139.002 337.998 li
139.002 327.198 li
160.602 327.198 li
cp
f
160.602 186.798 mo
160.602 197.598 li
149.802 197.598 li
149.802 186.798 li
160.602 186.798 li
cp
.774716 .592889 .500999 .328893 cmyk
f
149.802 229.998 mo
149.802 240.798 li
139.002 240.798 li
139.002 229.998 li
149.802 229.998 li
cp
0 .759121 .565881 0 cmyk
f
149.802 165.198 mo
149.802 175.998 li
139.002 175.998 li
139.002 165.198 li
149.802 165.198 li
cp
0 .561791 .637842 0 cmyk
f
139.002 337.998 mo
139.002 348.798 li
128.202 348.798 li
128.202 337.998 li
139.002 337.998 li
cp
0 .759121 .565881 0 cmyk
f
139.002 327.198 mo
139.002 337.998 li
128.202 337.998 li
128.202 327.198 li
139.002 327.198 li
cp
.0538033 .142031 .277562 0 cmyk
f
139.002 251.598 mo
139.002 327.198 li
128.202 327.198 li
128.202 251.598 li
139.002 251.598 li
cp
f
139.002 208.398 mo
139.002 229.998 li
128.202 229.998 li
128.202 208.398 li
139.002 208.398 li
cp
0 .561791 .637842 0 cmyk
f
139.002 186.798 mo
139.002 208.398 li
128.202 208.398 li
128.202 186.798 li
139.002 186.798 li
cp
.0538033 .142031 .277562 0 cmyk
f
139.002 175.998 mo
139.002 186.798 li
128.202 186.798 li
128.202 175.998 li
128.202 165.198 li
139.002 165.198 li
139.002 175.998 li
cp
0 .561791 .637842 0 cmyk
f
128.202 208.398 mo
128.202 229.998 li
117.402 229.998 li
117.402 208.398 li
117.402 175.998 li
128.202 175.998 li
128.202 186.798 li
128.202 208.398 li
cp
f
117.402 208.398 mo
117.402 229.998 li
106.602 229.998 li
106.602 208.398 li
117.402 208.398 li
cp
f
362.601 413.598 mo
362.601 424.398 li
330.201 424.398 li
330.201 413.598 li
351.801 413.598 li
362.601 413.598 li
cp
.774716 .592889 .500999 .328893 cmyk
f
362.601 327.198 mo
362.601 337.998 li
351.801 337.998 li
351.801 327.198 li
362.601 327.198 li
cp
.0538033 .142031 .277562 0 cmyk
f
362.601 240.798 mo
362.601 327.198 li
351.801 327.198 li
351.801 240.798 li
362.601 240.798 li
cp
.774716 .592889 .500999 .328893 cmyk
f
362.601 197.598 mo
362.601 208.398 li
351.801 208.398 li
351.801 197.598 li
362.601 197.598 li
cp
.397711 .634791 .812375 .336828 cmyk
f
362.601 186.798 mo
362.601 197.598 li
351.801 197.598 li
351.801 186.798 li
362.601 186.798 li
cp
.0538033 .142031 .277562 0 cmyk
f
362.601 165.198 mo
362.601 186.798 li
351.801 186.798 li
351.801 165.198 li
362.601 165.198 li
cp
.397711 .634791 .812375 .336828 cmyk
f
351.801 337.998 mo
351.801 413.598 li
330.201 413.598 li
330.201 337.998 li
330.201 327.198 li
351.801 327.198 li
351.801 337.998 li
cp
.675166 .356603 .285069 .0153811 cmyk
f
351.801 240.798 mo
351.801 327.198 li
330.201 327.198 li
308.601 327.198 li
287.001 327.198 li
287.001 240.798 li
308.601 240.798 li
308.601 251.598 li
319.401 251.598 li
319.401 262.398 li
330.201 262.398 li
330.201 251.598 li
330.201 240.798 li
351.801 240.798 li
cp
.774716 .592889 .500999 .328893 cmyk
f
319.401 197.598 mo
319.401 186.798 li
308.601 186.798 li
308.601 197.598 li
319.401 197.598 li
cp
341.001 197.598 mo
341.001 186.798 li
330.201 186.798 li
330.201 197.598 li
341.001 197.598 li
cp
341.001 219.198 mo
341.001 208.398 li
308.601 208.398 li
308.601 219.198 li
341.001 219.198 li
cp
351.801 208.398 mo
351.801 229.998 li
330.201 229.998 li
308.601 229.998 li
297.801 229.998 li
297.801 208.398 li
297.801 197.598 li
297.801 186.798 li
297.801 165.198 li
351.801 165.198 li
351.801 186.798 li
351.801 197.598 li
351.801 208.398 li
cp
.0538033 .142031 .277562 0 cmyk
f
351.801 154.398 mo
351.801 165.198 li
297.801 165.198 li
297.801 154.398 li
319.401 154.398 li
341.001 154.398 li
351.801 154.398 li
cp
.397711 .634791 .812375 .336828 cmyk
f
341.001 208.398 mo
341.001 219.198 li
308.601 219.198 li
308.601 208.398 li
341.001 208.398 li
cp
.0192874 .0142519 .0343023 0 cmyk
f
341.001 186.798 mo
341.001 197.598 li
330.201 197.598 li
330.201 186.798 li
341.001 186.798 li
cp
.774716 .592889 .500999 .328893 cmyk
f
341.001 143.598 mo
341.001 154.398 li
319.401 154.398 li
319.401 143.598 li
341.001 143.598 li
cp
.397711 .634791 .812375 .336828 cmyk
f
330.201 327.198 mo
330.201 337.998 li
308.601 337.998 li
308.601 327.198 li
330.201 327.198 li
cp
.675166 .356603 .285069 .0153811 cmyk
f
330.201 251.598 mo
330.201 262.398 li
319.401 262.398 li
319.401 251.598 li
330.201 251.598 li
cp
.0192874 .0142519 .0343023 0 cmyk
f
330.201 240.798 mo
330.201 251.598 li
319.401 251.598 li
308.601 251.598 li
308.601 240.798 li
330.201 240.798 li
cp
f
330.201 229.998 mo
330.201 240.798 li
308.601 240.798 li
308.601 229.998 li
330.201 229.998 li
cp
.0538033 .142031 .277562 0 cmyk
f
319.401 413.598 mo
319.401 424.398 li
287.001 424.398 li
287.001 413.598 li
308.601 413.598 li
319.401 413.598 li
cp
.774716 .592889 .500999 .328893 cmyk
f
319.401 186.798 mo
319.401 197.598 li
308.601 197.598 li
308.601 186.798 li
319.401 186.798 li
cp
f
308.601 337.998 mo
308.601 413.598 li
287.001 413.598 li
287.001 337.998 li
287.001 327.198 li
308.601 327.198 li
308.601 337.998 li
cp
.675166 .356603 .285069 .0153811 cmyk
f
297.801 197.598 mo
297.801 208.398 li
287.001 208.398 li
287.001 197.598 li
297.801 197.598 li
cp
.397711 .634791 .812375 .336828 cmyk
f
297.801 186.798 mo
297.801 197.598 li
287.001 197.598 li
287.001 186.798 li
297.801 186.798 li
cp
.0538033 .142031 .277562 0 cmyk
f
297.801 165.198 mo
297.801 186.798 li
287.001 186.798 li
287.001 165.198 li
297.801 165.198 li
cp
.397711 .634791 .812375 .336828 cmyk
f
287.001 327.198 mo
287.001 337.998 li
276.201 337.998 li
276.201 327.198 li
287.001 327.198 li
cp
.0538033 .142031 .277562 0 cmyk
f
287.001 240.798 mo
287.001 327.198 li
276.201 327.198 li
276.201 240.798 li
287.001 240.798 li
cp
.774716 .592889 .500999 .328893 cmyk
f
669.398 413.598 mo
669.398 424.398 li
636.998 424.398 li
636.998 413.598 li
658.598 413.598 li
669.398 413.598 li
cp
f
669.398 327.198 mo
669.398 337.998 li
658.598 337.998 li
658.598 327.198 li
669.398 327.198 li
cp
.0538033 .142031 .277562 0 cmyk
f
669.398 240.798 mo
669.398 327.198 li
658.598 327.198 li
658.598 240.798 li
669.398 240.798 li
cp
.774716 .592889 .500999 .328893 cmyk
f
669.398 186.798 mo
669.398 197.598 li
658.598 197.598 li
658.598 186.798 li
669.398 186.798 li
cp
.0538033 .142031 .277562 0 cmyk
f
669.398 165.198 mo
669.398 186.798 li
658.598 186.798 li
658.598 165.198 li
669.398 165.198 li
cp
.774716 .592889 .500999 .328893 cmyk
f
658.598 337.998 mo
658.598 413.598 li
636.998 413.598 li
636.998 337.998 li
636.998 327.198 li
658.598 327.198 li
658.598 337.998 li
cp
.397711 .634791 .812375 .336828 cmyk
f
658.598 240.798 mo
658.598 327.198 li
636.998 327.198 li
615.398 327.198 li
593.798 327.198 li
593.798 240.798 li
615.398 240.798 li
615.398 251.598 li
626.198 251.598 li
626.198 262.398 li
636.998 262.398 li
636.998 251.598 li
636.998 240.798 li
658.598 240.798 li
cp
.774716 .592889 .500999 .328893 cmyk
f
626.198 197.598 mo
626.198 186.798 li
615.398 186.798 li
615.398 197.598 li
626.198 197.598 li
cp
647.798 197.598 mo
647.798 186.798 li
636.998 186.798 li
636.998 197.598 li
647.798 197.598 li
cp
647.798 219.198 mo
647.798 208.398 li
615.398 208.398 li
615.398 219.198 li
647.798 219.198 li
cp
658.598 197.598 mo
658.598 229.998 li
636.998 229.998 li
615.398 229.998 li
604.598 229.998 li
604.598 197.598 li
604.598 186.798 li
604.598 165.198 li
658.598 165.198 li
658.598 186.798 li
658.598 197.598 li
cp
.0538033 .142031 .277562 0 cmyk
f
658.598 154.398 mo
658.598 165.198 li
604.598 165.198 li
604.598 154.398 li
636.998 154.398 li
658.598 154.398 li
cp
.774716 .592889 .500999 .328893 cmyk
f
658.598 143.598 mo
658.598 154.398 li
636.998 154.398 li
636.998 143.598 li
658.598 143.598 li
cp
f
647.798 208.398 mo
647.798 219.198 li
615.398 219.198 li
615.398 208.398 li
647.798 208.398 li
cp
f
647.798 186.798 mo
647.798 197.598 li
636.998 197.598 li
636.998 186.798 li
647.798 186.798 li
cp
f
636.998 327.198 mo
636.998 337.998 li
615.398 337.998 li
615.398 327.198 li
636.998 327.198 li
cp
.397711 .634791 .812375 .336828 cmyk
f
636.998 251.598 mo
636.998 262.398 li
626.198 262.398 li
626.198 251.598 li
636.998 251.598 li
cp
.774716 .592889 .500999 .328893 cmyk
f
636.998 240.798 mo
636.998 251.598 li
626.198 251.598 li
615.398 251.598 li
615.398 240.798 li
636.998 240.798 li
cp
f
636.998 229.998 mo
636.998 240.798 li
615.398 240.798 li
615.398 229.998 li
636.998 229.998 li
cp
f
626.198 413.598 mo
626.198 424.398 li
593.798 424.398 li
593.798 413.598 li
615.398 413.598 li
626.198 413.598 li
cp
f
626.198 186.798 mo
626.198 197.598 li
615.398 197.598 li
615.398 186.798 li
626.198 186.798 li
cp
f
615.398 337.998 mo
615.398 413.598 li
593.798 413.598 li
593.798 337.998 li
593.798 327.198 li
615.398 327.198 li
615.398 337.998 li
cp
.397711 .634791 .812375 .336828 cmyk
f
604.598 186.798 mo
604.598 197.598 li
593.798 197.598 li
593.798 186.798 li
604.598 186.798 li
cp
.0538033 .142031 .277562 0 cmyk
f
604.598 165.198 mo
604.598 186.798 li
593.798 186.798 li
593.798 165.198 li
604.598 165.198 li
cp
.774716 .592889 .500999 .328893 cmyk
f
593.798 327.198 mo
593.798 337.998 li
582.998 337.998 li
582.998 327.198 li
593.798 327.198 li
cp
.0538033 .142031 .277562 0 cmyk
f
593.798 240.798 mo
593.798 327.198 li
582.998 327.198 li
582.998 240.798 li
593.798 240.798 li
cp
.774716 .592889 .500999 .328893 cmyk
f
526.799 273.198 mo
526.799 283.998 li
515.999 283.998 li
515.999 273.198 li
526.799 273.198 li
cp
.0192874 .0142519 .0343023 0 cmyk
f
526.799 251.598 mo
526.799 273.198 li
515.999 273.198 li
515.999 251.598 li
526.799 251.598 li
cp
0 .561791 .637842 0 cmyk
f
515.999 327.198 mo
515.999 337.998 li
505.199 337.998 li
505.199 327.198 li
515.999 327.198 li
cp
.0538033 .142031 .277562 0 cmyk
f
515.999 283.998 mo
515.999 327.198 li
505.199 327.198 li
505.199 283.998 li
515.999 283.998 li
cp
f
515.999 273.198 mo
515.999 283.998 li
505.199 283.998 li
505.199 273.198 li
515.999 273.198 li
cp
.0192874 .0142519 .0343023 0 cmyk
f
515.999 251.598 mo
515.999 273.198 li
505.199 273.198 li
505.199 240.798 li
515.999 240.798 li
515.999 251.598 li
cp
0 .561791 .637842 0 cmyk
f
505.199 413.598 mo
505.199 424.398 li
472.799 424.398 li
472.799 413.598 li
483.599 413.598 li
505.199 413.598 li
cp
.774716 .592889 .500999 .328893 cmyk
f
505.199 337.998 mo
505.199 413.598 li
483.599 413.598 li
483.599 337.998 li
483.599 327.198 li
505.199 327.198 li
505.199 337.998 li
cp
.675166 .356603 .285069 .0153811 cmyk
f
505.199 283.998 mo
505.199 327.198 li
483.599 327.198 li
483.599 240.798 li
494.399 240.798 li
505.199 240.798 li
505.199 273.198 li
505.199 283.998 li
cp
0 .561791 .637842 0 cmyk
f
505.199 186.798 mo
505.199 197.598 li
494.399 197.598 li
494.399 186.798 li
505.199 186.798 li
cp
.0538033 .142031 .277562 0 cmyk
f
505.199 165.198 mo
505.199 186.798 li
494.399 186.798 li
494.399 165.198 li
505.199 165.198 li
cp
.397711 .634791 .812375 .336828 cmyk
f
494.399 229.998 mo
494.399 240.798 li
483.599 240.798 li
483.599 229.998 li
494.399 229.998 li
cp
0 .561791 .637842 0 cmyk
f
461.999 197.598 mo
461.999 186.798 li
451.199 186.798 li
451.199 197.598 li
461.999 197.598 li
cp
472.799 219.198 mo
472.799 208.398 li
461.999 208.398 li
461.999 219.198 li
472.799 219.198 li
cp
483.599 197.598 mo
483.599 186.798 li
472.799 186.798 li
472.799 197.598 li
483.599 197.598 li
cp
494.399 197.598 mo
494.399 229.998 li
483.599 229.998 li
461.999 229.998 li
451.199 229.998 li
440.399 229.998 li
440.399 197.598 li
440.399 186.798 li
440.399 165.198 li
494.399 165.198 li
494.399 186.798 li
494.399 197.598 li
cp
.0538033 .142031 .277562 0 cmyk
f
494.399 154.398 mo
494.399 165.198 li
440.399 165.198 li
440.399 154.398 li
483.599 154.398 li
494.399 154.398 li
cp
.397711 .634791 .812375 .336828 cmyk
f
483.599 327.198 mo
483.599 337.998 li
461.999 337.998 li
461.999 327.198 li
483.599 327.198 li
cp
.675166 .356603 .285069 .0153811 cmyk
f
483.599 240.798 mo
483.599 327.198 li
461.999 327.198 li
461.999 240.798 li
483.599 240.798 li
cp
.0192874 .0142519 .0343023 0 cmyk
f
483.599 229.998 mo
483.599 240.798 li
461.999 240.798 li
461.999 229.998 li
483.599 229.998 li
cp
.0538033 .142031 .277562 0 cmyk
f
483.599 186.798 mo
483.599 197.598 li
472.799 197.598 li
472.799 186.798 li
483.599 186.798 li
cp
.774716 .592889 .500999 .328893 cmyk
f
483.599 143.598 mo
483.599 154.398 li
440.399 154.398 li
440.399 143.598 li
483.599 143.598 li
cp
.397711 .634791 .812375 .336828 cmyk
f
472.799 208.398 mo
472.799 219.198 li
461.999 219.198 li
461.999 208.398 li
472.799 208.398 li
cp
0 .561791 .637842 0 cmyk
f
461.999 413.598 mo
461.999 424.398 li
429.599 424.398 li
429.599 413.598 li
440.399 413.598 li
461.999 413.598 li
cp
.774716 .592889 .500999 .328893 cmyk
f
461.999 337.998 mo
461.999 413.598 li
440.399 413.598 li
440.399 337.998 li
440.399 327.198 li
461.999 327.198 li
461.999 337.998 li
cp
.675166 .356603 .285069 .0153811 cmyk
f
461.999 240.798 mo
461.999 327.198 li
440.399 327.198 li
440.399 283.998 li
440.399 273.198 li
440.399 240.798 li
451.199 240.798 li
461.999 240.798 li
cp
0 .561791 .637842 0 cmyk
f
461.999 229.998 mo
461.999 240.798 li
451.199 240.798 li
451.199 229.998 li
461.999 229.998 li
cp
f
461.999 186.798 mo
461.999 197.598 li
451.199 197.598 li
451.199 186.798 li
461.999 186.798 li
cp
.774716 .592889 .500999 .328893 cmyk
f
440.399 327.198 mo
440.399 337.998 li
429.599 337.998 li
429.599 327.198 li
440.399 327.198 li
cp
.0538033 .142031 .277562 0 cmyk
f
440.399 283.998 mo
440.399 327.198 li
429.599 327.198 li
429.599 283.998 li
440.399 283.998 li
cp
f
440.399 273.198 mo
440.399 283.998 li
429.599 283.998 li
429.599 273.198 li
440.399 273.198 li
cp
.0192874 .0142519 .0343023 0 cmyk
f
440.399 240.798 mo
440.399 273.198 li
429.599 273.198 li
429.599 251.598 li
429.599 240.798 li
440.399 240.798 li
cp
0 .561791 .637842 0 cmyk
f
440.399 186.798 mo
440.399 197.598 li
429.599 197.598 li
429.599 186.798 li
440.399 186.798 li
cp
.0538033 .142031 .277562 0 cmyk
f
440.399 165.198 mo
440.399 186.798 li
429.599 186.798 li
429.599 165.198 li
440.399 165.198 li
cp
.397711 .634791 .812375 .336828 cmyk
f
429.599 273.198 mo
429.599 283.998 li
418.799 283.998 li
418.799 273.198 li
429.599 273.198 li
cp
.0192874 .0142519 .0343023 0 cmyk
f
429.599 251.598 mo
429.599 273.198 li
418.799 273.198 li
418.799 251.598 li
429.599 251.598 li
cp
0 .561791 .637842 0 cmyk
f
521.399 484.398 mo
521.399 538.398 li
510.599 538.398 li
510.599 484.398 li
521.399 484.398 li
cp
.774716 .592889 .500999 .328893 cmyk
f
510.599 646.398 mo
510.599 689.598 li
499.799 689.598 li
499.799 646.398 li
510.599 646.398 li
cp
.283055 .174472 .760159 3.0518e-05 cmyk
f
510.599 635.598 mo
510.599 646.398 li
499.799 646.398 li
499.799 635.598 li
510.599 635.598 li
cp
.0538033 .142031 .277562 0 cmyk
f
510.599 559.998 mo
510.599 635.598 li
499.799 635.598 li
499.799 559.998 li
510.599 559.998 li
cp
f
510.599 538.398 mo
510.599 549.198 li
499.799 549.198 li
483.755 549.198 li
483.755 538.398 li
499.799 538.398 li
510.599 538.398 li
cp
.774716 .592889 .500999 .328893 cmyk
f
510.599 484.398 mo
510.599 538.398 li
499.799 538.398 li
499.799 484.398 li
499.799 473.598 li
510.599 473.598 li
510.599 484.398 li
cp
f
499.799 721.998 mo
499.799 732.798 li
478.199 732.798 li
478.199 721.998 li
499.799 721.998 li
cp
f
499.799 711.198 mo
499.799 721.998 li
478.199 721.998 li
478.199 711.198 li
499.799 711.198 li
cp
.283055 .174472 .760159 3.0518e-05 cmyk
f
499.799 689.598 mo
499.799 711.198 li
478.199 711.198 li
478.199 689.598 li
499.799 689.598 li
cp
.0538033 .142031 .277562 0 cmyk
f
499.799 646.398 mo
499.799 689.598 li
478.199 689.598 li
478.199 646.398 li
499.799 646.398 li
cp
.283055 .174472 .760159 3.0518e-05 cmyk
f
499.799 635.598 mo
499.799 646.398 li
478.199 646.398 li
478.199 635.598 li
499.799 635.598 li
cp
f
499.799 559.998 mo
499.799 635.598 li
478.199 635.598 li
467.399 635.598 li
445.799 635.598 li
445.799 559.998 li
445.799 549.198 li
462.155 549.198 li
462.155 559.998 li
483.755 559.998 li
483.755 549.198 li
499.799 549.198 li
499.799 559.998 li
cp
f
467.399 505.998 mo
467.399 495.198 li
456.599 495.198 li
456.599 505.998 li
467.399 505.998 li
cp
478.199 527.598 mo
478.199 516.798 li
467.399 516.798 li
467.399 527.598 li
478.199 527.598 li
cp
488.999 505.998 mo
488.999 495.198 li
478.199 495.198 li
478.199 505.998 li
488.999 505.998 li
cp
499.799 484.398 mo
499.799 538.398 li
483.755 538.398 li
478.199 538.398 li
467.399 538.398 li
462.155 538.398 li
445.799 538.398 li
445.799 484.398 li
456.599 484.398 li
456.599 473.598 li
488.999 473.598 li
488.999 484.398 li
499.799 484.398 li
cp
.0538033 .142031 .277562 0 cmyk
f
499.799 473.598 mo
499.799 484.398 li
488.999 484.398 li
488.999 473.598 li
499.799 473.598 li
cp
.774716 .592889 .500999 .328893 cmyk
f
499.799 462.798 mo
499.799 473.598 li
488.999 473.598 li
456.599 473.598 li
445.799 473.598 li
445.799 462.798 li
478.199 462.798 li
499.799 462.798 li
cp
f
488.999 495.198 mo
488.999 505.998 li
478.199 505.998 li
478.199 495.198 li
488.999 495.198 li
cp
f
483.755 549.198 mo
483.755 559.998 li
462.155 559.998 li
462.155 549.198 li
467.399 549.198 li
478.199 549.198 li
483.755 549.198 li
cp
.0538033 .142031 .277562 0 cmyk
f
483.755 538.398 mo
483.755 549.198 li
478.199 549.198 li
478.199 538.398 li
483.755 538.398 li
cp
.774716 .592889 .500999 .328893 cmyk
f
478.199 646.398 mo
478.199 689.598 li
467.399 689.598 li
467.399 646.398 li
478.199 646.398 li
cp
.283055 .174472 .760159 3.0518e-05 cmyk
f
478.199 635.598 mo
478.199 646.398 li
467.399 646.398 li
467.399 635.598 li
478.199 635.598 li
cp
f
478.199 538.398 mo
478.199 549.198 li
467.399 549.198 li
467.399 538.398 li
478.199 538.398 li
cp
.0538033 .142031 .277562 0 cmyk
f
478.199 516.798 mo
478.199 527.598 li
467.399 527.598 li
467.399 516.798 li
478.199 516.798 li
cp
0 .561791 .637842 0 cmyk
f
478.199 451.998 mo
478.199 462.798 li
445.799 462.798 li
445.799 451.998 li
478.199 451.998 li
cp
.774716 .592889 .500999 .328893 cmyk
f
467.399 721.998 mo
467.399 732.798 li
445.799 732.798 li
445.799 721.998 li
467.399 721.998 li
cp
f
467.399 711.198 mo
467.399 721.998 li
445.799 721.998 li
445.799 711.198 li
467.399 711.198 li
cp
.283055 .174472 .760159 3.0518e-05 cmyk
f
467.399 689.598 mo
467.399 711.198 li
445.799 711.198 li
445.799 689.598 li
467.399 689.598 li
cp
.0538033 .142031 .277562 0 cmyk
f
467.399 646.398 mo
467.399 689.598 li
445.799 689.598 li
445.799 646.398 li
467.399 646.398 li
cp
.283055 .174472 .760159 3.0518e-05 cmyk
f
467.399 635.598 mo
467.399 646.398 li
445.799 646.398 li
445.799 635.598 li
467.399 635.598 li
cp
f
467.399 538.398 mo
467.399 549.198 li
462.155 549.198 li
462.155 538.398 li
467.399 538.398 li
cp
.774716 .592889 .500999 .328893 cmyk
f
467.399 495.198 mo
467.399 505.998 li
456.599 505.998 li
456.599 495.198 li
467.399 495.198 li
cp
f
462.155 538.398 mo
462.155 549.198 li
445.799 549.198 li
434.999 549.198 li
434.999 538.398 li
445.799 538.398 li
462.155 538.398 li
cp
f
456.599 473.598 mo
456.599 484.398 li
445.799 484.398 li
445.799 473.598 li
456.599 473.598 li
cp
f
445.799 646.398 mo
445.799 689.598 li
434.999 689.598 li
434.999 646.398 li
445.799 646.398 li
cp
.283055 .174472 .760159 3.0518e-05 cmyk
f
445.799 635.598 mo
445.799 646.398 li
434.999 646.398 li
434.999 635.598 li
445.799 635.598 li
cp
.0538033 .142031 .277562 0 cmyk
f
445.799 559.998 mo
445.799 635.598 li
434.999 635.598 li
434.999 559.998 li
445.799 559.998 li
cp
f
445.799 484.398 mo
445.799 538.398 li
434.999 538.398 li
434.999 484.398 li
434.999 473.598 li
445.799 473.598 li
445.799 484.398 li
cp
.774716 .592889 .500999 .328893 cmyk
f
434.999 484.398 mo
434.999 538.398 li
424.199 538.398 li
424.199 484.398 li
434.999 484.398 li
cp
f
362.601 635.598 mo
362.601 646.398 li
351.801 646.398 li
351.801 635.598 li
362.601 635.598 li
cp
.0538033 .142031 .277562 0 cmyk
f
362.601 581.598 mo
362.601 635.598 li
351.801 635.598 li
351.801 581.598 li
362.601 581.598 li
cp
f
362.601 549.198 mo
362.601 581.598 li
351.801 581.598 li
351.801 549.198 li
362.601 549.198 li
cp
.397711 .634791 .812375 .336828 cmyk
f
351.801 721.998 mo
351.801 732.798 li
341.001 732.798 li
341.001 721.998 li
351.801 721.998 li
cp
0 .759121 .565881 0 cmyk
f
351.801 646.398 mo
351.801 721.998 li
341.001 721.998 li
330.201 721.998 li
330.201 646.398 li
330.201 635.598 li
351.801 635.598 li
351.801 646.398 li
cp
.675166 .356603 .285069 .0153811 cmyk
f
351.801 581.598 mo
351.801 635.598 li
330.201 635.598 li
308.601 635.598 li
287.001 635.598 li
287.001 581.598 li
287.001 549.198 li
308.601 549.198 li
308.601 559.998 li
330.201 559.998 li
330.201 549.198 li
351.801 549.198 li
351.801 581.598 li
cp
.397711 .634791 .812375 .336828 cmyk
f
351.801 505.998 mo
351.801 538.398 li
341.001 538.398 li
341.001 505.998 li
351.801 505.998 li
cp
.774716 .592889 .500999 .328893 cmyk
f
351.801 495.198 mo
351.801 505.998 li
341.001 505.998 li
341.001 495.198 li
351.801 495.198 li
cp
.0538033 .142031 .277562 0 cmyk
f
351.801 473.598 mo
351.801 495.198 li
341.001 495.198 li
341.001 473.598 li
351.801 473.598 li
cp
.774716 .592889 .500999 .328893 cmyk
f
341.001 721.998 mo
341.001 732.798 li
319.401 732.798 li
319.401 721.998 li
330.201 721.998 li
341.001 721.998 li
cp
.149813 .13785 .259617 0 cmyk
f
308.601 505.998 mo
308.601 495.198 li
297.801 495.198 li
297.801 505.998 li
308.601 505.998 li
cp
330.201 505.998 mo
330.201 495.198 li
319.401 495.198 li
319.401 505.998 li
330.201 505.998 li
cp
330.201 527.598 mo
330.201 516.798 li
297.801 516.798 li
297.801 527.598 li
330.201 527.598 li
cp
341.001 505.998 mo
341.001 538.398 li
330.201 538.398 li
308.601 538.398 li
287.001 538.398 li
287.001 505.998 li
287.001 495.198 li
287.001 473.598 li
341.001 473.598 li
341.001 495.198 li
341.001 505.998 li
cp
.0538033 .142031 .277562 0 cmyk
f
341.001 462.798 mo
341.001 473.598 li
287.001 473.598 li
287.001 462.798 li
330.201 462.798 li
341.001 462.798 li
cp
.774716 .592889 .500999 .328893 cmyk
f
330.201 635.598 mo
330.201 646.398 li
308.601 646.398 li
308.601 635.598 li
330.201 635.598 li
cp
.675166 .356603 .285069 .0153811 cmyk
f
330.201 549.198 mo
330.201 559.998 li
308.601 559.998 li
308.601 549.198 li
330.201 549.198 li
cp
.0538033 .142031 .277562 0 cmyk
f
330.201 538.398 mo
330.201 549.198 li
308.601 549.198 li
308.601 538.398 li
330.201 538.398 li
cp
f
330.201 516.798 mo
330.201 527.598 li
297.801 527.598 li
297.801 516.798 li
330.201 516.798 li
cp
.0192874 .0142519 .0343023 0 cmyk
f
330.201 495.198 mo
330.201 505.998 li
319.401 505.998 li
319.401 495.198 li
330.201 495.198 li
cp
.774716 .592889 .500999 .328893 cmyk
f
330.201 451.998 mo
330.201 462.798 li
287.001 462.798 li
287.001 451.998 li
330.201 451.998 li
cp
f
308.601 721.998 mo
308.601 732.798 li
297.801 732.798 li
297.801 721.998 li
308.601 721.998 li
cp
0 .759121 .565881 0 cmyk
f
308.601 646.398 mo
308.601 721.998 li
297.801 721.998 li
287.001 721.998 li
287.001 646.398 li
287.001 635.598 li
308.601 635.598 li
308.601 646.398 li
cp
.675166 .356603 .285069 .0153811 cmyk
f
308.601 495.198 mo
308.601 505.998 li
297.801 505.998 li
297.801 495.198 li
308.601 495.198 li
cp
.774716 .592889 .500999 .328893 cmyk
f
297.801 721.998 mo
297.801 732.798 li
276.201 732.798 li
276.201 721.998 li
287.001 721.998 li
297.801 721.998 li
cp
.149813 .13785 .259617 0 cmyk
f
287.001 635.598 mo
287.001 646.398 li
276.201 646.398 li
276.201 635.598 li
287.001 635.598 li
cp
.0538033 .142031 .277562 0 cmyk
f
287.001 581.598 mo
287.001 635.598 li
276.201 635.598 li
276.201 581.598 li
287.001 581.598 li
cp
f
287.001 549.198 mo
287.001 581.598 li
276.201 581.598 li
276.201 549.198 li
287.001 549.198 li
cp
.397711 .634791 .812375 .336828 cmyk
f
287.001 505.998 mo
287.001 538.398 li
276.201 538.398 li
276.201 505.998 li
287.001 505.998 li
cp
.774716 .592889 .500999 .328893 cmyk
f
287.001 495.198 mo
287.001 505.998 li
276.201 505.998 li
276.201 495.198 li
287.001 495.198 li
cp
.0538033 .142031 .277562 0 cmyk
f
287.001 473.598 mo
287.001 495.198 li
276.201 495.198 li
276.201 473.598 li
287.001 473.598 li
cp
.774716 .592889 .500999 .328893 cmyk
f
669.398 635.598 mo
669.398 646.398 li
658.598 646.398 li
658.598 635.598 li
669.398 635.598 li
cp
.0538033 .142031 .277562 0 cmyk
f
669.398 581.598 mo
669.398 635.598 li
658.598 635.598 li
658.598 581.598 li
669.398 581.598 li
cp
f
669.398 549.198 mo
669.398 581.598 li
658.598 581.598 li
658.598 549.198 li
669.398 549.198 li
cp
.149813 .13785 .259617 0 cmyk
f
658.598 721.998 mo
658.598 732.798 li
647.798 732.798 li
647.798 721.998 li
658.598 721.998 li
cp
.774716 .592889 .500999 .328893 cmyk
f
658.598 646.398 mo
658.598 721.998 li
647.798 721.998 li
636.998 721.998 li
636.998 646.398 li
636.998 635.598 li
658.598 635.598 li
658.598 646.398 li
cp
.675166 .356603 .285069 .0153811 cmyk
f
658.598 581.598 mo
658.598 635.598 li
636.998 635.598 li
615.398 635.598 li
593.798 635.598 li
593.798 581.598 li
593.798 549.198 li
615.398 549.198 li
615.398 559.998 li
636.998 559.998 li
636.998 549.198 li
647.798 549.198 li
658.598 549.198 li
658.598 581.598 li
cp
.149813 .13785 .259617 0 cmyk
f
658.598 505.998 mo
658.598 538.398 li
647.798 538.398 li
647.798 505.998 li
658.598 505.998 li
cp
.00497444 .273411 .721187 0 cmyk
f
658.598 495.198 mo
658.598 505.998 li
647.798 505.998 li
647.798 495.198 li
658.598 495.198 li
cp
.0538033 .142031 .277562 0 cmyk
f
658.598 473.598 mo
658.598 495.198 li
647.798 495.198 li
647.798 473.598 li
658.598 473.598 li
cp
.00497444 .273411 .721187 0 cmyk
f
647.798 721.998 mo
647.798 732.798 li
626.198 732.798 li
626.198 721.998 li
636.998 721.998 li
647.798 721.998 li
cp
.149813 .13785 .259617 0 cmyk
f
647.798 538.398 mo
647.798 549.198 li
636.998 549.198 li
636.998 538.398 li
647.798 538.398 li
cp
.00497444 .273411 .721187 0 cmyk
f
615.398 505.998 mo
615.398 495.198 li
604.598 495.198 li
604.598 505.998 li
615.398 505.998 li
cp
626.198 527.598 mo
626.198 516.798 li
615.398 516.798 li
615.398 527.598 li
626.198 527.598 li
cp
636.998 505.998 mo
636.998 495.198 li
626.198 495.198 li
626.198 505.998 li
636.998 505.998 li
cp
647.798 505.998 mo
647.798 538.398 li
636.998 538.398 li
615.398 538.398 li
593.798 538.398 li
593.798 505.998 li
593.798 495.198 li
593.798 473.598 li
647.798 473.598 li
647.798 495.198 li
647.798 505.998 li
cp
.0538033 .142031 .277562 0 cmyk
f
647.798 462.798 mo
647.798 473.598 li
593.798 473.598 li
593.798 462.798 li
604.598 462.798 li
636.998 462.798 li
647.798 462.798 li
cp
.00497444 .273411 .721187 0 cmyk
f
636.998 635.598 mo
636.998 646.398 li
615.398 646.398 li
615.398 635.598 li
636.998 635.598 li
cp
.675166 .356603 .285069 .0153811 cmyk
f
636.998 549.198 mo
636.998 559.998 li
615.398 559.998 li
615.398 549.198 li
636.998 549.198 li
cp
.0538033 .142031 .277562 0 cmyk
f
636.998 538.398 mo
636.998 549.198 li
615.398 549.198 li
615.398 538.398 li
636.998 538.398 li
cp
f
636.998 495.198 mo
636.998 505.998 li
626.198 505.998 li
626.198 495.198 li
636.998 495.198 li
cp
.774716 .592889 .500999 .328893 cmyk
f
636.998 451.998 mo
636.998 462.798 li
604.598 462.798 li
604.598 451.998 li
636.998 451.998 li
cp
.00497444 .273411 .721187 0 cmyk
f
626.198 516.798 mo
626.198 527.598 li
615.398 527.598 li
615.398 516.798 li
626.198 516.798 li
cp
.0192874 .0142519 .0343023 0 cmyk
f
615.398 721.998 mo
615.398 732.798 li
604.598 732.798 li
604.598 721.998 li
615.398 721.998 li
cp
.774716 .592889 .500999 .328893 cmyk
f
615.398 646.398 mo
615.398 721.998 li
604.598 721.998 li
593.798 721.998 li
593.798 646.398 li
593.798 635.598 li
615.398 635.598 li
615.398 646.398 li
cp
.675166 .356603 .285069 .0153811 cmyk
f
615.398 538.398 mo
615.398 549.198 li
593.798 549.198 li
593.798 538.398 li
615.398 538.398 li
cp
.00497444 .273411 .721187 0 cmyk
f
615.398 495.198 mo
615.398 505.998 li
604.598 505.998 li
604.598 495.198 li
615.398 495.198 li
cp
.774716 .592889 .500999 .328893 cmyk
f
604.598 721.998 mo
604.598 732.798 li
582.998 732.798 li
582.998 721.998 li
593.798 721.998 li
604.598 721.998 li
cp
.149813 .13785 .259617 0 cmyk
f
593.798 635.598 mo
593.798 646.398 li
582.998 646.398 li
582.998 635.598 li
593.798 635.598 li
cp
.0538033 .142031 .277562 0 cmyk
f
593.798 581.598 mo
593.798 635.598 li
582.998 635.598 li
582.998 581.598 li
593.798 581.598 li
cp
f
593.798 549.198 mo
593.798 581.598 li
582.998 581.598 li
582.998 549.198 li
593.798 549.198 li
cp
.149813 .13785 .259617 0 cmyk
f
593.798 505.998 mo
593.798 538.398 li
582.998 538.398 li
582.998 505.998 li
593.798 505.998 li
cp
.00497444 .273411 .721187 0 cmyk
f
593.798 495.198 mo
593.798 505.998 li
582.998 505.998 li
582.998 495.198 li
593.798 495.198 li
cp
.0538033 .142031 .277562 0 cmyk
f
593.798 473.598 mo
593.798 495.198 li
582.998 495.198 li
582.998 473.598 li
593.798 473.598 li
cp
.00497444 .273411 .721187 0 cmyk
f
209.202 721.998 mo
209.202 732.798 li
176.802 732.798 li
176.802 721.998 li
198.402 721.998 li
209.202 721.998 li
cp
.397711 .634791 .812375 .336828 cmyk
f
209.202 635.598 mo
209.202 646.398 li
198.402 646.398 li
198.402 635.598 li
209.202 635.598 li
cp
.0538033 .142031 .277562 0 cmyk
f
209.202 549.198 mo
209.202 635.598 li
198.402 635.598 li
198.402 549.198 li
209.202 549.198 li
cp
.00497444 .273411 .721187 0 cmyk
f
209.202 495.198 mo
209.202 505.998 li
198.402 505.998 li
198.402 495.198 li
209.202 495.198 li
cp
.0538033 .142031 .277562 0 cmyk
f
209.202 473.598 mo
209.202 495.198 li
198.402 495.198 li
198.402 473.598 li
209.202 473.598 li
cp
0 .561791 .637842 0 cmyk
f
209.202 451.998 mo
209.202 473.598 li
198.402 473.598 li
198.402 451.998 li
209.202 451.998 li
cp
f
198.402 646.398 mo
198.402 721.998 li
176.802 721.998 li
176.802 646.398 li
176.802 635.598 li
198.402 635.598 li
198.402 646.398 li
cp
.774716 .592889 .500999 .328893 cmyk
f
198.402 549.198 mo
198.402 635.598 li
176.802 635.598 li
155.202 635.598 li
133.602 635.598 li
133.602 549.198 li
144.402 549.198 li
144.402 559.998 li
155.202 559.998 li
155.202 581.598 li
176.802 581.598 li
176.802 559.998 li
187.602 559.998 li
187.602 549.198 li
198.402 549.198 li
cp
.397711 .634791 .812375 .336828 cmyk
f
166.002 505.998 mo
166.002 495.198 li
155.202 495.198 li
155.202 505.998 li
166.002 505.998 li
cp
176.802 527.598 mo
176.802 516.798 li
166.002 516.798 li
166.002 527.598 li
176.802 527.598 li
cp
187.602 505.998 mo
187.602 495.198 li
176.802 495.198 li
176.802 505.998 li
187.602 505.998 li
cp
198.402 505.998 mo
198.402 538.398 li
187.602 538.398 li
176.802 538.398 li
155.202 538.398 li
144.402 538.398 li
144.402 505.998 li
144.402 495.198 li
144.402 473.598 li
198.402 473.598 li
198.402 495.198 li
198.402 505.998 li
cp
.0538033 .142031 .277562 0 cmyk
f
198.402 462.798 mo
198.402 473.598 li
144.402 473.598 li
144.402 462.798 li
198.402 462.798 li
cp
0 .561791 .637842 0 cmyk
f
187.602 549.198 mo
187.602 559.998 li
176.802 559.998 li
155.202 559.998 li
144.402 559.998 li
144.402 549.198 li
155.202 549.198 li
176.802 549.198 li
187.602 549.198 li
cp
.00497444 .273411 .721187 0 cmyk
f
187.602 538.398 mo
187.602 549.198 li
176.802 549.198 li
176.802 538.398 li
187.602 538.398 li
cp
f
187.602 495.198 mo
187.602 505.998 li
176.802 505.998 li
176.802 495.198 li
187.602 495.198 li
cp
.774716 .592889 .500999 .328893 cmyk
f
198.402 451.998 mo
198.402 462.798 li
187.602 462.798 li
187.602 451.998 li
198.402 451.998 li
cp
0 .561791 .637842 0 cmyk
f
176.802 635.598 mo
176.802 646.398 li
155.202 646.398 li
155.202 635.598 li
176.802 635.598 li
cp
.774716 .592889 .500999 .328893 cmyk
f
176.802 559.998 mo
176.802 581.598 li
155.202 581.598 li
155.202 559.998 li
176.802 559.998 li
cp
.00497444 .273411 .721187 0 cmyk
f
176.802 538.398 mo
176.802 549.198 li
155.202 549.198 li
155.202 538.398 li
176.802 538.398 li
cp
.0538033 .142031 .277562 0 cmyk
f
176.802 516.798 mo
176.802 527.598 li
166.002 527.598 li
166.002 516.798 li
176.802 516.798 li
cp
0 .561791 .637842 0 cmyk
f
166.002 721.998 mo
166.002 732.798 li
133.602 732.798 li
133.602 721.998 li
155.202 721.998 li
166.002 721.998 li
cp
.397711 .634791 .812375 .336828 cmyk
f
166.002 495.198 mo
166.002 505.998 li
155.202 505.998 li
155.202 495.198 li
166.002 495.198 li
cp
.774716 .592889 .500999 .328893 cmyk
f
155.202 646.398 mo
155.202 721.998 li
133.602 721.998 li
133.602 646.398 li
133.602 635.598 li
155.202 635.598 li
155.202 646.398 li
cp
f
155.202 538.398 mo
155.202 549.198 li
144.402 549.198 li
144.402 538.398 li
155.202 538.398 li
cp
.00497444 .273411 .721187 0 cmyk
f
144.402 495.198 mo
144.402 505.998 li
133.602 505.998 li
133.602 495.198 li
144.402 495.198 li
cp
.0538033 .142031 .277562 0 cmyk
f
144.402 473.598 mo
144.402 495.198 li
133.602 495.198 li
133.602 473.598 li
144.402 473.598 li
cp
0 .561791 .637842 0 cmyk
f
133.602 635.598 mo
133.602 646.398 li
122.802 646.398 li
122.802 635.598 li
133.602 635.598 li
cp
.0538033 .142031 .277562 0 cmyk
f
133.602 549.198 mo
133.602 635.598 li
122.802 635.598 li
122.802 549.198 li
133.602 549.198 li
cp
.00497444 .273411 .721187 0 cmyk
f
.0192874 .0142519 .0343023 0 cmyk
%%IncludeResource: font BebasNeue-Thin
/XLBQBR+BebasNeue-Thin /BebasNeue-Thin findfont ct_VMDictPut/XLBQBR+BebasNeue-Thin*1 [32{/.notdef}rp /space 32{/.notdef}rp /A 14{/.notdef}rp /P 20{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l 2{/.notdef}rp /o /p /.notdef /r /.notdef /t 3{/.notdef}rp /x 135{/.notdef}rp]XLBQBR+BebasNeue-Thin nfXLBQBR+BebasNeue-Thin*1 [63.7225 0 0 -63.7225 0 0 ]msf230.087 99.2397 mo(Pixel Art People )[22.749 5.73438 28.4199 21.793 21.1553 9.87695 28.8027 24.0234 23.5127 9.87695 22.749 21.793 23.7676 22.749 21.1553 21.793 0 ]xsh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/XLBQBR+BebasNeue-Thin*1 ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 19.0.0%%For: (Ayib) ()%%Title: (PIXEL3-02.eps)%%CreationDate: 8/30/16 6:12 PM%%Canvassize: 16383%AI9_DataStream%Gb",KkBcF)ddVG_g]JfFJP]&gPn*$^dL.d;8hcXbYh!.Da*[3G,^88m"+(3W3To'uJE;o*1n(9ZamIA.P@:LNm,XO`p7/*QfGR56%_bMBV5(t"pGGTLVE>EBu9QMt^L?!'8Bi5q;B5!%]p71qCjNr0<G/+d>q*`Ueo@o\.a_"oM8r4FG6.6h(+Lt-[63V,[hGEb?P+l,Z%bFhl/,[N.sBWB"T"*3`RLgV)!84;aR8WRap:'M/bh/gSFnCM=oNU)T,!s2tbTAe,<qT/a8;PhBCJ0=%Y,*]ie3`@4)ILRXai<TJ`%9dJ2E<"s`d7j8Q7+WVmB0rO3rQKn+P0h[ORbj`k-oZ8k`!Qk$q*P0)M2/4h>aYCb5Q3[`Uc9Nohs&"4Wg&b5N]6"HE8u;Ti=?6mT%8,3qk6r:XEeF,P5Kd'_8b>Tn6NiTkn!SiN6%#tDgje(='BSsJBp)o>.n>A*=Wsbdnd@e2FIYfB`M9u8/q(LWu7^=%L%+p9--]eN4%+gD8+($FX"$?AS"n).qK%;X0N)J,Fp3YP7BHNY0c'VHM,3f+OP*s991Ddnc\pm23nJNsbjlsqjXB($Y^k7ub;oS.__E"()BS`".l%bk>626mj5)'`SEs&54PP98ii?K*?L\a4*p."lQT^Kn<aM_2Bf,[Q&*bR/nQt#JT:"1CO9pd7f=F-@J?Z_!@2Hj2DU)LV>+ZR,S)s%RW>8=Taj`pU7=Us(!<t2'FULOTe$QmL[n0>eY?h6<$[rs0bq8>""'p4=(3sUkY?GVjI;5:>)7"g=MPekReeC"b&-qJ8Hc[T!iOD7%NY'1E8h")CUfVn*p`A=iVeFPCg'eR<7u6-Y143:qd?]pK1AjrqI+&DZF<WYdKI0UO(>7qKCo@LA85Z'-TQc22;_/B_i2A!`]MN*)%e'p?6,$@Hf;)\X7(m)X9K*G:ad5hHX>+m9!q?&^R3t?gagS3Uu%Imqi\dK"9EJnReZGk0*8!@30+oO6l-et@RSB-].J,`?_csWUH%feM#Pr0LhrD$kgY%4V't5]Y*U%DR].8FX7<qq$M\+He>=pFo#6e"k(dq?XU3f-G)"K(N(_/E5N*H5IYF*bfB)N+o:TQG;sS!.qd@%Js^U(Z:TbUr+'=AAeY.mL)@uV_\O(eL`2q9&0h8i,G=$4*[^_1s3CYslM^!6#*F]gdJQT4e7M:$7Z.qG5pJfK72e,]L;5f9m2eMp%?k:V*BE\0?>*)%s>g)FABG!iT+Sl/.Nk<Mg""`F;AJHb"<.*!^S5GLT=6)qo_Z,(ZAChKod0\^oMJmU5J1'?)`OEA;>ML[Dh!pG/%E2GUt(K.oj:W.d"ZB3sp^dlYj-<^uYP3,iQ,Li7m4!Zm*d,\^GefciFqOo5BhK.2(8<ChelST/cN]lPOGf]1`,c6I:-3G"_T!PS#%^04h?'%/TBC"i1L]CsGN#P([omEE#+#$(OVU)YgSJe6M@P=S/1J3MK7KVZGN7&W%\KCptuUKDZ#-E$qVRM6'@)1HQ:.0;+cYkZ7%%P&BsHm1;O#JFmkq`%nGd'8VAaJ2i9M%Y.?O6WXAi6TQ5U3Z\?c!%oNEO\UYP&U<7V@2.s*W'JbGR#)A/JU>55q]@]^:sMT_$ldZG%TBk#lK*F]p6i=]No&<N-o5q):3a[M2Jh"]Y3J(%)okSjT*gKl?1--;])2AGo`d&#9%m.EBJe)."Nh(,pB8p>5Y>a7BGf2t#&(r];%%f.3[&L;]Jn'^hS]qa0iGdo5Oj@LIJOd>5hot&Or0(l,iAtr",O0FiW"aq-c[=5aA7$FQ.<qR]:"6!l3,Q&L/g]M*uo\9DEQLh-H%$,-BfaI%2&JCX]N$[e;p@.6?6+\0n.pa)*SM;$%`DqmVJ#^_[oJKb,)1[*#h:%^G*DKa?Q%F2PoF'qINhabE^nbAS^qiGJCMNn&f%N61HcT_k]Sn\<?ZQ=$OH0If&=%fBCr9?mQlq;3l\M8X=n)p#+YpuNEoLF,_qrr?8B?k'5'[/h<U;1X0J%Y%>41K#bn^)[Ed1cZga%c*X)fhBIM[O9*4QeG.E",,?4*Nkj1d<[YR8--I?A0S7$NZe?]q'Z+$i=d9!,TfQ4hUd2_#<=r[=;>%X3jqmNd,:%\ZmQ!Up([%.#%FbChE4_29hllWP=qbGI%"(8[JVuYb&[atM6&E!RRYf0_1e?in4J`XdI6hie'%%RB%8^H=enK3Rdhr,`q@COi+!fek:1oT[V)F`qg%^IW[f\,G,uNP">4LZAHC"[`l*qj/1q/d8@dCm;m#IiTnaN;d30o4P&mp]hb!J%bpo#,tKh`"*Zd2Hp,/N.d1`lCG\MCA+HpV+4gs%:>k-aCOqce35IM%N"I_$QlJoS`WW6i-A>(rr`./k(Amn3XDm\1Nr"FK(R8J$^Fs&JiA`Gb0W\-'%Pa>QI)2e-l`Xe8_*r9%)-f&>%j=^jIegOo$l\H"<lF7)C@pJpke/CgSnI\a6K-PpU&0X^Yd?f:h,s^!7`JH]rPKEUCZW(K_Cm-@?r]%>](h1ffDn+kkYW&pkJLY1S%hgg\$[:NTn=2pE=H,`<EIc9#s&+\=3jMBfXSUY,ha=>(J63qhKcMb-Y\9o-q?,1$jA*j=MRgU)10=uaJQ^+@"R3&h\!ghaM`/[m"%V@SKr'%]>*g':m[J866Gm/sM>5VnHMp>^Nc)]5]7%iC-#'JIfC-Hkc]!p:t%rM&LjQY\Cks4b.r]NKc4`LgTR2!BdMJ6tJ.#hsX_%`iT=8X+uj)D-5E4QbL^2.$G=)l]K)TjTI32JSg20Q@0'JZWdfEB=5H@Bef!57uaVgl3Bt8(;;PArUZ#LrsDKNlE,CO>*^kSY_c!;%IWmAL*2U%A6fUZUL":b20#pFo6o?>Kal]!72^X=TX(_@KDqKTGMe2FN&Mp4p^f#W$WGSDA=&P-M<tbu4YF].B:5.[SCn#6=eL#!#%L8\E^,u4^>TAY4/`;(K57K3$%^,07'QR.\#`,2/V1GJ;mVT:XD)ii83"IT1Z==$r^1rd(6A#u8EA5c#P]?Zfn>dE41@"5D+YWCMf%b9@UKjAmP7$LD!,;[Pp#dj7K%+p=T-,dtp7CHm];89FYRg%$X5P3n7@")<e0qH$8Yd(M.`Fo?$7.K4Y1kJ)K,LT&SMnY>K,`,2R3%Djnu[MX=6%P,i4.fp*F>GY7tKENBh7(8D+jFlLdU,TbXSC"WTIfSD)&hU-hRrZofDFH32rs'bANY4J\p,18a[Z-1hZO`M1`Se[ap%Fd-&mGZa?/F@NOGDH4>Gr+4Bp?UgDLjkhde)0XM`BBWf?iT5&`ehV(oe,DOC5Ha\l^P6GSe!=Z&Q<^9jIS:Mq"$?.f1+V3fdE)_H%q,L/HrMaE4f\it[QX^JPdqhHRIi.(s>g9SbY]EpuB,sYjW&a0OBij&hBVncn[G_l_nt#64_]_HM.2j39NunY"HL^G/Mm<"*Ajpb:%`O.n$)&%pE.>@8t=.(1s,V6.7>Pc:<#56iRMQ)8idAj.?6B<)5A<VU(Wa1^]e^I(l&qIjU]3GYL$(o>*>W.A.ir>QJ*spIf>`@&X%I,e4CrqGRe45.(tU<h]LN@Q.JptI_^`5aWj4WDkTj?fSlm@LN(;SfP5?c;I_906GZJfImYe^q6p8_!1U[%0l>qAZ:HT+tqMV!]n`%n1bO)]_)^;&OVGoc8GoF?k_DDN/aG,_Xbj?2TlNu)%nh+L=kW"H\%=(k%$0N:,#LbU#M?PNZ1V7T*lUO<iZHY4iBicH=;)/m:-@X%%qE<U&IU6ZZ!WK?4rE2Nmq8WI^WA^mp].p?9X;+n/AD)?pFidkC/>oiG-K?iRlh@)fGiHSAcGYfb).9jpJ\`"5jG8CbqsoTg'g/7%WtH%JVp-'H+Q!h>[_ZBF0#sDF0Q#sMh\1ir#iRga7P@O2SV]/tlYTXDdlMJ\SN-6>8H'TgN9s`K7cK@9J[b9.1X.#.3.m:>Wi2\8%ilpt=90Y@TLA7qtc8:#UiXA"?X!7C@3cW0ZF=ataBW`"]<[i"mJ%AZL%P2j_BQ_aQCeU[2)=gL#\\a+:g.4b=:WDZ@_6Q+CnaDIt%HcPVcNf;2Re-kJ"R_$22`",LMrK.?Bj%%DG#:I@X/AY?AZQ.;tQ>]mr/[:U[5>8e"cfeQHXl\<`Q#B),r3/*:I[kZ[ETS2D)0IOe%f$_gWFB]]&5>A`f39+j-h:C$![WGGc)qF=mNrLdVLQ23up,c>jQZ0WoCb2=AIsDW7,JRPQlU@U#n.%P?f]dH>g:&sqkS.t5FgLGL%Fg]\@miRG$VTD&FHhEaj9FeAXJ?_-[@^XLW_-D)_INT(YJk+8Iij_Scde&8GWneUthJ'%7<#ecr\7">b%E0:D:e(5$c_r"W`-ruu%,i[a#fEqQ3#G8iIqr!%sVe)G!hue61r'OB5#MH0hZI'0ZY9%5\/>go-]I'snj+d5,.2VckT)TF!fRL89@$tY<ai2)TgM=u=3,M+X%"`6a-m;`kP0Od$"79rV=V"+Rtpc"%a]SPV5ab<lpBA)AKG$q[q&T^kn!h1es+r6Yf8jm.GiQ#@O@Za$S6mVVGWlLuV^$LW3A:*A)%J/[GudoBC55OK4Ur.TjNK`/t&;5L>"r@ntHY,`+H(rpt&H+j6jhLF,2J$sR`id1WM^&P_Rqp.M$6Bq0BoBPa.,P;=dTHiED>H2_W%kNlIB3Nr1I/b*$53A4AHH+iCR'%*HHT(@9SH!+cjai2(<MPcg!\Cf0A:3R,<#Fb.h;/FI`Y:XZPR29:3>DK8[hH=17>.o*+_GPSj%#`P5r^/U_Nn#rK7N8UUJ/aO\p\I%!p:5M-:<55g,F7t6i-2r053'1;O*J[k>iRW"YJ&c<Yn$!K`g]usi[1?lUf4"B&oba,9n$>u/%T4,j8e\9s&5dsDf](PI1lN#a%5\G#[Up.<NaT(o;PHi*oJkATW[f>YUQGCLsU;7XM_(<PEh\Q/>oT1GG%aE(5cCHERDT]LtdB;C/%^ucAL6oBP/_V,J"9Y^?3WmNGb`IC@mrgNp]q8MHUoIbDo&Qk\j4fBcLbhjfK=l/h[LtL3<R'R:bXFiP!@*X6XQm79%pgB*nfg.?`%FYH<AZ0PfC3gd5`k,a1qlX5`J0]tOa`h/Q`Zp^%UWo.0cDJ3bhs*34l)F(N$qIcDGnMd4!h^#=)piqf@H'8A[dJE]eNb(Rgaj9.S%RngHb9'9iZbsD*Df4<3BpM'<o"n:-mJ+-R#-0MOEf:M<WXd2\.rg;0:B(A@A)KZiRkk\hjs,m^pSO<J4r4,#AC5-_UmhgMtWE0&$%US"PlZGlb@Dr3X`5.FuHMui:Oao6Y=j=SPIqFO8hfN4QNY]&)]:&d6u9Y8PHA&qIteZpL_<^ee%:R-Vh=&.:1h^AZ2d$4L,I"^1`%oERGcb;))-B*WI"k%3qu/\)Nb`56Cs55j;Qfgq,:>6"Ot=;2jP/nHCX95=IXE=*7sCn1!SXREBulsPE`KDb<]f&D06r:-CCp3IbY%=:$?&Ymu77]:&S\_B5b"pg[;L"9)9%_]R(%K\,1D-'ml_nAdTfYu9PAs-OHY->b#OrBqI)c'$=+8RF59r3U\IA^!.MHhtp12?1@K%TtcQnG)0R,XNkbrqqRYFa\a@MqO16u-GHs^H0aoh>d8@6LQfOh=F\)%*$_/)jf`/PA?+\H\7lQI<^md2lWT@XJY;;!-!kKT_mEM/%r$<;6A:=B=.=1=?Q^0ol[TR3m^ZJAQDbq36pGAikI&9e$Ljd\"R)/M!Qu>6$I6*T%B0\R"l<BuS[SKiu=!C5D$/:io^dM;@:nnK;%Ficf'p$j]Af+3=/.!UL3Zum5:1kP5WZI!DqZmo3lp_YT,%N7MPlO:/^ft<E+Q+FrN!'bf<@uP-/Xk![\`9QLhrkgr_nrK><ZOZn/%,H(qHJ!2=nb!)I=Ts=:mf3[BeQd4:m>^M$;06$:^Y._VhnH,t4l_!AErmX?ETBQSiT=_=rDBLi`CH$5"#-Qdt[2ZW!"4qF`Z-sEe%EGhEYN)mn,$kPYB&[[24g(dj6=7CcL=ripI="Z_b&,_PkhYb;j.Bn5rKq(c?`"TR/\+Zq"fN8o/YWcIek=I\g-Z"1R<;eYA[]o?i%rcYZ<#.@j2aj:I.f:^5tJ)ABJ`/McLDu=7o7Ym<Ks.Su#i'QbE?^D(=rFs]r(/h3=VFlp^=)U[`Ru8T%&EYteBH956Nq0?FD[LLJ%`6A-T'R;3V^YquZMgfkeP_RZ(NUHlV_66*tqqBqgS_K>9eL#"J\l6;K]Vl/2o]DPb2^YZpk#?Y%g@tS-MDfAi?5;.RSU/4KfJ_EY%luAluV.H:*++,[L&]L>Tnpe?h`5YiReGcXIDZ]gC-Ai"7Ck\PtDu=ajOJ_m"du=8@;le84UAN`kVXV?B>!RY*$g3+1Y^3`"[_<Jp%p9h#AVdK@VP]OH=(B57,6YZfVjVO81_eEu-J%ljc_e%M:@o1Jg>[(!>lfm<4T%:p1^LfT."o5X=f$b$?I+^CG3n\gjp'^ksrNM<^%caJpa=;E*h]@aT+WB^SErVQ8#fSEWT;(*$5/N"^f-Nkk1M1,ONG!i?(YB3=D2sq/()n/JAP4G;nj(kr5'd6^CcP:pmiU^D@Z<!ZK%K?'9`HfFYJ>'hlk4gX5'F!a\)X[1PWoK1[SIo(d#:8iJeWT8Q^10U4tq=hn6H>N+M:I+c-\'3kR0!fm#s2Uc$]>!$<IC@UK9)/Jo%5[g9pYmU'X^+`f8nP2']_Z09m8\a2XMa$+'0sUO]8%T19jfENK<d@&qB%RKM"h9MCis2#M5IjtcmiIP\9ab^DNthC?iK:m'p(t15%^?fKj>lFGLg;(II\B$VNK2k'p_m\[5lsaAr`O#I]90Y3S&FNK4q5XCQo>6!m?H`aMca!ob,u3*8L9%%R$2hEff,"-bmk/QN4glfJ%e74ggMR"f)4=2$BF1_i7c\N6])ZeoHD_D6lHKY/8!h0Uf\#UlUIN5ZtPKpE(^VOgL27n9$]+P&XiKjB'6l"bn_#jpW/32eFppXN[%&,4CZn1;0`2e2C03c=LoE>*f<QGhol7o%PIKX1-R1qa#jZRdAiNG$jWTJMPeHcIh`'isbh#na<VLFqa?/,3$_r_gLAL=ZD.3qt&;%s.#iF]qP"Jj)P9pV"c=hoE>**6MK\'4P:M!TU\#c_KDCcjH/_)XRh<dJMETXF7Kk5,Ye"o]Nu:Ueej,OJ\RC\=6FSElO<?:!M`^*%A\fc4N!p-NBP:^9bpO-F'&bP@&,nf1kOpHKfP1=VQ5s&cg$>.QF>dZY&()2t#!LW_1N]MR$,@pTJ/R;AXS)iCRM&hXSQChj0MJ8e%.GtMa&$\Yf!^B(_d4cJY0V(`\,"_DMQ4,/!LKGHWHR'VPlI+]7nDt@3p]Nh["un[tS1eehB++Y8G`*J([N$HTRgp94\l2=I\B,I'%mL/fT"<-:EI(W@C(]6K9#3[4t8144Q-Bdm)ruh_GO+RtbBK@21K+C@,)2Z7<L^4SgTO/o5=PES<`Q*Zd^]e]g?oOKt//drGUoEmO%65Wue!"R+q3'n`%!7dk.6T>^0'9Wh=M3ot^cc[nbRiA[^TFH^2aSS2Wp34Q"F.-4&#B\rAH8Zki8=5Z.2Z!QW81[6K^^u.''Tl(c%+KS[#R33&"`M6l:Ahlge8]X6g./Y1^&5<8*8HeDRO@Z4=j[15\E97YX8f'b=b+AZE,aJQU,;BHZ&rR#<#q$h?p&^[fG8<H"r#su2%nD=oSmgP4^lis;k3Qis0)8RRd^,lTXSgMf``tRuBMVp3\V'=<s9GHt>$#h(V;ul&l7$l\;3[#)JnT5QI'<uY:M"6A"i34EqFFm&X%Tr%gh&Q)GV'WD3Z'7qbDPt40?LJnal.OgB7'b0a;9ZCO53/u$JQp>&ri."T*N>0YY"=FaBRYjOjQoNGL!=,'FE766:Cb2)IV'35P%Jk-K8!3ms9Lo4rR)P7!h!D"2%Mt#_f4!7KVc?NLmQqRRU,AI7f9>TT+_r5\UIYbi_+AF%W5SZ[X^mp55;4bcii&Duq1't`'fP=S4%U0r[7+DMgsH9gXq7*Q)/=?N*K)6cFaNEAJO-/hre#oOnLKO]Qm7fYu@C4IKKo\^lR#k0YQN_2qj*06u6Lb3'JIa0.ZA3;#o>F[T2%CXFCl#.RcgI\MoVi"s<J1"=Tn:(iec4LClXc[il1C5s`'N#KoL$NS?[4f\K!1`.-_q0ra(:]7$hE+,gOVE#Mj_f:5IP7De",^ot*%%=V5:1#T\1hb66kF;$o<d8B]55qE#MJHbMFRlP!H\n?B2eUN]4\*p^YkWrGJ4(lo82!(QrE2mh,8f_=-;&Ft[R:`(s\rRJ`6>Yod%?G%2i+hUd=^q^C58!P!"+sa8[;mp#ZoZp)81EY1Ra25RrKD%9`D`Ol![*\Pr@4ucUoU@iZU=YoS@qP5DP3h)d_`a$5Sf?1)@#<jJ%j1i;\W[R%Q=bcJ\<[lZ"]u8Y"S!O.GpR8-8MhshIljV]J,]/L<E4`gVlj=3:=8\r4Q3`=kgKS/5[esHr!Z3oq_*R81G@P*=`]mR'%jL`e>OsA"$->56'0i7o5<-s#3p,Zm-a:bQ<GEtME,8nPjOl_tPYk@Cp*b_A<*l<FGP:^2=bWCjWSE&7<$*a[SmSYn8lR\C,aO(*Q%lUu#Ys,!Ou!lm_Ciqa[X/\uRg$!9#%RanJLDSuh:7A0]Kc!$lK:`<=,`0m0T)<WTnN@D=15HU0kd1k-BKd-:u``rDK`f(VXio7:"%bqqufQ5WJ2:<3hKWZ`-(S>dn[?uaH`L1<bgcS`\YZerd9?W<H\[Ha^6CRQ5@H&AJWs,888Kq3e).#^mWVe?]lJQK@epZ/R!Fi!F;%p(@jk)TEfTpUFP)8,(#QWag'#TU1TFn%hhcZOJqr,GS?gMs(uP"X#P$'-L&E;ZKd\Tm<J+pI<FT"3pUjS1N1k7,lGJ(pOcFZ+h\7%o8@'J0G_Zr,6LB&0ePq6+ds:`Q:`F=*5ZYAc5bQ4rIh%M?M'ft>LYm6*m4knT`.io(ga+Rn2Vc=(#:4cEBNBIaJS&^lqp:bV?VU0%H^/>$_j7%OAD.Oa?r8C.:D.nN#03i)A(W#f&6BAbSk>md'.1sqnfo&E-B_u"Gq2A.,&p0aBcC(i+Ng'[7:A7jEMLNmP4LrFMF07S%MRpR^Y9heeiG*_49$nAo>[X!#)2^R+E9O9mjWLrnB::(T"(o]aap'`eg;7/"%7J-diF#c]Ieq`]dY+L:+S\+8!=TN%("IgP)6/i$%+Cm2CWE4WdiD5D?>*KbeOSP[t;Tt6nLg<YaPKF@s1rfHgp19O&e[P&k:eT=e/GVnM_0F*:3OLUt)6"$!&W]HBAkcj62J?)h=MC)Z%:qBLpX/^GZUt!u8W1n8\EK(jF^$eh5!Vc,NZA<f;>?F5J!dGDH8DXf&A!s&<njK?f,!s4A)Ci8=Qqq-X%@bAsWMC,2`(gZT('6q'%'NZ0"@+ch?MOtlKHVRrOOqn6'1E"ZT+m%e)/CUN,BqTd3a4*?5$qlLBm4@epTM2naOO+,LSl<BPH?oQ_B6>t]V?uERfal@Yd5oZb%6!hGW9hEiGSn1AoQ6NYk3n$ACNM'!7_E]1hV\PXeNN,&?]K)_.58PRq(tY?14)Q_tgN)SD8'6/oKJ[u->=H=s%LA`AJ[nonDY\a,%*eubU,#_!b"VH<r,.K9<)G6W@idca=fZRt^7r4kq*q;cPP#BLS.:S:>MfV@X*>P?,Z^Q&ta:VemXuD`p;JE%tR0]_Sd5ZIm"'SPs%TUaA8P%itUOD4ChpOTK8a[iINZpRg97JM6=CBR*P$d['"0R><)8l9M0U<AFW_6RW>=+'<j-"N[7/JZdDCb$#]@KLP;S.$p@AY*=7%U-qO?;c*jgW;Z>Kn/'3G[(9^5Y!mQ/"se`*f]nGfhUiV[aNFb;l:hK.>7/UB7*(,2XqV"1g2aApj2jiV*IrQ7(Ls@P3QX<$id=%3%?-2h/Co6DjiOI$K>YW3_^cLWHBZ5[YpLSkO\@tAb=bahIS9kM-1[!<8$'pZ/%k+MgH-m=p_Xs?<Fs^aTEaCOHOd5\"E1:6MW7LTK%S=rSfXEmPg_&';UZM<LX>u&*;O*p/_G;aM7B2cM)&3)u"f-E(H(q-Cno`h+S#"(k'3h<r-nlpf)I''sCbat3]J/XfJ@)-t9L4b+:%j"^dmW4P1a[I]!RI;@nZo0_-)Kj$4KTF',h=f@H/BkKSH"<V^;4H@GA<f[NpeJV9;#W\:j/@a1#E^J4gPk>=E8Wc<=&Ha1:1`?Gd%Ml%%^))[KN.r]mfKi4IKh0IrS,"6b)!_]ZImSSQOOFgi.G7!mo18IMn1B;4c2oG?-(#GRuIX:H+cN_f7RP:C5_;#Xp:*a`J.SOn7%0Y`D@B'dV>8:kZ1&abpPadX(T:kDt,<_Cd2=\n\bc,M8km;.tt)W^[`qub0c=m,rmF;uP<I>kG<27(XC*fdF,VVS!r($"V&+5tU9%NDG:'^k]ujU3k-LVXNK2`459Xeo;t,YbDam%T_/hp1AsOc)dfbnsg<$.WhN`<D:)?f!!<&1+t$m2JtcY4VjJanYWK"7UWGm_o.En%]&O0fNNYBW^r]u79b%J^1Z,D]olM-pJ=-+lUJUA&GXEpM%A=/%U8G/:0lRqFR9FeiBFN!(/P?7PDNY<<0KM"ne-mLR4iKb^9,Yl+%VO/KkLVNTaQ?(O1>?B21'ZLrJ`6DVjZ+U/Xi.E4i31Jd1or_+lnAhuC/5Y-32^Hq22J0N3i?C/qj_"+XkY*:Rj+\0O_m[$RbBch7%;@;`*<)^B,`<PHYnMYIXgaEgZ!$h$T;RFr?.e>o6[mAUU5fo37hSJMT>-lue1\7.h6[gc:pIa;!R`]/(I=jO7BE6R;3G\^D=VHJ:%lUhLXR6ln,A\^-"CMT%CAG9bJd88uY*6E6PF/t/!R5O)Gl4*V-ap-)Z"4_of>_-I%?,/g&TQcpd0'-p><kf<P+Cl_Bq7B9/SK.G5%E\9@o.QmnocVBXU5P+Q(TE?Y6'6F:=#XO'WC1)OYM/reZb6`h)`H*QpRKqFfJ]HGBFl[aucD4Ns!*A?NJKUDGZ\LYBdRfXP@$Csk%"5l1G!-,4G&e+5>#io-l1R,`F]aY"#9YfkZ[bQ:lF&%I<=@sCJQHN"22c<'U/=6t&<T,5C:i4e4$M4\TAfU4UPQn(/CWUiUebVPG%S.+/2F\>U+b,L6U='k7T-$RdbF+=cAUWl<F[E\A4[l.I8T:D_:"U`NqHl+rZg4&Q44<3eUPE5^lkk8"!QXS'imTsPi3\@o?St17i%%!#R/]1Of_\X0iW+'lgFpWd,i/i)dhR4K't(F_9TMf"3d>iE$9nV=S/qsVAWb^k8^A[o';aPkG2T=\41dHNXBWSF"V%UrBph`Er8%(4sAnc;[m.XXDJ&Z;>T1-(iB@_WP,Up)NR7#L#2p4fOIR^8&X/Uf<.e4lefkSHjq^cjl[+FFe9Te*Z5pc-'n2Q4MgkGH,JgpQdi'%QejKE>]AUOpt_-sVqc#Kgk](/%j9L4mC.j]Nm?"4HgP'^SF7es#o,Ha[L5ghr$ui-]^rqV!CQ#?n""Y,I+nQLS?u$r\NoG$.pEI!%%f%hAP-'SYSc89VR`/n:`fol2lMCfhGBDT+]C^UJ1ARKQ;P'?D*o3H+G5%J#Z4B1mI)Yf)Qg^=JLWCaqg\TRg]q;`R[/5(q_"q@b%g%4M&(EC1KZ[^\g3o#SjqmT7Bf\@A>%PRNCahd:O0:<5gm:_f&Se/X8*[*gc(/DDe5do_`Q$eCB>C4&2L]m<B>TA%kIO[i8Y6R/o%:Zq.>ro@JYU$,:m3A<*608[rKA=e)@*Se,1p*,L@2[&hfkQV;5-$D6+Pe87_&iW0KVk[MSRg9;$H/CXn'5s?VKb/O6?#ob4=kH@K%5'TRo:_SUGgt4TCU!LHJdXgoPi1YD82p_AZ+$?dK;re(cmUOmnFB%m&$HJ])!RAUA_1(_Anf>uN1gg=P.MinI!KD,tdK&.b!>(j?%>M+ahU#4k4>bR0K%A_p%/Ff8*Ch@I::LBe93r:CijN^dYdC?e[?b7EKZ<-kWFeN+.I:^.Lp,W\-0(r8Fo>H#O[%<1u_KVW14_Cli%L!PO#^A"$$mC*>g:+>)W,ldt,5*F%B(*iR?WdYE&Z<-5$B;L3hFiMm",W*jE@.qX9i/R4#T)@R[3_H3hb^OEAOfb17-e##..''"n%3"_4Q9*A5u/*ABHG.<IV/U&T5EH#.gQX2IF_u^/c#GhL[Na9CQa/%V#F/>b8Eam"Ei&Tu1b=rP5!%pl)SXu1Sohtp3b^j]>s&&?o%c[sj>61$\lh0M<D#GNP8@WIs88tPF42r@?bp5?ZV?qKK[YQ173-t0-p(?EgN=B'oiJD-kZhrtoejF6^g2Of)S4D<p9\jG;T?uM9f%!Il>r2^R]PFd@6]ZaG^W%nN(_F<Pl-eCPWkC8klJIS.&bU+&RKO`KetRWHL#-1<_)?Rj!d,JKrD8&4)LnH)fMgSJ@&T$/J^=8,8D%"Gt:7+*C`mI>i>jTB"KF7h>'VCp!TE"[JUR,QOU6T=KoF[KFX<ltsAH"($?/c6[l$?!^]\$gjKW!fWH0nku]:s&]k%39];eXVNL"%3erbm^jd%:Z0k!QcJ@R2mC'@1[21ms8I#`e7$A>dkXBsGS;%PpIF"in3[bX_Kku7Qh'J=C!P1ZBXGLn+;Y1rX4ij']o+Z/LB:S==%iDJ.)kG]!LrX%0\'"b[lcOgie-!U=-bmR=rfoO?C,p*7a543t938`!nc]`[`3iU*ZVl2>3A)N,.L2H?qo<Y8uT:r08j/`)3H/%b3%LrT<t2S/;0.RK`P'BT.;#(AT?T9b>O0\+f;-N'J5Z1Qe5r.`*@[m\!JY;n!<oB8X82,QMtgq]hCr7bZcH2(U(#F7LYP`kQ%iAOS`%*Yi+I"4S0:/NDP6n8bb\V$r.J"nnhuOc]it,e^IDR_[<UUEN4mB$ij`DM0?t0H='_\oLZ#^[37RE\@]OQ:0_o[@O%q'"k6kMtAoR%B-0<-BH53k7*X-KGUa1bq_o,oWed6E0*drF"1,2&.%R?.@3RPW+S<Oc",S>A7VEo*WQB.9Y`caF?rG<^SM=YsEB1=r&q7pcP6@$:%<;i(p$R#8)(rMFe@,l;7/"'CZM1luN:7`f`+ce-W3?gHnAXm2h.m9VA<iSR'6_7a*1_EIUe0'e%UWH.lo/s/>'K)1X*T1IR[T'SZ%,]bPP%OmOj=Xs<s#d5Q5_)!Nd+KTtoeip(Xq#um#;%Z)0GYCm5,1NEbBo``!.?W0m0.kQgD\FS:H\FZRjG.EA_8AL`C=@)[>J!*=%Q81O$%9WJoLf.ZWZU:B946NH$Ml47OCGuO+(rRpNCAYd^YZqP6berRK-f99SB8Xt5f/BhT']qf2Hu85q.*W7Z"*/%)0;`o+cp.u0%JG5EirN8r/YHj0eH!B7Pbl*PLSaT<kT*o:E?TBE!\N6"h*>Ye5eT\G&/6Fqh+On+"ORKDt)5c^)JWCG=I2^i/^&TPQIT1.[CS>"M%*sj@n7O$IJ'WBhs7CK=kV0"aibCgJ/Yh.Bi_KAcq&\p8X^29;k0l>c0Rf`'r"0Vlqd)GBf(6/c)9#+Vk5L8A[@(7Q1;OZ&p_/N*O%X&%a%!(;fjR8puiHXHJC;KS#&#]jtJmL/a9j(T!kYqhk\:d<.05`W58:K:^/B=YqjkeProh.0i8F#WNr0f"NXW(?4#8a2-U[QdBS%"Uc]M8Q$lSn15^@"S-2\Q/k)V?HZ[2SH3m=X-70kGp#RO"]*I>6t05$!9G2kke&&(hr0mgs65)4=+t\P9nDDKEr^h2:%67h/rqn/%l*P@nG,Y[mDW%<1m-kXbS?:3W+*bEh75SqDY9KAr='G)mCV(9'<^13ToLGMMS,)KQCC^i`?5I8S/I9]4K!h6:?hf-rEnuaI$Y0c/%#4K*OjNo2;OI/2Df,E"E3)-;#+$#H6*>Dk5&sQqkrG?bb<#eZKWf4I:K+uX7riOO?.bQpKc.uW;J@9\@>RCS(4LqdWQdpHHCPr]E%5,/1=RI+t!5A=AXcUU:4b[")IVIs=;CAM7YcORG&P,/T1G4/me(D"QbKDk<0rWi)`o&4aQJ"hIA29Jp>Yt6QAq!U2/C(=S,Zg%Fp%JFoKMq[3&&a;6B'1[N+qV6oR]a+1[G!<.tm2$DXt[T'8R?!W8#1iq#g+(cR3I+s!R?aU-'?htH+\O&>Q"Y_EW_C<+o_=Q;9a1.!s%HqS2PWds'1hFJj&NAMc:_cX%uW#Tn9?bM>J^srft6)L4AEP2L6.Kj'q_l(JW]ETR7Q`gC9irYZR>eO!B^7<TLaW?Rb!LpjbIC^J4%c^oq.5E1G2Q`WSiOS4UVkLfiaqJj$,YAEdP.)<?QJp\\kO.JKS`qQEmD+^I"jZ8X$K=:s`=refn_r9a)]Y$nN($k>V(GPWE/+]$Q%pIH4'/+FXA\qr!tTLAVZlC:VS&UNlED&=P'?]a_/kj.gMY`t:](Se!6GOmDM#LO_qI(sFGJSh\'"]!fVD#2#PfpF.8"2s(aMRNbB%m\?8>KB'T2_TAJFP)J3^#.$8#f:D8Fbm-@hZFg%#bk6f.X#*h$KlS"[S@kB\6=]$k2$)/$TW0sG<,Hu_>,lLY58Dn&?9('SjY*-M%]H1V=88B;M&fl0<n3hS4^V*Y7l?!pH9(\E"qK<NhV0[c826,ir1\Y,6Z./A*R,X,V0g78H!`"d-JcXDs*EW$sV0jD9ORt&\csD+.%gO$W)RgWWPq6Qp7;e9#@2-%8ucf*`1@pWKd)Vsj/0:Vi?RO7p]]=3j\BR?):rEdmt4;0t8`eeLh?@"+4`k+=:h5;Z0VRU<'"1mQf%b8W4WM8sZ914OeTi=05iJp"a,Zh`o&9QK8g@3#]J_EgHDLQTK62F)BH+:-Q]=X%ifqPkMLkju<#":LFg^?I,SWuk$L\$6YQN#fOQ%%Za@%4W]4H!h&J6Bo^UXm1>Dng+/b+p2_ITjXlGX^lr1/km<TrR;DGrF]iCU5=3>%C:p[BBDRhJW<'^4rfh!*=1`ulC1`UP-1pk1%*]t:hnVMijNXc_"4U+LPZc-*+RD)+%A%g7'iIFD[7>3GLb%<)pII!-gREfY\l]=*JVF1<`IZs-dBBHpO6C&)gA&W,3,i7=tloe19%9PVMs;-\.Q(Z<[-U:C>1FPXpTPW/3`:_(Y?`P?\^/6@@Nq0LnIOsVXc"D*^J@JUqY*M;)SqfZhNJ:3YASJ6[bX[$Leo!>MRcG?,V%@\Yd($X5:4ErF-Imkm$(g.t0:*BM]HhEOD+;_]RY.T_g#jdkE=r^Nl3i8&G2!FC0MapkM6im[gGZN8QWru#!4qh,3q\X4>'C:-m3%?"8Gl(N'`t/+A4=q^B'LY-SPKq*$F<))eG2Y\Baf4'oG+o2s/EO/)::&c<GY*$er8Q8c'@>E>DiE$X</(<T-b$CD[p"<W85hEQ&o%f_purV"F_Yb?$):*XgK64*22a51orNGBopp*cEORmQU]PW;N's,'$Q=Afpb'#=kO`j]WAC+Rl?F;G]*lq4A<jGHkU8*]Uc_JqBBX%"Z8UKI4n$(\iOQ#F?V66j$V17+R%?!ekS,+]dSFlGe20UfsXDc(I7f&PS"03Yb&_&]aJ0]B[YVC$YuT=fUe]O,K?(%n)6!'`3j#3%*'#Y-!2fSu(Rn3:]TB+O^;S$?"r_RiSrq/k)&d?3$J'q"nFZNU5olV@hK!]nZ\;Wj@3[Q/2]%Xh'.>MOpB'^a<l.fRK".b(_`=/,%I:sUFRE$"V]2<Bt%sF0Q]Ds\&5KM7u"a;7NiFYeDHcqq?$i[31Q=q`?-dnrYq??Pt?#4C(hLI!6@S=\iD+/5VHrY(1Oe]SH*c,`s%\,A*+gHmq:^]fhP`?:Ucd#3`TZ2[Ym?1%Ce!T*ukm>`g71-F:m4dUbH4ZhFsh[c+W]&ZlFi*'Mgj)kTnn5oUpR/T>X`HT6`Ve+fm%Ua8Fncu\5qJf`'GW40<]+;hIpUJdWm-%LqJd$`s)VjL2D\M;n9%[9)RJbqQL2rOD/^$Pj9q:;V5q<2UEX@Ob'O.2A;>#)B&`i,Y/%#tWu<hiJR\lS7Asp4Qn_U6jObKG8>q)oIJG*:C`]Ofeb4]36[q3e5>QP?Q.uIhTof7<F'/^]e,<LBt+S%PG%eIg4+iB6U<@"YjYp%3SC?D;h<j21^Fa5p&aMm8EF=Z<\&0>pNE0$*p5'LmRq<tH<;,SK:D(OiU#o=6eX*B^'<r/'"M;lm(_?WZSQme$V1,%9d&Piq`s>Q%8(h*-rh'n@jC<r95&M([:8<@,2fg3,JL^*A?U#oRouYS>"tfG%Khab8ET!J%p(Bl&]1(W]m=(<18kjjU-2AgC-;c)rEf:[%MX,-:%@4&N^5e-u)+E.'d[Da*cCOEM^*fu#DH`^>T[ML*2YB+f9W0JHs+,=61`]6&Ja#CPVDbNbFDj)ft[b*m[;./Uk`R%"$-T_`t:$$#_%*==oZM8/XmLQ)ckaYjmPpW*@!5Xg]e$LBo0?Jd,\J5:&*enui*;kD#NZF.;T9r;4-TD:SSQk(6;+\PAfNsD>P7U[ng5.DR]@\SZ\%\Xe@V@CI%f*r)AQEnQ]W"N&p]!F3uTPmei]b);H.=Em8B9]__rX0W/g0'tbe3^cq7]%I)+JU5us+.,j^]nVE:mSYdaoSW*uh)c`u%!`(l%58&0A0;!iL3A8&a_Cg,Sqb48_nA]Mc?>hJW4LsuJ:L"iu^&`Q[U9k$TH0`!XGY3+!Z%m!X1&JY.Ij\GNE4^t11\1;Ppr4B5%>TFC@rZio(LL@ePpA0Pu\),T2K$bi'aK5\.B4(idHB[f0>(ONsSU]"br,C`ZFgL-hbGE"e>X/*'"obM]GX@Q%4m7C8MiCmp/k\Z6%cd0sWW3fC:>)\P*Vbp+kqT.''9-&*,/!;!Hrp9.,F^=k5]LCafGV,Gsg0o8O,4,1'rlJ1%2R3"$f)W<W-,DtPX<pJrdr5Q94tuT@%TS$<WX?Nnuq1b/<'Mm>/`=$#kX?)sqXJ$P6C`ZRVW4VHE<r/uoZBai?!$<);X9.GQ_=qcJgDn*crnii;]bka\1(EC]8i5V!"`tfK%Wp4B"d!eLm8UJRT\fsoV8?QXqa=3X,.UMV.BeXojD.T1L_K;M-bQlaa:6*Dh=A<[1K;OtofGjNuDB*K8kB?2"ATK6:^([(Xm?CDg%0IB>Wq-E6mVJ@Q[j=fe-6B?I<RM(OY`I)PITQ@l5_(3"UYTlCLc^HmB\Ztr-Ujtl6]p)>I'1%ii9[^:fH6mCHom<G<9q#Vp_e(G'%9._Or?$(ZsL&bQnCR/*@:F#Y=.Sr/n87nGBSD\N?1,LN28bM029;Tn;:)37DbW]$GJn;@MlkPP,,NZpe:ro4LnHCUKP_H:Im>&2?%+m>IoCB,F)6gR*u>1gXdo5pffoVQmj@YJF6]u)`pmm8%D>.5mb[Sr].$'4L5BVdg7P"6IulG6Yj+>"u:>I5B.q9AG?d_$kVGFo3U%k%u&p*,?)C[GDI6?K7*Q^]KXoF$Gg'MEJ5V);7doeVkFrM.QgH;'/PB"AI9\C=5s0FDQT?N+eo\Hq!FN`,,6.K]<Wg+JOUhq?3Q6%aYeD)JZ'eJ`1Ld*VQm#Oi.,NEZtQ0P[kU"EcNG':;C]J#TSm6'739inc*i34gB5T!k8XS@_`$<iFW'n&!kTDY)@:&?R.17C[1bB.%5,$4S79QL:.s)`A#g9O0068,Dk(koGU#arbLR]4qK/R4^rMBUE@%M%PA5*<&S]TMSSO#J2%H4!fAo\]rio"r!=Ib;<o5\#@(c^sa%Q65k@dS_hKVaO71Lkk*@C0@>sn:l3O'gGmQXP<q9JVHP<[+5@;@hk=i=`k&ZZPl_MQL6lX(]YGP:bNZF`sS'4g+%3'DY5Mp4b32]%l="'WQA0t<Q8L<oC(JA$(2Y\ppbjA*btO[7WGTXL)WH(mWt6@m!)_j7<-g,7W!(1PU:K3DlB(S1;[/5ME_WN%4.pJGk-/NnM2L"%%<KK7pkCQs*"LbhnR0Bf,228N-6SLET&A$6<X`Q'XrtttllT:SgTQglZF7@5gVbf3\`a)2XNg$=dZur4N7aGAE)K\/>%;275*^e-H%lDZsP?,(]V^N;TAWBM'Nh>dSE6S5)TE,<$,3?3p3kj#c3W0Pg!eKY<l/Zb9d<Tg^PN=Rk!`PeX8Qr2=#cCkHEM(uh4"&:h]m5I/4%9p>YO99fN'EuPD4`_qA]&TcY>f;@J^7EM(AP2I9SL/$.R"J]b64;5i4*Ii<icr.?7*45+;H7)eY[:HZsNN?%7*7\b?V(W`&LP_s6%:H1tJCGn7F7]d&_?)ZTIXS@ZZ#R7YobFtTphEM^&9sJP-VkIur,tl]e$9I(/ZER[u+,iGGW6CDVB`'p5@7rS7_!FlPrhX[\g'^%A%$bh9h7%:27=7sKRct'U9r[mHMllJ27[s&H>rn&XOd?p&VPnReF.d/$_Y,T-,%<g"RYQdTG5'*B[?0*`NosMN/pd`bVI,>3`6bWrC%n$kH>_G?<H_9H:cH>k*W64`dba0foicq]r)Q-J&N&oR:_8P^SF_qRT2jk4tB>e]d\T#9q&U]N!3Y8OtRIff'k0?Zgjr^c9/(d1[,%Hq/r:GDqGth4X1Ga&a?QiQB4*0cXGUhZft1gna/G3.E?HS[b]Zdm?89io66q8$.1&E#0U:e86PNFUn-%XtS4WkJD4_s-Q=\F5F`V%2?.hd(Q'jf5*FRC-AQSBhKpJhC'-?'P73T.):cH+rpFD&@c_e/l`CtZ:t=[,E.7TT8OSR&'BGGe(-&[AiHF%BpDrq["B!8\S;&QT%@mMi2Hsl\,`^S/dTGI^Qo<a4U\#,XbF"FrLe_&Jds%,0aX*U$&XAaBs<>sabhO4@d\@#$>*H'O(Pmit,$ZcOQG&$"u._E.*:q-mq%b,KD4osOf+^6WL&p/=95kpuXSnTpt^WP]2%9tn[B:>UW%>A^;,>F4N-SL/YqA[d,d#;-P1&T/A,$7VjgopU,bD++)@ofD2Xr"fBd%:?,Uj\areMldXm*fpMNaG7a$&ilZ,&hIE%!,PkZKdr6a[Q8.S[Z+2`&]n`ObLO0B[f[G2We@r$LG?T/1C_N`>RVo%b8u/?9WPa]$%*-j`JI@tJoZ=js&ZhhJO:6*V.VqrlnQ9A$k(RjiF:1MK^,FsU2W)G*QY'5%GZPnl8l6E'!lg.i"=>T.t6RItm/OIpcYU\?#j,[CF%f;VLq>>``GX+$rOXuC7)9ASlWHB\(EI;KG=dC`03lJ&62NXRt.GB]+?1KXFD`h&d=V0)K1djaKL@&6V=lZNiMdd&_pH@%.[FILj(%pP0Q1UJApMg&H%&HI9WQUE%SI:nHa3m];F-rPq7&:B?N2]Z6AD6\2nhf7"$K$@CaDI6Iq/-NaM<FEab6$H49.aZouNRN-#r4b%`(%%6@4"-Mspn]>Lc8<pI%'^=[j,lZ[[G[?p]"05ktpXmYXG24^IJKPo,7C,BbRkt<.(Xa<#!4$BW@QS6ZkO)Cli42VP1Pt&8a]/Lf@%UJB"kqm4\$I])@+pK]4hE%#qqE%AO@SSf9fH=&=DN/]m3$9oN&(%aT$3%>!!jo+?/9c)EjX8[raVk6cT<lq#`f2VO)UB>P7k_p(P%gWRpji$t:Tl?6>q#n.8)A_g@YbFm=^42AtWhV_?Lf@4A>_j,KT'LAXD?eRq)W@.!uVi@WVZY7"tkN"8\1pV2`WQ9CXa7VRmZ+H?V%Sbb47!jJ;(U<l,8[@M?^p7]jtpt2L\'\Hp!jGTAn2YTV0W(!DPjmJ.6Yg_O;H92FhR-)FfK!;PCi&a(Kc2qB[e=t;SMI#eA-G$UO%5>ud;`Nj#a#WiK20kI[*,P(<&9@G>o0&iLM3MG3@S"PMO)[uC:j&J*.ee@<l<UR<QR6AHc:H-5M?I['Fcb$t"F\dtQmK1d?fJ[uC%fQ;!-nq(.7I8\09$'RmlF`H2A5G`We1$id?)Epl%TBs605'=A6Oknb&_rn!Oq7^A61`P+sDAk]%pC30.'#esa2m1m3L2UF91`I0^%Vl@g^jku0ZT=/sXdSgjloCYNCZqYB'BjfgU:9-b"VtU@%T/D#]E'LiO+d_0ZLY'E"U#FH2pNpr(nEK-2H;kJ*VXqHM+3E=U^-1\H%No#be!nuGra#-X-'Q]m9@RlK6D`<H2lFG<kD:eL'l`T2Fi/;/")O04Pe&_%`@IuDBMJRS4%%bHhiSrha]0rnecbAPPYBIf($ZG3\%#F_QuO7I0hq)%6K<I8-LE,4V_005eEReMt7JnJ>ga*HX-A%522P<t9u``msfqKZ0#2#RR5_]&FdKYNdWrk`Lnrcq=eDqb=G6BC2E%:6^1n7V(]O3Zpt8i9;Y#hpH$M0%/2L=rYi78^!KU/lKTXE9Qe2!^u@o2X%>m+PUBBS"\\I_[GPS7Zj6h"9U-)X6^Pr3<l$$2PHc7%U=UjbP+J9,DDdsd2=a<UG)H2;_bQoJCFV>IM/2IWV<g$>h,8?`]$+.hS[Pu92s!esoe1G+Prn*@U^FL/-!\X#W`/AM@AeXgLCqF!%OnGo^a.aJWU%SG'd-9#K0r>m9/uI7"i$BQD?Op5f.CB)dqOJ\;JnCRFn#5S-26P#t0^KM-'K$UU;/*:^oL[t^DuR:)d*03ibP0+d%BF-Duq=S'A]J=;YH9j.C?%MSMH'&22^LkkT;[`?;1P!uc<<Quq8eY5:0&+nbl9KgCiJ%['Ieh=;aO@-qm^a5M3uWAT7M8*"!caI-%Cji$4*2Uh3"X(=r,4%=i&koP,US8^e!rh^1q(ESY"(VOM_JWaD!4B]VhaA-)!^\OVl;@epo]K7h0r*E'/7$W8!.-.F&JcU8@*!QD%i9N;nG:1!HFa0rm':Aq>>]2+u.*TCfjR?m=m7)RJ90R"n2)V1YqSZo8ouR\Og^Cm7*SEF_.jA]Ea@'W+7$"uTEbC+p=8WX7c[41L%r-4V<1#-cJ=@=5qoZ)"OWZ.E&'0SP0$uS]4m2FshNRp8Iq*P`,iu)CO3HU]lqOgYYBq$8hF.Xa/?oZBE+4-cEN5O<2XRb\Dou^.Y%?&2_M;B?Z6cO3l9%,g4%F8BuJ@];eWG?XXO(X^1l0r:glkJ5Yb'OOX<,lshC9*B>Z&oR<X8"Xtn7>\eaU[]0!r#^K5KQ]RF>*Vka%Q_E?g?^3#\Vi09XL'BNk<G@"fo_?.D@7BDNfs\,S!!]0XNUoLdpi*I3Y(PKGlq]?_&bL+ia9X5,h]>,2SU4=p6!B"856(+iUYQPh%^J$HZPCGu^><<R(K[Cr9=I*GqKF)c=hkA+Q&gsHIN]o/6ON%Qj_eflW^$^'Af,\!l$WLE%*E_Wfgj#?VY.IEFIn0:mT,4,/B1-8<%"XaDokUE*+:+6#B-<(IB:\+e+:Fu\1GsTc[DPTQI7L!fLQZX.R"D5Eb)'PCS;rbJ$1;<s=b^)m/do4[E>Nn+EoJkW\_FJ:r:N;*n%!J\Rle7-4bGo<)$-B%\b)ODU9.N5]?fOGisajPKMQ.9nYLKG@OXELFg0tfl4O&$4,jjgIe)S@3o?"n-'8UA9RH&2%s]R6LMF,2`.%jU@%<2g!fH5D=6R,$+McYUF*3=,2eR7V2WoWDGFEGeJ##fTWiZ@uk(7G+G1De_(+(9J+Y.;f&7%\Oa#)NpHJ]=9p&cG2QQE'g&Rk%<^DXa/GIe>i>UAFX)`U#Z*75rHi2U'k:"7H=BuuK^eL$a)6"j>k%S=0D3)q,SKgm-bEf:4d"M\65d<$+1`^SAK-sh=VF*'TLkQO>%%)g5qKL8ViQEq$rc9!qAg`COoctB#G3Y`LCIPGIMLY=]J[jBR=7KUNL)qP?F_V*kr$0:k*"tr#r_\tjNP,F*Le5-D]5%-`G5]f1$%*7V@S@HJ(>%r'M8ho?K4De$8e.+\e+LKb9V*^:SF^`:*0H!Y)0]#Y+'Q@d#V_mMtBr9"CAe9eE\T>NgO@:;hDhmbFj4N"r^#JArR%C-94ULfJ*4RDFGM/F+U"a:/"5/!bF%/):`8Qh[P'M<d3:B$hnZ63=Z?A):>)WAZ"PN<WKW2P#`AWS2e[#R%(mZ3HI6TXHX@C<(Z[%(TKV^df>0>5Y`\A[;6i>OCj!2h#SUF72@RY5c:V6fGW[4K2]:jqde!'%NN>f`VMEc?ohU=8:F+#"9ru_U-KH-:n,n$M8kd7H@PAf%-^\Ra8tTfll07km_,Pb?DY)6mWkkZj@eBFJ\RWkr>"_s62+\8&Z!R-A]XW>!3E`!'c_f4L%"(6"6[DPL;4I_3QWiJg`qmn'S7%f@%nTb;R)="&9&Z3UTAH?p1MU$a9nSD@<=gb$Khgeg[hi*u>iO6)\nmF:?`]cm@F5[+"O&\PqB33gg:f=[NI(`q+>9P].%6BD@L5X(N%-A@1Qq2@BgY0o+ZK:o/e$DT)=C^Z9r$Ij^&bjFBJbe$f)TP3thWb)B4o-o3hp'6SBW2TI8_W"r,DYlS3HS^`2<,m+!*3,/4SRi)U%:Zkb;]O(tr7=mGlp^Bai8aU7`Bf%IM"4U;EEII;?7-"-tm5l&Dfo]ru0UXS!M.X8%rHPe2M09,N=jRWk(mg@QZXG<!\Fb^m9tg8:%]IcCC!@SkCB#J31E9p+Pa)mH8"D<1?#+u6!3.n?"S4D;R$0eT4on8`YcrW0q^+=9i:u=kW'"u477,[Z1`Q$kTVAlc73EL/5*(pS%%=D!H(f0!0u=6>YXGB3e:\p(.6aYR/oH+iPL4Ybu9Ri0\9pTc_@X!u;?YM-@\g#-O2>&#Gq2`;X;.1et:.L;'298tftl,4h>%^2j'%Xp&D^OG0EJB%dgSkL405n6<\o<t3`pTf+/TD@KMI0Km.j#G_`%4[+71pgC64AKJb:L(>-p]cMg)oh5,RCMs"jc'h*<cD8E%*(0V[%L)*-qB!^s6:nTGJc@rTXA!.cSl9^l3MPCVf^Wa*Z\LrOLdqZesoM..=brQle:`$,_,p7cUk/gQNBc)TWf3-ch&Mre`$k!/A5e2Uj%0e?UZ?8,FSj#iX12QH8&[CU@rG+Fm7\.6LE31"#"K,?MMPbk6!F34T2hM:S[_E-,'#%_8L>+:sa[?M1+A@3]UOq/HAfp7g;aZ[)>%l$3W::Q`8$R(9)aP'kW$(I5=:*;WF1P$&^Yij*DE0\a2uL?"//m@Tq&,!l>ZQGf=cYo;F@$PCZq*QQUkftp!l4J<VY]jW<e`=_t$%'q-<1EeM6M(s@hE\?\:[MI-d74UY[&:ph:pE<V(UFbe`5^OIoJ!nld!XILfd=@4H7;>?re.s&3:;aY2(6&5"`(/RA2?:!an0;aJ!%VpgsC>&Y'2FQO<[r0]&+f?d69WiVj,<or*oFQO<[W*4-@20=/8aq]$peUmL1kfhdAgl&/*o9iY+9iZ4jk,HTD3qI`4+`9;a%@ngh%=ei/8)S#iH:.eQ)YL9R0Y/&J]]'*f^ZU$$qA=c!h%7<_"_g*u>Qmrt$S_=B)'rE4hQ?4nQD-mWbD6K<fAJ>W0:7;`X.@k!!9ip$7%B(pLL$p0_X"@qLg.`2(Y`02V3jsR2l/3^7UNlj@er8a4X/9Xr^XtY^81Sg+E85hSpfL33)>a_c3gnHebZ[%F6FgGqCL<1S5;84LY%=ArL`T+%Hb"*N8K0PKgg#TFRmN*!"1r_m3G`lP`S`b)1mMG-RA@Q2bl0kR3t(;%g1We0nX]&)[Nh5_i1N)N$$h%1f+`iIJ'9>MfA%]EP>k+rZRsX/%*_nN`CNVq3=`Jm0VPLuK[V3j=K8ac-[dW^HBnRG,4P`%jmm^^-HE_M8$=#_bj71)[`QB:_"sUDua7FJ7@^b]R;o%)9-jbpa0$VdRG6a_n>t[;\cYp/kseHJe@s0bi1s/8DR"8+_C9Q1sP=\/99ZcPSQ=8l:hWG)75u"f!$Jj[Ol=r_lOE75oE\"!+8j*%+P7MIg_[lgGmn)8'f30mbd'pl%`PN0680FH3q*O'<HrluW)K6:<n0!N[]CJ?26IdZ(V;t%QrUPa!eC9a(]_t8SgC*7nI^$oi1CNY%l!-NWT%^WCe_07f%%TQCDLu!s'nEM$%or\-ZNuM&g:/]XU/5`+Z,^K6an7?j)lC@u`^_#gg:&72L'qY!b>Xfa-8!`:rgj8Z"e]D:%c;j:tM&j.IBrsp.JRhbjV7%V..t,Y+m[+okEVY`Vn;bM=<7tc"gt5GqgTnjp1r12l4_AKKJ"E%2GaV1`rekcaSZVCAJY<NK$/iDK%=Mp(K?l5#'<'T=M$4\LoIn5a*e5W*oMTD.n.:uRgLJ9/^Ll=B8V&GRZ+qpK,a:(g`,;SNtVl+e+FT.()Y_0D)Z^0cfX$3ucK%i8i%$]Knckoqm=!!pmpb0["01A9$m!cr6@,,8)!8t8Z=Nl]$4Z^=`,%Z`==`Ar=!`$j:B(?l^$kL_90&L+pXC5oIO=?a'k6cCjIUW7Sm%c+.U&7qW[,%-"6\k$AEl10CBJ7NieK7L$s$H0.Rj04dq:-t75\nX\Do\n&mSg+snu9N)bslfutkZ^S4oCt."ga^*NmOs"2q.32F;%VSV51Z9`K$2GrphH63n$ApI])em94h4WMIeI1*!/PP:6)'liqglHJSQB&YQ"ol*BC(5o;MRkmDHZQ@Dl,'>X5E'gtjgm-g[ol)t?%''nUBHhD?*<LUU!%K#g;`oiF7Z5sM$bB-1CAP/T>H8to,!K.%3n[<RJ*S^LWoh`?HQkMJs>9[I5b)*cDO;g@Og?8<0]H&LY6T%*!%+>JMZRn'!]n"1QEF?5%OS[^PIKiE(ejYG&-(+ETq-S7ZUe$SIS4R[[b:)2dTI/0oB(X-H8O6](nguc"<F/L?X&OctA;9SHCUe+:P%`>XO(Nm2L%k8/.W0S0qARXIjhfZV>1m#J_eIY7%8KWX5fR&5:\qFG"bZNk=e1#qq&a08tAR@-DoSdU<PO\0H68jJX]S+gT)'r\]Q%1MY3m<-"b=M;a+k<2;]/U*B:'CG?R'Y@!3e8;6_GMl91#E9=>pKi$86WJWb[0^@8eW\[?Z:":R.kuMk=Q=3$k)*Zc3CRJ_f0!H$b%34B.!n7gHO\/EVE[TNs8]Y@>dfHNrH"H$W5n$A@t)>TPU/VQ!\HX1G:*5%J.<=FXe$AW=44s@hjYdW9BM=C>?":8)B+dC),lfp%V%,/#!9UNsrdYtjSic3]/s&rX&(1kuJYmj2,/r<;?sl[1SW0u9;noEJs*o^"#^-i'QVWL'#n;!$48mu6l(odB-`UJ!5#Y.A3@Su`_d%>E`MF]p3jreW-ejRF$1+?`G+oT*io@Vcr&iaC_`C7-uh'$T@VP>j)T&6;S\Zb/d;X#CIu?Pgn5c-?Wr+Xr$,fgJTtWf1Pbb<7q$?%Ro^EKn?\k<G^%bfi*qZ1c5t65Mee$rR?3kH[p%(e_TmS[]-*(or@k@X.gOK0>d`*aHTk3i<*S])HgI=spC_3J^c";%'mAs)K*WB=%l9!W?(ff372E/A`P?5X/];HIO]!HrjKcO*m)0WT>:3Bd\'m>hpI=*u7`gmku?cm\c$MX(-%AWfCUT<p&VIgPo=.t!58`92'_fim+%+B$C2/;UR_F1c\QCXc*CVtW<I@u:W0ihOqTeuDZTZdc?2\%64OW@_60E,(HtHCM0>g1,/a("PNRMPuC%4]Yq`Eir).l:d7[T?b!9%pEhm`lW8.R_ZF_='Bu=*7o')]4Bsr+VFXnO_\=eB*)RT@VY@eVjq9\l/*,423%c:T?8eOocR;!q%a*e6!ULt4h_TjMF>P97<(]7<%V+b#s6_p(8.bup)]X+8G3h6iuGu&gMeT?,g[U\:HFF!s@D5;CTC-'%33rP6ikGb?-9*!A_;4OhY:9Tu/oW4OMWp/k=X_4c51ZIK7%<n$<`dTP`]g9%7$RfW>^]L>iLl1rTQ(#8C]dqOVl`2M)?lg3/DMJQLrQHl:<AB&@F]imJPF0>#5l1ARhmI)^&RSL&P:A;Ju\Z4od%C?_PcP8@7oV`0*Q%`ooql1?MmNMX"4C-"LS.-G?=eT=9hj^P:ToJh;3MHSYdFspt;Ra-Rq$`p5SX//0eCn]C$H?)loQY0aWF9XTI%$a-AU,E!mEB`Zb+HF7)umr\Z]FF(?:g:a<XX6K7g86,VqOD6h8[D.6,3^$q#G2=$79rD&cB6a]DJPfUUjT$cS7ar<@3]jL:-h`R<%1A$`)XKJP@/q!NLY[q+m]WY)Vi3BXACu8<,Fs!?QFb*&\Z#<-N8BO%s4?=4sQA3?m$g=0LEajJ2XfW`i;.+LC]bt0P&'=)D>0Ucs%-A/UHmBU=p$41c_IfHK$3bb=\AeN,1,<@/H3K6NCh+E`eZ]DJ>h]rUga#/&JMA]cCB@eE$]&jL_Se34<gUQCk3-K:&Ij1,!c/!dC%agfsX=l^s&:.9;<-rV$LIt-l+.-k[:FDdO$85ko=RQFhW>$Q0)EQoNl\T"=Mq5Z!+mg.`aWYt(QcKnUJ)=EEBcLb"bm@ndf29o4+%EBtUOk+Pq\2(GE.Et#f\)-mY$;oSZd\g^oF;cOa;0Utm"S0Enp&t*i3.\I:>%9kgb7$WhX*E@9<:lFKk&$"[WpQVidHE5>/Fuj"\%Meb=hA4$B*=Q+C]Ca]8j0;I8a1E9!#KiC7]H,h3$pCWq+CMFFqI?g^lQC)Wm<ZpNfM$pn.&qL[3<=<Mt=]en!:7;0t/acS'#gBm:%`.;LYU!_j*1SsO1):(t#FDFJ*OYk7ShA(2HeN)-'M`D^VDA"Rt1.?QXYur6&eI@65fXZ_2_"P\iY\T1l@e2I(B5#'7XF-PCO?o)\%$/s+A\VmVAS,\]Q*f^[ShC,u<_3r#B9A3CPQ)f5/ZbpQZb$_mkIFDW4a8>*,r/AhGoS,FHop'URE2Qe72KO2`1aq=;]6UJtr#>(*%.N]IJ_]<)g4mt/5]&Cr[9mO)Bdd!=mN0iLN2r#:AEe\jl2<G?l1S/=kX.O4(2]9cCf<<.-edAg'$S/<,rA+#FD;=dmkWS5`l'fc8%MZqV,""7?`3CD(,Jn)!U;`?Upi#!9+fbk5BmoE5^:"ZIa8(Zi?DaaJD*[t"k\%[::j.BM0HQJ*fA-_NXHo,&^<^f\\=q"g3DJ2_t%]c:k7'@G%IbQlH[?ksLB%NAtQHQJ\WBcOT];f"Gj),$Ed'HMEL^X>AdeQLZO-HO:gK/3/8E=>3W0&24`kI<oZ/2a&.W449p@<m%3%,1b7"W]^`Z26K`b4#VtA0s#ACRepbJ`Aq!q$bPi3_.bB(kIN)qUfZTV#Kl-"L?UORR1DO@.oJ_BW,WOr5]@pmPFDKJmcB!7DjA4D%Thj`jU!ne6-?WKD*;cbD6fu:Q!2%EcHu7d$CT/'%3SGnNM?eiY'leBT'472_cFQ<L;oc@>1fa3fgueRa[5(^X^5$PYs70\s&*J?T%l]TcRMPY$6KOLe;;L$flnh78YQ+Ze(Bf^t!\59F&C0(3jMAg\BhL*$nlu_Ed&a[T$/+#K9?B`gElaUpt*4M-eQ>[Ar9@M7f'WN.d%T&UX@TJXo/HK,uZ>ko0gSK1rc[$\91cQ0VKHl1DOeP/(VD^@62,"kKOnBL+%6)U]>WjG[Yl)e+Mhq>\8^M%E_MK^B>XDYkPId*%m%JiVLI%%4R,^$mVKq(N#knAjs'(8IF=Nu8bqp^,s@VjQ'%PdY@L<+k(+I?G;8ac-L>CDDpgmStW0(1p70e@W]dd(H`".RITLr?L%/%7^nanht!&Qa_Ps*P^mapkE632bZ$iOVUR)e:-+537[]>RFK/MURpoHqfh8G&.0-CY/ZR68n<7"@QAsZ@<-<tCrIK8c>0ipnOf*n=%Ff3ncRY0g+=^!fNKe]Q)'h1!E)ll+F":Xp9="US4Mhs.ja=$?01"c4EDK*eqm\ct574J_#q^Y8U.DS%VC5-BSi5`n#3A=2?+"JsQ%bPJoN(Kjd39?\kNgP=-NlUlD*gg[o3q5cRS3"5MGg`dZKdoH`WP#J4eGH5^/9PK&A10L&-(bEZ%@EG'sSRj;_!/NKIkI5g/OF"Mj%p,/+#cqgnbHUK7,O'UT8BY63YF%1h_'[S<U*[b_<m3B*_[VD4(X6s5=`gcPu8p)uA\@Tp9G)TjhWs3.*XKO&V[%+o1Q<!lIFt'?R%SN$J7OP$C[esB_-K$p^XL;:`sNT]7O!>O.8:hP!r!DK7gk+e;T/WUp0=mTDI)AeKKMkepMm*u*ceZE<\`G]W9c?#bP<<"^P'd.B'%+SMcQ7NepM!!1($Vuj=J:S+Bi&@Vj_q?D*f&G+\Ua(Ica=p:jn+d3g0LKgNWoG)pC'd,+lOfk4b$;e-N9POS#Ht<.)5RV)LE;.Vi%$8BAYAf<1X9DP5<mO=*si]2'dau@Se(0+Qp?-5+f=o9e:nejmT(4.L&_i7$]Gq\7mmmmA$0BG!L_Cb+P5/WhOKjMp2W;A*i0BLYC%Dqnl"#nu&2NQ1g2W4D?h1\Gca(ND>I][q(!B1&*ElY#[&W*/T^;kp5'eSg1)-/EqHbbILNG4I3YqWV#9/`:Fnc+SSgiA.b9b!jiI%n26&\\CV8)@<eiFi@3#0n+BmM-.gr*MMb$/\aK,hTf.%oTDeX;p$_R[)7Q.+?9^;sC2`c$^7E*s]m_bKW7nu;c_qg<@?h45lWudq%:7hJl5BB8kZH)+;f+52;D*d:OqR?=c`VF/Wf5JY[BUebm)3lFm(Js]Uhs4o\0=H[`rNP_MRsP=-hs.,rZ'tVt5P$]jj&9XXh<S_A%WTiSLLMbr7B7?m'?JV[T]mf+QqPiXHYu>0(?9e$crMJR.V?tkop\NRE8m>ERKCW&-;qhq_mQnA7Dr.m_GHW+6I=1YDlXt[IT=t-s%/.0e0n)Ko1?9^:]D1Ft;--^M7T3g?+SCm,B>)(W&qWT.U01'!'c$uph<E7biQD)F&IYMmek.Q4%Xmm:tp!Y[b3_<haqtRC^O2ZNp%$WoU^SE0pEhCtM"0bs_/i0s?Tp\NQ-;.l2ArQH9s<?,V2Hi4X<leLd'oj2:Ef?`6r&apX*pKg)5.U9KE]T@L=bc>]"grD?D1eW6=%hsC+6.A9F:iS)Sfd^duU\es9X2K&+m5FiOk=G1?o(3$ILq5o)mEm/FGPKBqUkj7pFh!8V@[N!PN]mK]Oh=a@kbCXK#9Q'O0lW5"\%l_j2Q)W&@nj1Tnr6UDcDF4r`_6*/bAI\sNI2X^5oQrlWg!7,*tp\L9o`9Pub1YqA0<#ujrMC@K@l\AJG486F;k*lb4dt),Ef2&e<%Vf)/`ag\X"YFdgF3"1Y?Z-bm!b2M#I3F(C>mRo;Am<5C&<(+J=LNX+>n"op#1kgi;Ic>&ca0:R67uHOF9K&RpO,='+j9:C*_VriV%Q&mD?WU`L(3L5YD>o-<fV_6lMj]4A5fMD'4?p0cjlf.+R)"nADU#sNH(1k+UV'GggI<2m`#n4I.\M*18=#u]$c*'\kiHceS;=Nfp%j,U&2/)(kA?aoR/rmOLq*fMsT(T#11=cddFcc`SSghm)Z\5g454EPAgAc1lN6aaBEZJJ^BF/*o*f&*55*Z=7q1]47#^VG/(1W./-%lf%DZB.N6r-f"*UP8!D\]D3(L?E$(E[A^D&kcRt"G6NE`)-<X*FmhDJmUX22gfZ77C,\r+ji$jEbC66M/=1ZBiATR,%5-L^\X)^E%o@A;ETtj#LHCit)bMGEM/GI<&bN@6BqD(H=?+U&`?;G4'2^<!]8QS0ogE\-g"MeS-RlN^`,8MI.5^9rdZI(7j.AgA]\O0Y@hETVP%[YAUsZlP!G-C],#eUj'^Va<g%kg;9XO(+G0?gV<YC(ah*;Q]'kDc&+UgGP`afLMCl"&QVT.n\sbBIcJFl+cFZi[Ed2:C>Dol4I<o%R=?aE4shoRXc6"fHuPM\ENT1;HF&*,I)n_5!SN2tAbuDr2-WY^)?@qYQYc>?d(YBmnF`!LR.9E(Z[_CP&Q[QcF3\@C*ZjU\ir*?j%IKJ_>dm7*Clf[+#U\GL\4K!.3m")\QoeA,G6h0)p.$I#<_Ll=<J0rA]pmTu,Fh^3"S;b886U1DS[+G`o^?1%lLf10NN*N.YfLjdt%n@L%o:Z^YjnF(H(`Ff-#*=a)9]kEcC2]UZnZ(!-7o0"isJ4GAY$%k0E*97XL#PioJ+Hh)c3u/p.8H#).q[752F:hZ;c%"s]6A+M9%jmrpZ,hAefdCfAuCe>3>ap4]T0`3LJfLPJT0WZuI&=(1Z"Fc=QaFM;LmqrI*NK8#-(_P+]^BmGIZPD.Ro"]@JRipUaRE.`T2dr'l%`Y-P=(&H(*-(<.5KJ6J'-/_pZ/unjuG[C!:k7MWAY9e?q$hCua]j%ITKW_nErj3L27ehF*l0f#HF"8r^<:i^BdiLa_/I%pP0.b!C%4@Xu^\HCaF5+=OCMd9qYD_2K)GI`P(\`sfpjln'8:&IM'lep]r<;4+s7D+gb?UXh.02G]G:cX1kr=B\*,uStO+eU=BMA2L\ET%RZ%(D/i*?J^fq&h/.K]'q/sM*hhoT#UHd%#"BqK[gu7Ue[P;q02.g>95QDKCqEO`UQ&\']]#ADgb4g@a_8m-uf!,E93djfnX8K[lHM%%g!*h^gZO9s'3A0L,KRIS2fnOfG[Oa\\KVB`>gtnsTu9^`63rS7G2t917N:1?Iu+Q*$=lqI(DS>6h7atA[H"g?fA9+'HD?nAXhF-:%)hH38<7M4%Rn[#^j&(D8Me^-qD(09/SqSRQ"i4eDDXP2D0qRAlmc$(dV-/%66)'MmL4_@CgiTL%Nc=OX%RM1l[1kZtegiB>CIUSL%Z1$`92u!*mKgYfu@&UPS]cGp$&'!S4-ccUq$)Ak>"@r%rA&&U00.M#iMQ[omFjEPXh/NQdTjO8`=7FKu'If:iZKko`9b>8eTFc^;%L.]N@VGmlfbWaf^47g8Sf.Xu_*e&nYHFD#?&:`QmOFHd/^YKK`Vp>?],k!8ZO++NkUoM<ab16*&38QWI'6-Jij^IQbRS]P*./Q77%:CL,Q&FnAR?tGVpIf;94=-QMU-BM?%3I51;!n+@e-kR#D&pEC3(<X(T>qGkKYS^f+fjS$f?q"(tbdWOK+'dY&_`<o,RXr@EFSk+c%,iWY]<.o4D:_k.:.-jn=i4MIGGg$ec9Jdf.'BbcSd8`2rMN',>e"5:V&7RauhCJP'FK+tBkYjCm_UM%;,b)7+2gB5W%HK8<YQ1,u%5,GN<5TCbF'd-7XrBW;sma5<g(Y[u[@qar[WK+:B%GsnL>A>@P7GumKNgqTCIGXTX\<9/59S8`%+9V\0m>C7lTN10-B/1Sn5gc1H%#V<4ab0aSd_,!A][ug5$==*t3(UR(BI`[/[pT+oOP5PW(mJ[ZV]Yb#\K[;<p^bfkDh7`q[N0UgF<XWXM,/bRLO`ni*=Ml**?1>ZD%Ds<u$qt/^@dL--*.EtN2Hfc!ff;Q=c2a6[1#/1`61`/KpAbt>E6D(G:7MLb-YPQ,P'Ti\FS)!5=EbLM>;&eM>'^(SE.Z!T27N74p%:]r!ZFII\s]o+-9UJ[0S(&7;EGR"p]&0]K4ObiM.,_G1TF<G_-83e5$as6u`jb5$ZMIN#5Xq=WVW]5c%8H^7N"D-G>F>9J`E&Tfp%cdReG">`5,f)m/8T"&;D\747:[R>^;4['F$'@<GP+rt$M=@j<^#iKE-aGY$20t7h8Wok3$g3Km.F/%(?ba0%4=.5l2STQj/<V\[B%&Oh8OBAr+@qNjAG'cm)B@PeFLZUA;I9**s1s2Co:0J3KYVjQEk9]Zr"+enK`O9("b(Jdb:];J_"VV%)AikqV%MG?e$Hp!,n-(ft5%W3J>_SmnQ>B\/b:G!DLda.=+V!,<S(JnVC>D#.t&7X(rlZ'f4a\j+$%:;OO:s1NjVJe^_[pCm0\1o$uT1mL^F<AJGC,%s'@.-`4d%["r`f&b"NNkBlnUA'9fl-Yr&0N\aH)YH+sLNBJJ0ReZ=M+7h9CeVET7.`s^2@S;LHh9j;CN\"f]bP#[upZqa6TC0VcgDa@/D##cV%s1Nk_%_OpmIJ<;cBB-V=s&&)L)U%-Hnbm7,c1SpPp$^>E\Mq;!orB6+Ie[luVOHef_kTFdqiEi/82$cq?e9.pXZc`mI/*SG-_lt<%T>-hd8j*!7SESq(Mi[X(+9"G_ggcCOqo@XH2dRI$HJs#FlgMUf3V`:AQ\/Y;s#$=OhuA']q"q,,orl\J4#cs-NBp(+>o7\Efqm<>%%Xac<CN*HHfjd"&DuK165BlAkj*TrArV=Lm\P&ROqi&JBoT$4%6K\*/X:0NfXVkSH(]O)UF7/VH-XWcP^.m%p\MsPuqt@SDfBgiQ%Vb?2*rVG8-n:B?W?GG1l$g.>/SPCkT;5n1,k0r\@E+83*\sQTGDr&/n-BSQ5q"Oo(BG\"Wo)c@QC,X^>0=bj??;:jsgUI'SjkD`O%rUNaigOV(=HZ<5RjbEc$#ClFlrYI^21c2SQ?2s?PLLPX\/a8?gbI%"&QZ%H'i5D/1p1kMgGFonK<:@!aXq,a6]mA_mh)G?/>YLGj%rIK8]qs<;%2f=(olas>R7XsfJqq?r]*_[D-07E<F)rH+l?[;M;amHe5pAUgkQef'AJ,U.7g%0`h^&Gq(5ESP+k+g6RG"T:T0tuk<%]3!l?[L3ASnT%7g$hO(O+23L7^+VBHm4^,H/D6@3DoCl0F+<_nnG.8f82Bn^*2=A^B(>Sa32tW+#cUih\i5)PI4O]jGj")`(]&@C%>>H<q1*>>#g_B2]fX23D/Ui8j]><[Fl!^>mhYI>Eb&Gh(60ub/?;#)(bDdmZJd2i_E,aoQgV"-kFG%RFEX1dj`)([:6@SA%m[(\H%kd,O.;KdLIg#,]nr:aTeXq$5,MnM4e2"L3hH$FT/JbeMj5E,F%rp)N!)t&,FN;<<EoC/Y*2j<r-d?F<Rrrsh9NHDE)o&e@r^GUj+%Cjbit:Odp1j3s)be)psMOM>#$k[8o>oT.:(G]^-+5/-d\,*i=Tf5BHOJ-Cc\q"J.*+CKiP9@>ahT3o:sY.abph=QK+5J-LPMt<pQ%n%XhLNMjO=ii^&dnnSRI+Ua.?En0$]rS*+iUF1Onqt%S:\-$er*DG8WfUq'3rF,<>5L99YIHCF>h>:o%?U(n^J,A9XjJY<>m79>s%XhQPl#W-DT]MoXTgc?79rG1?7rF97"h0/Ca@5sULI.,YD&:8%CZ>m=_KPoV\0?22]?\ka1D9,@GT"KjUJ>50I:lA@k1"9OG?f?sW%`BX<E"9t(Ej:-]#1Up3@p-nuRl<BU3Ct#SE@af,WbeCq3_*)t>.A!L#p;8udnAK6L?Bs\hBRWs2\8/D=k*(Gg#DaOKo'S$uQ6!!o%V+(CD3`!si=-6TlBHFq]elBOM./pQFb_JDgI7O9UX8("i8uM+F9,PiBLLRjpkd(KEpEIl<Q&k?:B`%0bF^@LSiq"**iK6e"&H)IO%A[+Q#rAKl6cOUQU&M3:5If6R'HP?C)B[XX:")s<i:$:q)Xd-ThqS<>TE8<g7E`'%>J=cf4kbeg'h"Wb^qX"'brjBIZ%A5DbJUi,U%A(s:!`AmbNQWFs0=DMhnXMqeGL$/A]j4E^_5H]E_mJ46GbTWPPlui-X'h9jYDRR>F4M6oFlp3ZO#Djfkr/r&1E""DH:CmHpc"6f%%:&7q0dneT1GIPD%rgj#Xms"3X:V<nBT="+/Ab74"5NMRN#H<Q@9_O6H:2O?bMgeP6f\[bb5MSWnJGoG'QW*^.X5$qJhn=.OI25AG%^V>0fb(Fop\GG:^Rs/eao:c1Yq9bW0hYVo"1$N%`%.9.\L[XH?q!*VbcpQH&fA=NPUn9mLpW"*7-e7Ze:E3gf8a,#aml._Jh>HC4%?XJ<PcMRA6[863JYCRo,,aU1@@Lq/@o5F-O-Sai&IihtJ'$3D/RM)J1V0`'ZV#uf.hEk*NJ%\bX6L!+i-%"L*ej<NoJ`lt^cNNLt%>CR!:rnoPt/I$7gI1fPo@FtM+kM83fcP-!J@EU)M;4YK"oYJ:F`l\7456+iAi1Wq!BQ=hp!O_hn]?MuL?3HGea^t/q4aHeEc&^b-%d3Q#?lX91o,$_=lhk-V2Vg.>S!p5'IH235R8B9XZI>ZE;lqU2!XN6l!]>-_?-VesN5iPA3D0DU;r9=,jp./NeJ+)cIXuH5`(X;rE%0E6KEo^]>T:S0at^40kcT6jYBh(e'[o>`M%]f\@PqWNE9h0ebVn'08O=8Q(nY?^ti`go2>Hh6IKMoS?bQY:/YGoL+"@_`,bNCi7\%F'QKU9Dn#JgTQ&$mXq"D1uH!UXU2Z9a4Gfm\=X8X\VlLYc@^`=_mrG6elV%k])C5,q"6^H`,LA??9ae;[2Y112o"-4G9c?708$h6%_)ia""ZC:CAFKG@="_#;n"..=jioG%1?tEOkE!h7d'Kq6f3?[Y5BcT.Q.o="<dj5Z.7V6l`PYNGlVik#fntR$@s[^%Qn6p,+1)8!%FCk?^jY2rqFI:4IT=XCYs5](:_]Lh/j?IH@Eo0>.DYf5Wn%P'@Q%*LVjeF1e$S26<5k\l/^]"7&6@_#HOZ/Ve@<U^HU#t<tM_MVI%YRC<TlePS'[?j(*5pYC9j`eO\ou.Z+NHtO69\UB=m%Z6%@^AnlrLMQ%\:VeNSgB6:r\DdOf4nd]L%dh,kCV?D@:[@Q/`1o3XKWLY%hg1%d!2nE-(PhIF"51Ebr:QhGIf-p0P/uffJ%u!T_s\[s%_Bm9VX33YepmN],c%'&Cp1%UNe;Vlb?O(4U<iPq(H6lGIsXVmrO34S%R=;dK59&Q\hkGT!!e,1c-VmHaps2Y7<mN?E<>_%_q]$[MI?T.9HM*t.>S_Y"G</"Ok3oK01].-[2Tl_AIHZe=O-VIF*IRLS'!^73%(I!ICrA"9:]5N6@s(Lt!<^6?C'+^HP">38q^:<k-2rEH$H*P,'ldgi`Ia^(`GdV7TUPDnQ$6D4QkPM(V%4J7;<0]a?"$?G<n(t_R%`XD)sr:]uZh]ut4p<AN#p$W1Br8W3aNOelZK?lbTIsC_d>OhA>+5ck`j4A1`pZLk3_fD"IM,'s$`GEXM>L`5NUmN_OB!D-0-cKoD%0RN!/7#KZ\@J7uB824%_<K"^j5e@3M-AS\*#Xhf;L;H#t<?TH\0GI2'>8`7&4q)#kr;&[CojK7K\'I_jb5*e+SJ&1a&7p8,$EjBN%5a:<>9%F3@X:I[,Vr+L>PkAH5i/fsrlYT'-b*Xu..M-0>(s;B=Z"q6R?sV=fU9"kmOl3`,JLDmg`\%We=W`B]oZG^8.-ncIZ86Ym%+NjO7P[j-dQ!l)K4Z4+4Z9A\.r>tjuq2+juU-Ot9@4:('?Q4g,IO`M^>98U+4q'l6i%5F,3F6s[g-Cnq@4:a+;7hB-lbcOo)BQ:;%$tV0sD^5m*I2L*P8"L"f=WW<\3V&%mPkAH5`s_HD)hq7aQEu,jlbcP"LIXN*HP$-Q%mrAEE0"QocD'i'GWARdj+O/,ZX1ot+(t,U%8F#&RiniPfV5\fF\c1cUC\!8,9Q=+=TB`1qhc?=Cpi:PBI<=M4qNLb2,b@,Ij3l]UqRqAc,d$sa^OAhfkbBd?rp&@THS59nq$3b`%qjbk$q(4Gd^5Z3FZ,[)C'VI0#p.9l9/01b:5J'8]cKk6(Hp.FSf8t?CHu5MUi,ZEc7:ibM=5J.VAQjO8?WlJBb>g!7]O`hjnG/'G%p@ce(Ud_O,@>bpcm_=SV8%1[,oB>M0G94MG:4/c0P/`jUOZF$@_R'-C8P\.FY<8:hHTh:c>aaqfIX(SoDu5=a)Y<Ifc@to>%jhPY%4T*=8([p"`=q;]7q<>0)-?s6Srt8PKN0PX9YP5uorVI+br:H1MT$94O5C?6hRua+\@6Lt^STFNc@IMZ0c\onc'9;$H0)qZNBX>sa%Hc>.>Lc<MXT,R<`q;ACIdfUgZ4Y@f/7r1qHopak':&F4F>Amkn0:eHtS'1j,o[_?\Sr]*qou?sF]&r%6/jcl(O+D.mj9,AQq(\)q%p<G<cRla3i*/*9%9:NP<Ju#qDPNUBV:6IH#KB$Rmk*@@=rP/+#dV=CjoDXNk+)=C/hYHaLq<I1ohg`EDmJZ?@:S'a7I.6$gQ[<>:%rb9eFnF&!t)r'i9[S=NDJ0$o0HgCO9)kVNMj_&f;Fn<KLiUabSpTIhKq<I+k8$AMuGlHX_J+p,JFRR\r]6A/\?eledrm1PP;P0ET%l%Sc]$fFCcTDEh_YM$[VrcdfqW=.>W83_O2f,Ro]NVE=pJaZ=bpZ[Ik].Tn>*AjpA9h[cnhO#pk+'JpL8O'^u:##'mHa),k85d)"%9tu(GIeYK\s4K?UrhoWXr7L@#L2VOOB7b!o0DA2I^Y.r7a$]b:rZD01J)EQj1,A9chqu$:r-obMHi!NSrft+AT7S0\X&gsH5(Bm<%eq9l%YC:chkgb=K:S&T'+(+sEr,MSNfDkdorRT=p2>^Ih4F6L5kM[@5?9UT"q;m7L:]LF[l;bIY@5IlO2>BC^A9$5c"4V<\n%tUF%5B-M`l'#I]Xo-%TEnm,RY'RUGli":g+2@[F7%H7aHCL8TlsI=&i^IE8cX&a1rBF*X3lqa"*4YqtGFlS'H1K8PVlu[UGkT,6%j&K5%n9jUalL1gF#lQAO_a!CZ_l*NUo[U,Ui")GEGkkb=(UlM?T\dD/p%F%$O.RH+r7?SG;8%*='qn8bh77gGO3RV06?d[FW,A?G896Fk%StX"QP2AZa\#Af@UVEBaH%,C1s8%6>+^!ieVnXl/a7A*cli4Yjhj^OeJ#@eQrYp;&o%]UGq[SFen[>hrQ+^rao_Tbc51g?pn6H,!%3r56C[YcW*VEaRtqYeTollUK<qF%!c:_Nn,AcRfd%j9MZ`&A=[*MfIb&sh)p&E\W0!:(,R9*9FGLT%J7I3@hMa`,V7D'5qI)ag!.%,@b$=5ko@-UGN,IhXp]$[Ec46`Pt!VRc$5\iS4@IHQ.]8\q<2B-)](2c4f>FjKGqIld=J\TMK&Fe9_&"9mrhBUeu?gSk2*3GTpD]%q-=*?_?\gP4h[a@e"ZPh3?'MX:#BFkrBX!GNA!3qI31V':"/'f'0kn02WtWe>4<\I%pBpC]IdgN),8GL0msF3Ll'UXQ93q,kYC=P%3nHG2FS[#M9G9%bdl4NZaRp"G6#&Yp]NW#;rU@q9]0O4uXDME:=H&!,lTuP$UU6!ke=e3\)Z.&;RZ)O@`I5Ei',H"/l0X)"^0+rV%lO)q+MTG[3`#Xpnds(^1?L-MZTPN1j9\lq=^]5;[0kYo-=PL2G@@cX>#&g!n!%*!\AAXL+'tHcb0G^a6K_7*c$12$^\<G5/PEE:0%$t^H74YL50j^]HNUQK.$5%5`Yc*TD=GGgR/hn%B0S$')VG.k0QAD3MmGe3HF%*i:M[,AA7Cq@X-0r1S/(;]Z1'jq.5_M4rJUM\tO%DilJ/?98;WdAS>$buiCkR:7^Zs5kA"M26LB*OfDh=l'S7oTSO-`jC`1KLHO[l:c$Y9RGD.O6G]hH:t3\N'FPL1INR+f6Y;c$'DIC%[U.$ZN#`S"Nh:-!LF"Kk"X]7X0LfLGFs:"b1W(RR?$;75Y'6213rFQDm<t5:l?de<D.KOD*>>s41[fQ_dnDGIo;sgSVJ1u@:Je9C%/=e/gQR:.)@>OH<o@njD)?q]TB[J)7:)p*X)buT^N_:bKSk^8\)-;l(-BZ@$G!'M##!ao<bB#!X4W\i\R$ZLYo?49Ko%8<D.ZDKE%,M&W]`0gt\@bVOHL<*KKaIFP;+COOeDlU`O>96Gl0t$G<-M!g^EO+!?N:E.Cd+\H7c8?_2CghV+(E]Bu:E?1=mk/LURqr<T,rgr4%bl\Qb`"BUL/`8T,J'b[=;s5C"Hiaq?D'M_R_@d[CZfck#,qPTH@i4NKcbqK-.;sg.8>K5ll[7d"Q\6D*L]Jn]T8DDd&d8p%R[329%doh,tc@#]<N5Rhq_M0H_A,(6$Y)+TG58g40+YE4X^s`4#jgddF\`\h"2''0Z1bR4?8bS<RP!#&7(kYWtkD?pK#qhHuV6kpOQ?j%*%`Y0%Q_^*8(U$%bhBe_>,pkhcc&YrQu>n]>/5Z//.%8U+.gYOV-8X%"%G+Fo[,"^-"OHb*GiS,Jf[=8"p[V;h)h`t!DaEQUl_7&oT%>'KBG8>-=.,f)6=9>:tA,].Y.PEuYLP6:4"Z%[TmlN^cD=Z+99^*T3W1thJI7\iX=LH#Ba,9&(qEL9#SQnt3[.h\7YHA`CP/6dai%=i*LO9X[HSf9h1<q5<>6eG(2nL99.:r>&I18"_eQlUb3t2@dKm\7%3V(>h'`\Is;s*H.al([tPZo^.rWg3UAb.2JT'1r7*]&si<2%+O#B*KNRP-+DU+eS%kN.as=SH8Nc[oOI2.a$Sj1(guD"XL`?N%^4aM?@FP=?i,O[>RhW5i8;(\sG!X8.X:>9i@!2S9&j7,jQj1Et%7hNdl6l*GPGf=KXB)#n1RMm5=OKdIN#j\6s0g<]L?M6uF4\O'ampm)&,jdnLP1.:"0;o7QhPP]sjK0"ca4dV=V6`_@r;]L/Me5\W%<]CYtfEK8UP!AK4b&^F'$hVk)9^GK//0@@1GcOA`KdWs1?X[7F<:%T>3g/'a^7+3?/+eqM`$(K]1Yi%oRZpmj8>h,.8BN;r7ZaEj%TtM2'`!,-Rl&_cF,0Y:rH=<9S],+.c:@$s0ai"4]k=&*Uh9ZoHXJ81XaLjs*W6,Lm&iXc&mhoW'CNhPbb]\>*_Lc,?/3!b*CrL$F%"#)I4`&%*!C-rejLElC]QqaZKl#Y$oM+cp>CY1+gJehfJZ''NH19g!GM*dG$$PrN>*uZ:8AjXikN.`?Gf*2Y24%YsY$m/1@-9+l#%^^-,X09cZSELLim):V70$GShLh4f3GAdso['BX*BF\3@6KVmSVde)J^`09#dL:LXFg27isD4G<jTK[iQST8=kBk8K+[e(<`[]D$R%ab[^&ADE2Ae"[HZ4ZAt)Ce2<:=L9!0@E5VF+:&bl,mhg.`3PLQKp^a,YnPe6nuJj`KAECjaZEpfnoK/kDgA<J-M"gC*:[,=oAk-3%'.MuWN)hiHU9f8SlKC\7CM:omes/+<COMk8ia&nu_me+oBR;ggZ3MnF1t_?DlV-7),_F5rQ8E^@Mr[2_UP)d6#=A]e!S/q*;IGq8%)ra%?BR.m>,ciXt>Log0;oU;0:Qi6l[EYt"(t.9;M+G95''@12OjGG4*bb_6#&/+sI$$=k6bO8$OG,Q"5'`XMehHhiOot0N^*,OT%o.2r\h5kLg"Mm1LYkjkX3ns0r8Gc-f-Rj9Bbe['4e%mFDj*V1Clo63C?;?9"%<M&U0M3b@11]dX8X"8O'%XFs>$_C86:o4`"<\cq%l*VO8Q7Ssi*K(e'gWF=?``jtskCubZ+XI7,L0.)D=Pp@<dXiIb]>Ut:WtSo'_E.9ifWp^>WppOV-tiuuqWhY;p.H/L*%2+;RXn"j%:t"PJb;Vc.&kQ`"2DE5)3[XHomXQc^)YO0sI)p5a@ar2bNq?kN0fCqo/IfG]OC<e6g%CbQF=slM*`-*oZ*](![N0ACKJe0r'ZO)&%><@'`6#CF@c3Rt,Zlng-mS3"PT'mrUnWU,bI!i925_rg?D86_hFt9Jrm9"aL@jeW/9,*L:7+u>q.OcK0HWb%O(.<&F8^#7%bP,ft%Bab@(C6(*h-T]XG]D\OFT&3;,`?_h"r+T-*G\\[m_bD?<-Z[T-@UNV^R5%gmQGp'/b&jD4bop!nndf1Q7\7TEnj4Qmms1U\;("]s%=sai<^@m3`CK[&[_&A`JV@aHYG!HE^fuQspK%Ycq6:`VQ5:if\4,+?j+:9</fjRGm%TZC'+]1/%lLOpJ1q@098Gq7oT0f>og0tA/%^16GDe^7c]''M1*7C;DM2M`AfClRB::.]E31P0-%As,?(U:t#K$"WR#BO`n*gFoZiM@p524F1W[YR$uE\1`,Jdp+c?$jdB&C[&s<%UXP?YKg#ti?_i5Rg<r9;##3!qK#D_WrcEq>'"f)+q*?B6@#"kGHtY&p]/[SY0Gq2J[Xs0U[dAiG-AKhO'.+j/K\>4f1B`]QpbnM"%krU#'Ti3FLTbHmK#I;$sQ#RTS>'Kmfld;)a0U<[:gC^tT9Y'EZ[i7hr,%PHU@0VI%\?jh'2Plhk*VB\aFK96_+QsPJ83#BofsH<_%'aLT.%8VLi=OkJf-Q$Xbg!8'/:(1Y*B'?.D_1iuL_LZ:9f\r#HG6]s_a;`^BQ7Y<bb0a"j8eb9\jeT1l;7#cHO:rS6g=jcJ&%>EV%dQmd?82UU.GNfYE&ti!=Rkj6T:!4oLLKNW&1)X9$.FY/cbgWUrP][gj3\QlcUtu3VF5%7"c^HFEl*=Jf#MV42#CU&Mc7lT4^b7VK%Zic:5SZBXORRBLU."'*V&1f'S#nJ0ZU`f_:B2`J1PE=0))T[Z"0\`9nhD\p3p7S?,gZt76j4g41UE\0>e-?67-`)cLO1h6i,F5cD%9:4pWhLV8-$']o%#_7Teg*Y$oCi0uBDeJO=H4n.scYp-"jJ'-s'';U4EkP"s#rO!:p*.-C@.kln$q=Eg#S3MTHl6I2AE&$$[i/'L%ndMC0ClnZ-0Q_[5gOf,QV1tR8HAX""(u"d.[Msf\qo9`@A0cDO&42%-D0I)s6'f]!n^fKBK=9/;T1iH4O>PFM5_>Bp+\H\*h%(1P%;ZoZFVSe&j)]=R-i<`;pnMX$Q\s'Uum<G,*;P'247+;]O*5$g1,DA"3N]c,=7!2Bq_)^*cH8'G/M^-o3Bh):R"[Rt4BZ`H)o`K]2%4MqI<<AIH3"(GR&N5G'q>Bpj?Up632TKJ@FZ3q,V/O:[(G^dP_nRT1%=H!^(Ce`62,:s@#GNQ\cA3+%aQGcf7DDTTUgLInB:+QtP%j]j.^[S.@I21.)@)\`ruBM]->X:6-m'ANG*droQ4@%kV&$/kkcLl4B_VXqZR*#jo$MQgQ>US&51?K9*80nbRJ[;Gb8@D(7<)`)`e%_-V*),e\,ALIW^H:20Y%=PM\R03e!uWAE!qccZV!A!r_=':La(2PI>ob<b>]i$]_>8;128;@8lbJf+=<8Ln1kZmU82cG+G%i)jCU%6;r8>Jr^BAlFH@PA^2[8B]c!I6,oHp:,YpN,).d=I:*.B,h!$hi@%G7M>6X4`*-TS.-`'/m/US6A9NQgeAk<mI(n%.$c=@@('k?W%#>(&Bbn@uSKB-$WJ.!Q)oYNjqY>87uL)aVRR@%A3/DH1!g/CPciASj8,*/lqmQ4WMO\t5-.*%o/%mD6VNsCFiEB3$U7546CXqA+%%1Vc#+-t8%M7[X]r%D[nD\-B8_$9rKH0BOKH-9!4WU]i-d_QJ!b6AfJ)@g:$=![l:c''JE1l(V"@G;pFR3]8[u709E4'?#=bG`MpJ%%^!6U8bi?)d#)hT,:OQi<8VC`.'XpoFEu;dQ7#.-[-;m9p@ojB*)jMng*ko>W9t<FDCcn'SjWS2GoV"l.3O@h=]4'8FJ^E)%dYp-%Ot/7X$F=8QQ9EA=OG-`RTe>)a88%F"o*fHr8.F^Q45[9u7,G@[n6j]T#IV@CKjI&m1p%dkZjPlQ#fL.CC?dl-;T=X_)T?+2Yb=lF%^QH%Ch2S^P-Vd1&/=37^h2'`-eL(.C>1O6]B%RO>8G<$M6:4,K2[no#WG?AIHXJD0:JVh'EA.jd3HhTK5UjZ:9Epl;8\AQ1%'@jA%1.=Q6E!C2CfRf_n697]tC]eKN+X,ja9PC%I#WWi-n8%c95YkVR>DmX.C\Ye]#hI1JktsES3t]3CE9A-WYjYf)Z8Ic*8O?SJ#Lb36%[/gZ$H!LQU2o#hrNk?BU2"LajRQ5cOM`ZnUo7SEXRq7GXR^Xu#rD5@I=OT_[=FkOZ":_K9o1[m%L8oNW/i^jQ2/h5c>ZRkM65-8^%5Yk;&>O[K2`$;;X!6V=P6G[]pP':-(\7`?>69rpX:CtRnU8aZX#Lc`>HLHQLT^a@;c59]&ZKJ-&)O^[R)qm6"pnWW=8oBab\<X"1%fIS%u8#N\X1dgL=R;_&3oaOh]cPltq"$\.F_(@-R4D:U#J/QBs<"<,5=;!H:Fuh$Nmja=&":o#c2A5URRhmnT$-O&JEXUAnJp#_,%gk'6)qVb1`+Ss9!m3rSB;Ese5H\cSUH("Dk#FiE[2YVG%*YR.npQY-c%\!.A!6TYgTPXB_g]l6Up%3QK4!mR^q(t&DSX<Y5ZNq)8%'tjm54[r<E."nG<58#+p+EH]CBSTQi!A-o303$I7e9^"$8Q$>?G5RUjU"V($#IMpuLoN22+H+#uL%Y&7BOY?]3h6uAH\FD_e@3US%f'p+H$FXX2Jh;of!Toa1P8ol+9\S4&Nn$.#1tZ5=Aq75kE=$\gB!;i4a]K%r9W2KGjKQj]m=]&*ig!MPR1PU$6oj;3bi!Z^14uca%AL=c/X8ChsaRMGS//.C#Xk=3-"H.C9R#u>iB#8`.1(tFukefD31Ooi^83f(eAL>X1P$:85T`g&lOl/5N1I/%!KH>);Aq1;\0T=2.%4ms\'4U5T9[dPLVOomMfO1Z3pM+5hT'S^Q#]7H@ucnmbm+qQ#o\I-O`3aj>cP=.[C'MIWq#?WEK"_J6@SfVQ@_V."('>@0:+%m2b%r*%2ki5eSkL>$'L-H\HVR;usfHG>.pF(cm?O'u]K/6sLm3kJT_],R1FRqXr@'3uu<g^64`4/&),@'q?ViO>;XMQ"nG(9C!"h/I%>%_U>o=qDgB2@4F*4TfFs9"Y3efY:#*;-EIiKf`J5J*95&4RAlN7Tp_U9@MP=LRV^g+au58a,ZkQ$9_20hblm%2*L_hq4+_GP"ut=o%>+Gs,31o1aL_DmB5m23<c%H`IXn5+M1P'[bLM"Cu$Utc"8;9R,g%&D/cqFiNEPp-sOJRSB+##d(#?VJ\<+lcdKGM1;(n-:oFXK!Z%@ktJZ1LW,b+:>m'(tLCF8Z+50#o&FtZ'ccb@PcuiE<puQblkW3MNUOt(S!f>8JbO18Z9*^M#9h<`p^oZ_EM[m=-t\5mF]X9mDNV6%h&)UYD2HMjSK!!cf?l3,]<Rd9PHe`.Vd8?+`J$meBNBgYWaq/u:.61rP)9U"e-h&o<)g4H$h7fR#n7&pOj'f'd#dWs%-CMgi2iUa%"#4doYgrq3-&Z1EGYA[nMBbK>6+J[kX[8+:O=[h6OhkAiLS?[r;WO?/'&MRIHMMRso7<!lG+]=qrmCFK5"F92(;J%,"HnTK5q7:u%7BXGn#$WHY-LdO^MTW88L+c:(fQg=f:n3@Lb#HSnf9D,l0U7Kpd%#rMk+nC/(L$#`9so$h.RpRCVObEE:2`Q"B'V(fDR(9NfmuGN%BldAp5FIOK0=Fig(j2r+^?A6ifNVh8ArR;fqQUe3N1PR*6ZjTQ6<,506?=>#nG@r"5u'g:DVoJ*KrCO_F9>ZW8ON_X.`k%(]bF^[%ep<&/gL.2A8m)<>OJ0b-S;>mmqi'Q&Ea0ctPt9.MM5]KaC3_Mf5Ya^!W(o`$TU^fF+*!IXc,"J^\J-QO,bfn*Y*3Zu:.,6jEppFH%=.Y;c.I8>_Dt%;dPuqi`9%p;/1Jq"5Z_Ht&m2]"P3F4f>C^oc;OGO<D,"g][c9tZG[K=?dCg,DoaPR:$gq"mH2qo[0UO10-=Y_cE%f7j.'A>2CiQ^&8_S;E-Q_2(7ET1!srTB,oJ30p7T'o$W/&[K:Z6/UqGlqS-W5eW-ofQ/5d9Q?:lE[!!P,Ht(^M5YBD9otl#8OQ!n%.Nua#L^Leg'`uF4W!ZItY!R1RWbO79U8i-u6r_^YS;<&#\AUduI3$54`T3F#;.3M,L_^t>MrPm)S^N2gi"a8TjZ5K1fu*T58SpnE%#TP?8^RXml@9;NK'2CrLh.%^fPS6o&T<TH1&lB=b5/38:W]"`i7,?\Y/'a6K%V]&s^\I&H<fpbc6p[R!e8I-2R6)B$b,LB97n=B^%UEn8tS2SB5o\^6o[nZZ1R']udaVCBi:+S&g/fKS!d6'.\.F"_HGnS>bOsehDa"p&XJE<uQa<A2.r(`7(V!+%4Ls^9!`9:X5a&_mu%`n%F_3O[oNm2A$tLij^['Xl@)8;Ro^FJ=CXLmsPY9oeCti5ZMK;#gtP^MKb-L;sB2_+_bb#,a[PEd]1PITS?HYB?")9=u,h-A]($%`39AIgM`QmdnD+qE%'BcXGIQ-_#tP)M="#p8L9V]("JM-K\6HCU&u/se[*+""+NCLS/B1dbTR?W..i7^@7q2o4\,Q^:j.9.Djqjr%@1-CTgp3&Z9:]2-qECfe";:)CdH41R$O`f%a8O@PXIEU24P!#T7JfT%>@<a4"t7Ip-4DHASTls+Y`DoLD%p]86^`98oL+cgBd$no%9[(u?KB9f"[\ECZNLeaOd_tKni>10!GjB:#5u2=bdS%f[EPp1;N26];"t[/K##g4&_5dtAoo:fB5sQYR4nOO[nXpT<4<F@E3?h4m%3adnP'*lB_R11`;_S#[rJ[=f5\OJ:dSLH^J\+n^k,]CMfomm3l=mI*T:%fh"daC!pJ's$dKNQu6huF%uAcP.;1U=A/9Re650s-.n%?q#HW!fOTP,X4gH1HGGc::%&SM_m\t.54rK5"GbQ:eF>^1&H!iFi;ocrc23kH?;/'NEdOPAb.1#^R@.#Pk:\H6\,if&%Z*47$*S$%^=)b19b+kT+WuaXp?p"="eBJ@JReakO5^2J$k\K3>_J(BnX3.1.XKCIp_"ad7O!uiaWAqGWNEug!f7;J`gjf'gpS6G00mg'#R($S%J5`d)'B::)7QIU]@"a7-.KKW1Ch8[0fu):t"3Y8BBpXn%/hr5:'d>7R>@g08dBYIM#H1E$=%A?%;@ikP80!qJ#f3*$No12?#-hG,%R:d<E@oA^Z(DMiEe=r:OY7C6to][]Y0d&pq_gr<ZE/068M$\2tI"T7FW,]\a?l0/0Opi(X&p%0MO$O7TnH6c@P#2sI08!Gqc,0:m%;C@AI/0fE9)X3t5RNht08e?;b0nqOY@aG-7$(4e&2Rk6S8.rWI=:-MN"UfIb3iPGu%OjkMX+LU1=Of;@qIUQh)`_:t=nX%jP3E6K%a!k@9.q'2$a`J0mJPfL!V3r)L2tIDB]@c9AD=BW[-\fIE!G3cI=%tBA>]O<CAB?\sd2AT`ipg5?_PW#rE,889L`ce1nuJ!6#FGr5%Bc&k/):51;namYD^4<JH#,Ve;gKRe'+eSNfM%#c%B_ZG=nE?hOi<qm+99u+/\KP]LVJGD#UQ2[Y!i['Ph/n3&O`YH(BPNcfBWttg%''L:TiQj-YaZa0g+ooFnK8q),;nY]cZu7WWJN$aOd#/#]ki`fc/27HYcq#?VKNK3A61%g*:1NM#"OrXo-uJ05M;9IO*f^]K<9SjY%3->FJ:\A6Za1gSPLCb?`iYT9WZ:`@"OO,50,X<*?@uPf<$A)Fo7d2CSdV>Pod<@\f%1J.c=31!SVE,i!?K04&^RY[iQ%#']EQ%Wh%-6\!hUR.)45[i6Kb;hDaj;URMcl@8.,<o=!iLZa7-k.0E?kgU6pPisD:\LH<aCiTY(SO#dj>c]M<s[<VQ]Q9sbJtS,N7Q"'>:dZM%H.!fq=:tpLLS5t*>[EF(#rkG(QW^G!XOFE^9,VN4cF[67b]MPJQLK:7(\ZatY^c,r]t[?F(Xs^FP3BZGY[:6!2h6&VR0=dZ2uj'V%]UfSJQ8O)@&oZa14=lDA(l&g!6]Ar15SI"*6T<$$-4Fo!*31iZ1'q&*M%inocDn>`FOH\)Lc#_DlWqOHEVM4UOtoZ6!8d<*B1DGJ%OC7PQV&oSY)Y56'n>c`[BkS(8gQQ4nOV8L_?Tf3rj:-rZ9=54;@aHG1=?7Qe=X:!L-3Ib:hekcb_^D/M:=%hfOB[cJE#H"+FWm6M%Z2*-6eJKdnYqG8BZ8<)gZWaOdHlJ##I2G0$AA,0X[g?H^)#fDS&6P1<Ab85mCKao?BNi]g7'l1pL*$.0HNR5a7b&_QT@#&kfB['`%hIM7;>dT+Z*+:N$,DNEfF0Wha\#;+1oL]IDPQClMF'aA;kI2BTM@8.*FKZ#))BaTd"&QkpSo(5cnh7ei-n[of<We`-:mB$`5SMn8%85kK+K;0a#1-3uBn[LI%.1G*g8rBIX$pE:Cr"a"OK<Q6&rG@?0Oq^gYV9f]0(^8lsD[^<<R\,[/T*]m7+;a+\1[\FDc-_13#jRAY%l*851Fq?QOb@lP(%tJYYQNWLg@4gXiC:*"8)Sk!N<Arki\\57lCGBUlcAAce'LFPl3'SS8CGSB/:)]clahW-Eeh4=>-5m*adS^+6%@hSl[`Ec5N9RnD,2t%6;m_Z39O$%(_-+6sJPhnq>1t()98%+9t%@!,n/qG1OGP#Fh0'Y\*G.+WfP7!1UoP'G[%FL2WYFnC+GWYV(%i-8GQ>TB[0iQ-A>3V"F@pINdqjT>V9jlaRY$trP.=:7CY':5C/mETcsg?e4kaZ/gH(==)QDa2ophJmEeW9iU9AI&JOB7TV/J37b*%A*LKompOM5"O<tOH^/D!%JHO%lS!n1Opa<L(S_?-ot2_1egF'60+/-bhp[3o?A;rcMMoNt,@ZjU9eS/h:9(<Laal'BM'T>&TMlCU%(@).A\%tS`L$^6n/q8JuELNCG"C3La!#h@Qab7*b\S]7ofCk?a-K6Ne0360i+7^PA1aEV<4b/>7JQb[QoR/+aUaOu`U,b9g-\4oA%2/HY$9Ysi!>Qb=V=i5tFK=V:QNlcl]M_SUUVsA/ZYXHu3\kuWjrf!@ja5pn_Ztg+ZS1>"`C^YQaPY$Yi:I#h&Rlr6[5%BgW2*CB4%:lnZjEm>Ch*s9Me%&8kd.YV+H%\<pg\Dt&P9su<@-HtR#/CDLg14R*L@+<BS1a1F*e&Rt/`-<d>L2VDE26atG1#-nJ'G`Ck3[\:>%h"+Q7AW/fBBa7O-Qu,4`0aQ.5/[R+$oo9]#!VM[c$"!B:bt!l$i_/*+b?,t9D!nb-m7nB2CG6kD0UM++P-GQPM8])?Y6J[oL_=Gr%Ji+n:8-!X=_`4)k"fii%Dtge]O+'u[(nZ039C*50+#bIp[o%i9@ib\<7/\k>(bJu"CWRM?05"6J",3);dNA]9j/9$3p7fW-d)fOa%cg_-(,YR&),[7BL!U,p^\"+dl67<h"1@^U9K2>rXYJf%hD?Hfi"5;f92p0R'^#ELb6Ye7Ah%6)gp3]?*6fgn'lVj-g!u6tS`=dn6%6sS<:-#YK"qd/uML]msg8qedoahgBg!N_$5!>(lC&j.U#\c>Hh4bk30q1P\,.1&bG,d?G_Z\%8ZlXb+dD_FR=*4?-+'PN)O`J\H@%KDGm0BmmE_o91eB[p@k%?FI1JI(6#;H$M0dXVD\,Ccg>O9p_WL7JCUQ)*5*:n1Wcrj0tkb!ao:Ydh=^R&pH1aoTpt:^fYs%-tMfc%%^@eWJm,GS6AqPek]9dbCueE_-jp6m,`)`#OGToe=.mrO^VV)DYb1^mZ's2[ZM&2"(j0.ncNm15,Zb6:/Zk93'$"k:JW<7I8dRO@%JjRD^/4=J7J2JMI!7:H@]0rI0R+#c3rV5>m:?iq^Qt@0CCRcjU)0[Z*qb96Y(,AE_aG<rHYVHl-VYZO9Fjk?jiWZZ-"raIEQGj'L%U9M2FR>;<&Ei`^c)Zo4W2@dY083:;SWPjOEZ7'(uL6/Hk'sRePjGa_c/2fc%#GmLsYlXd`btr-Tisf)P:f7B0*9.On-Y!DpM*Y$,%#ccZsQ5Th]j!(c38IYu9o2h%maJ:&CHc#ME-apN/2$B`T6`*BlFHY+LhIcXnOW$K]aNU!I"s@)[Ojm82kjP#BOJN/Sf"TTG!b*l6%"Q+p/_Cc7hMb9"kIUb-fhi\lH^j<1q#1=R05\<i[Or4I;q+R+W[om<n:H&o8OC\XEO9V+GQMe($+>Zin$F;$7&G7-$%&bpScjfS`%MB`L51'<o'-1[?j#0;E?IB3\U@'qNtna^*9Z!QNPHf-1g9"o):U5,$N6Bc!#/2'9R:a\>VjTU>eGsS-,?3lN9q@n2U&s%uVYE\.&%!7rNS.`h0Il=JF98-0Gs9L`cn7L70FOM?q<bunAoUFtO-&/<l3?S\r^R'@deV^sGCR:q?7!bNY=)Y86(6Rc_p>FpM,#r*:$\,[n\%CUV1c3*FW;`<Fn)\V:HL$a:Li=jJWOKUAf+B5mtE<[T]Kikb]=j&Th/(SF2ME@rdpi+\JI3*BKOZ]N6//2"_O-nqHQ$bM@+%254)%UEOnKnJEQ*@!]'^T+T0,PThf7:)s!s@"@i],ag%g$isfVF3H9D%$9>qMA:[G!=1WZF.`[@#gfmE:pbc"Z>BMJOT@QrH-^,c!Hp(U%3f:uY/<a!fZcK@4)/Ei23n\2Wa=pn$:IGDGNK.h=_i\hk-r^BXZuVNH,df\3jpke$PSIqp-[!E%=)&@NN%'s46*s!,%'"Scd3$Id%=@BK\cV\[@$WOYq_rie57)Lj12bN4nMYFO>6C*9m3no).)[__VJH-(kfWdE`/>5?+31c#m4'8T!-ad`X4=a*f@YHkCF,-,sR>r4[%)hK`$[=on,I(9j>"S7$aJe]sUK318*ORuWeJJ5OV3&Gp-_+6a@>Q24$;pIE6bct9,:=;KL';Srh/:jK1%GFSK35&.Wmt(,m9-c2S%fh0q-BX(#'.EF_Sgag*M`u@W4EfV0m8hhs0B+^4l)V*sa@IM3DbP#2bqUlE;**!=_)oltmL'?T&g9'QJ9.[Fj4pe9]UGj)P"IK9V%O>F>1QdZL+S><uYc*kgiImC\;ZAT2H9[gSXVbt\-AiId2FcO4Rh&n9d+O?"V,9nQ0-NnE_nrA<(^Q?W0OBoLmKsmY@1^NcMPB7\m%U4[]+$+:Jg(Ci]jjH&@1*`*o8dB$0>'pNc#?%Vhcm!(GX=JQn*+_Wk2$*^k'\kH(,&MPX6foU<o#=bFJ)@8gLk]YoUOkdpH^7@tR%?iW&RJtQ3uKWUhE;s8r:Um4p,?SJ@WC]RU5HD)^"HUlI',lFa*95-SWD&1d.*#5(T1$BOu<Z>G4,,"^B5oj4#`D<dTf8FttIc;:e%g4Mk.N)p&$/AY7+<\>@XMi\/q(_`=aM8CQ76Bsi6Xk4lMF`Jj28b'Z_Z&N"S6Ad9.mUQBhQesg6]$'1gpULVU`.SBP'XE!,O4<Mt%2VFNnHodV?L$9HFbl7M+o*e;c2h\&BG7$c4_GJ%8ME@R<HU6SWMScqU?\X+HXmoZj3g>:I?Ydm7obdUI5rhW6\+r-O.XL//1I6"K%p)[)G/JiDJ<+ps)iY^[WV?ZE%]2!4LVli/HZ_$2*mM3"6e<8P.L%oKAMAse&)/FrPKR=aD=;c3HV$%2a84U9,<WSi\"Y933AV=W'%I&=c,!OnA@c*j.N)<qef]@mZid,#q&nC]_B.OpD.k=^\(_1g;!8<N79LXB^fRnl'T=0>V:Ylfa8mR2d$/fQtGPAKD7;'E0Y8uYms%7c;QE;'AXmfZ"aD@^dL#p5S%Vmci3H[S[NV.\Dh19=dIk$^f(M8mMpeYpptLN4R5eB'EmXe<=4(L6<>D3p9B&"]Kj!Rt/XG<&Vab%?$A@&T#,TnA5^BP(/Y/SF4e0fahdsbADn*?"8Nh&048AS/Mp;(mB^Y/p,TAV-lWH0MY^GS64^$ZU^FeOb!&>\QHe0BMQM)JWF\sK%lpRCFkGHF?=ae.@;I/k2q(.i!gbKY)jd;<b!\K$AMJ#<+;_AB)LI9Q7)@$uZkRhI8J8dh8BRoYR;4-kgGVY5CX0,Yi'01(Go:5B*%ehkp?eEOIo4&18Q4@=/5!:>_Mi*[[E8?XDl54Cq<V..;#L'qojkCcPBXk7AchK9M7#2)Y/gk6N$8OSnt/3?K!Te.`+3Z+7^LgKM$%7/^N[,\$,A/>jDL5f4^*#iCA6`3B2NT5u;@RD!(1Hu*%c"$lB#G$Ju,YS(_`YStCj_jDNp]:_=?bht8k":0/fP+s1)f1S(C>2aAG%9ZDHq("Sg8Uc&<:Dd&V&B7q%GO#_G9hL_%,[4MNo[o2)o0#sc:k3I:X'W"/190>MuSFn&VG'$<u&<0fl%_i\<C-B`2a$*C3%-Ft'%m/b3OauKX2"!la>I'+V'36.S$$382`Y4p[H(5I*P1#OKmTr6p5,CWiD"0UGNJbE*;+/GFqP0GkkIC^,UKcp1LC<D8f\JI',)Ad3@%8IME<(P!AV1F8;>/0kH7b!s6tm..8uJP&QD+hh&e#ZCLQ[b",K)S1e1^Ke3U?o)`f-(Z!uA)t"KYrK9DO"POj;*-3:J_239M]>#Z%*gCFZV*P>X/Zf`5A"sB]&j4'l/B!DL"VX/10HTit,WCd%Yi@KNlH<H>10%U2lOkN'=fpT,9!?o;e&H*7/-NMiEedimAr*m3RrQI/%#b724nUS`)CNG>-5fLS]W)PEZ<\!oD219,+m.guFIXJ]J^<_hC6?GpaOR\Od'bH_VCFrUo:#lB@bt<s3'K,u%F"<bqFC)PUgjHpT%^5[>bpVSAljM>u%4m3e3d@f]hU5Fj=1@nW*LMIu_\-")S\Qjie0jCMKTl;STDs9j(-DBC#42Ad#'/MLu*a,bfe"rB2oc1g)dq6Y:%KNq_\.[.`RIBH,%5#%,uTSTj,8Ok@U#?gU4`tH\#blt!?_0g-O7q.K2XI"nZh_-l#5WOo<QmAso=F[b1LrC@,/uL9nI<F1>P+9m_%FTruGa>JjNl2_[=dNmAK!+`5;ene$r_u4Eus1,u$VBP(]cXhn:bZr+&S"@;uA5]:G+FXg<2i@\$\EK$J&9`RLrl)+8&-qS;_IoXg%pUujTdU[E?,i\ko[n3<20'&A\c7$1*K6@A3rpp!G#-2hJ-=I6-C(sJfcqWB>&.$5E,ueLrfA9-=kJ4q/J;V,X3BIAP;^@PG/<'25%_t*@Y`ug&/_qklpe"JNreI$K)GlO6Q;#mP"Y0h3V8N6mJp_jXteX.Y<42+us.<u2dUhi$%H4iHZ/kW9E_Oi_a"I3H,!TM6Q&19_b%XE5Df4nH:%a$<O\S#H]SR_M!n!WaJ%&k1400nXUJC'aGK#n/U?V'"sA'm6%i*A"]I3N.QPlW#&8h,[-Y<dKqd/R/Y2`*0%m6Hcp^%")Y4a!LD`-5mkpsomd@l0dVq.&&-m1YoKcrj\geD0P;$k#;?Y`#+IVM2:H)5d,jI#i_7?%T*42W(ZR)=&&@M,1L.Wr.03Y/4UHO(%L.Z[!<1*"j%R*s"d5VLK]]@L2Uop11l8T%k0Tj(3ADY0]K'Sl#"Qjl,YnPO#&n4N,8e=XiN9h(^IQ4jmh+M@7#A!qnL:R\3s"IH&%Eu'q"7:IVp*afU7eE'Rn%PCp<#q87dHR5+YOVYa<.o*+T34LEN+4b1KE)1crqdG+o?Fh<]""Hf?,iHT[%lu/U8H*jaS.u?#Zo2P>%h,%\g6SndP9<fmNLflKp_L-Dg!MGGHH"E_DIDa[lA.PZZMRPmH'%TB$#0,"]:#D8[Al3R,:R?u@.B3QldLDsZC"-99jY@i94^B\[%Mb+aFNCHh;H)$T1=.V'MROE>@@;29KZ`JD<[8n2,DMiUfo%oMY/T.fZ1AisD=J5U0=n'7:'=;\QAFWU/'AVQK,jWNoPB[k%"BnpO%pW#(RUP#eF*$$XbEC='ZJrX9R<<3acoPlaQ+&b8RCC%t.M*[L2WCis87mRT`l\I9:#-jgI\e`8WeJr*S,:YWY9=g<jVoTSWeUfQp%LUR_AlbS,WO:OXu=]$KI*`/0(:`qKDSs2nOM*?N^./&=KY@Bt^o6IPc%Oj!Kk@XK92N?tm=&?s*:i+NOTghX?V,'0m!B/0jZ'2_[%U%FhfbZ+&7j&+t>;Rp'PkGQFe?V(BUH#+d9;cm\0Q>O>e<iq=,0WuUD+'H8$/"J>Cf/nREq-`AN=X)iD4*te_-?c:cj"Io6^EGZ8%SBD_/5Qt=F!,[I(TW?P5D51&e"0a,mB9<!88V9$iV-'o%D0((0=g%i^EQGVZa`3u2_`=JEh^_J\Ku7n_RbsE,2_"hr3XO"Qhrhh.%d23Aj`ng^'<,hZd&2ieh6-N!W(Mt^R,beQ!M?&Mk]n)\PmZ3W;g[T_g5aXWf=I=k41+Og,=EG$,(>UZ3(o;$ffmt^d^>/$@<;^,O%ZEqmm`5J7b*Q5G'a=$e,//MO'+cU)"p3q`I=@rWi@KG#6dNF7m3ZB@*]AkE6!Ko9(:<LN#,U(+Em%J4jAI3e/]>V.g<i=YI((7-[%4c/b+YX,fmH15CKX>SErT3&B.7:UU%'i\'tT5C?>BX0Z,7X2<W5ItIl?MOVUrO4hJNl2(10>?>(iW3#Cddgos!CToT$0Re++sfVn%:e=(Da>\`RT</u1*H6f<-n0@MD[XN>7D(/GDTNliLRXN\H$c^hO.2Qs]0e"[#q48`_#>iH$SL1=0N\mZ(^n-WOosP3;pOHUY[%/6%Z&g!-Oq<S:XPC"8EKH(;@:="8=Y@aGb)d\WA[Qf.=T6FA/'[V(&aYN2bE<*8me`;#d%&RF(`l7!dCsqF:k9a%K@=mINd-YQ9YcO*%X,BrJfKh4qG2Mt/r!&,55E#]8"Fs(&6(dJ43>Y\]0?&):-AiBRF6jHj[HNDj(JqFcN=&+8fbdU8J$1>0(EUt:$YSEFI?)l0>c0Y[%0oj,B]$(TTK;KBL`Uj;90$S2`',4Q'r$2r?KG?]Y'9iMufMb'Fl"\PQ;+HeW$b:(>PC!UjIAqAAnca/l2A4MuV,@>Wdh^V&#$@1(%0b>#Uc'd:>6/eBnU005.ENRaUdMrU;F8h+\$!"+08AjXI"3gP1*8eqoG.Dck'K_C,VX*@e$S@P*gDo95l"K&SH#saX\AQ/Y20!>i%>W3OM[9Tf&N4XqWY*)A`-\i:9\r:>J-l`0Z#JV1VIl,*rgctODDJ\g]j^kNFRge]"``r/#>1?t=!qrLAj%r_%%=ZhuLj"\?)]V-#%YcEB"OGL<MkXGn6Cd$JBn9'XDlrSL]A&XDN"K<4cf<mm),$`O*@FXB9I<=oiQBUp]k7(N<(ViX6nCWB$#)AgWZdLXi?3AaBV4]AG%1<AKrfl,26D.)-B-OZl8-mTtUM-j((T<%!g4_a`6>)QVB?8Jg"f->*d^(HQD#D+i%iTR'GK;#eXY[mDI>Kl;7EZ@E-UcYq;o"^E7%R\/Y>W>`\^F80Go.DtrF)q(FY;9%\n@>t^W^1J<[RWD1IUKQ$QjEo_pRcq1L'BZU2_t(49J;J*`<BFSrf&aJP#&dj1UaFc'%iK2J%D/"tt<<Y`u4l>TLg2QlNL:!=86:K::0^Jrd2KhAY*SusZ0Y$_40>&@#*.Vb>It^?4aSeT?K*<3blSO?72faUNH."r<6e$9PMZYM[%]:c0jM&j/e*"46pSK@G5qK,4dr<5R/s,`Z`)jOiMX#408^&p7OPA't:4PAmG*_SAhq#,<oG^8OG1;MrP0e7Nad&4&*[r]PB9Uq:u%A"^CXY&;/MYKDUQfii/do<^B;#Ul%aMr9?6e@4CE2a!mkN7+PT&>i+^k5aPZiN37?TO$8mM*1DuhI,&K%&<$"5GYX?=iZ6a9VeE%%J;2.)P3cf.H.tt^.9d-aZBCE&Qep\F%/;hcSP+X`dXsF\<f;Vj)3rTX35,Y\\eH<@pRsUC=:Hf@#8kVq_/_l"6c`>8&umWP\Alqs%UFU5khW;mcK-q,ajoVO;PaD^426N5b+FT3W2a0f:BOL-X@U-&j8/0k[_p-<\(:9@$Hf/B$g)TNUQ%Yos-5?sG"qRHor:%fl$aHPI%JuNZ!:eX%nZl!>Ue[HFVDi<RW58d.Z[r'/;-LrX)o;"7?8nF>a3_;Bj]^0pAfXBg3@jq^=R5-B*&Yqr:`5Ph-=DVKn=J?oNGK=r;%gh"%m*.%&c$F4HZ]PAf\\LR`Rajl),2ILB3?,jOsUt[LoARk]rO@dJ>5:eG]*IXiP\:J[(_8B\A`h5&n+V!Lf9%G/(4g9cHalehG%,*O[2%MDqOJkFWfiR6Y2&a;,@>/@'&FKUi3_[!*c>-dg;#j$r&Jg/2PLr$p%D]r4FqU+.X8sspS)8cKd*RQNQEq"^V\49Xq[.QK%%pY[]kPYD[fG#>Kb[n)>D*`8rg"W-%8r$58eK$"`D`<2L3r&.&+!%R5TXiMYne`He;Hk-?f<X:NaBonn*XNl-kFCG(56#r2o"T-8`%3O/cWdh"#1],/L&H'oi1WsZ"ib#PD/"<uuhkj)\B%W%HH?FDk.O$mL0j@EZ,q&cR(/k6\^5P't%%]g'Ykt2W=EtC0]EIYl)c8M;\%mSF-Z"L=?RVJoh?XB=DMD.Ki3C'A[8dL(Ag-'2AN_NbBU^5S(ZQAB;%QQ%'uai/-K&qR`W)2Y7rE#uAc7`G!*hNF$3"[W0.IrIRW%_Co,5F-Ypi6n_u;3IP">ja:a+c;A:NT=1kC\O+6>1BfdUP[_4sqmN(bo1f^LW70a(K#O.1&0.R#T^ZNlH9.uJ*<hOtB^P@ran.=o%I[ql<>^Y+1l"mOW,_TI;go!8k(KF*4#,OF#cq:-P9s-Tf5eiIa&.Y0u-*Ut2VXNa90kG'#Xf?&A@qo1VgtYJ5Xf/5A"k-_bF-61M%XO1>\Q&$q8h0-K->LILPF`RPWI"+9RBdmOM/O>RRAu9rej7?9"iBS%6+EkW2>U<Z,0sLEe[aRl5*agl3e?U3do/qB"hK$[[>A8GC%@hXs,c304A'F`"2Ed;lAP(o3o?kr<iogt0*.h=tOm3(<+W&4t.PFTsO'qB1rGo%QeU#MDXgfc-q`5O-@bZ2J_ib?Vf,T4[%O9P5*%G0"`u8gbdIQ7>c$X&>M,Z4e02/g6*2Z<AEi\]u2GggmkZ--hZgP5n5^C_lA>\(i,GCM;.4/POAeKlETkA"CGJ>7(MTM8m@HBAi89%;V%,9ZmXtWas@jO$Tt(78CV6E.;XNW\H5mfm6FLkQH=bK6S&##TH'@l=DW'BZe/nccfWBKe<3Ji2cDU&V48Y39eS;?MA`d50!3c+%SLSY'OtMJqEgeiJ]qj,p(L]Q/$&IVdVV3"(Aqa!399<ZO6&We>C&<;'%)p;lGghKi^F,d-b%eVSM5C(%NB#P:-P0eEfsrl4_7OCN%nAU]A?X2=&p,SZN]e"!V$1'h[%aN*9WhWGRRMCf!XAphA=?8$paBBnO7kA"aL%[0chlKYOJN4t,"9uc!'uPehC%CY(Q7pEK)J3J,%hr_:4Li_h"4<ln5jQ$c[^7-UY(qA6h1?Yl""252CIr]ZMMpW5>,Vg4aG;8',FNRVR!HfF+d-)N6,h,>p3Il,WOD@?XEQ3gsb2H^&%ktHD"-jq)*$.tNr;OnU>I%"A`F0>LO9*)$-V.cs5.91P76$lIL<J-G/p#+<(n8R.E.i$3j+O/%tSC1l_oX>3s45$Vq)ItB\UL$<s%kPR9SqnuHck@R*9c[34R!E%RLN>3an'&=8QQi3i/.-27;MjT,^q^$_r0]'LgjhfCB,a=bAQd^#6"]O;ZB^TGGZ&E:=ghS80PfcGK%8XIWkAgSN<>Bd^'[sIB%dEs%3J%u$6djNK1:O3>cYBbA@n,0RTmJRQf5<aJahkQO)0@TCAO.JI^N^scnkTB#Jfm!=M`h`W$KM8`0%!dOKZn#ap=J,J8bYJ7ZQJ,"E"Qhf<kJR;(M]D%r2^\Jtae7Ke@R=\Ue?omR<9u,M"Op'uPp`nE&qL.9o!H*CupL(2`I](3bRst/m%rU=$Crj-O3rD30;pp&M%$m5=dcSSbR*0^]4"$3sCBer"/`.cF]NUq*2q`$&W**1fW>eXLgZk9;.aj"Mn^kFRul:tt+Y5%@,;(Nj#%4mY4UXC9G.>(Qu*-;&eMU@!:`g^$JJ1Mo)'#cdJ-8eP^8$L7LD:s_P,:hemmg?siL2Uck3-1/\E8`kbb6C?1&\LS[3<ZJ=/n.^K1%%O>p'7hX@3gZ*uQ_qjkJ1"8]o:hemmg@"P%VTqp)kHZ%26[,SJ7Qri`]o;(h%]f!"kk+L!/&rf+[:?Z`4ecLYFgQI6O)aO?l!"fr%B/aFSZ5FrPooWg-KHq:Sq06NTf+T`PVM:R;H<MCg5rCeW.!d7bL0mGD$d0o/;X?LemEM3r`g(%>:_9P(RkYgnQZZ-]5HM<)Ased6%i/.1(0)+"WoX6fb!m^A4jeJ@\=&6?)",:"FAp$KKS7>!GLH0FXGD0UE7QsuBSH@skdIJncCO$YD[MemO[<E5O/):F"7ZgPEnONi[%-EeCi$f2)mi-ITpW]&g*dg<7kDAjp<Yl,k2-[#%u4FX/.8qdLg7QXN:F@#)7qsmM.(*GdU1,]\@lG?)/E+M7K0^hL@Q49\+ZLt5*%OUVYrpo"6%'.b6*K:7YZ+cW.;k$1EWm/8mVg2nqd)Y2E^JD!fNXe9Fgb.LeAH2k,&lC)Td]1(8O_Ni##?.R2f2cUl_pCF=,Y3GL&%.k04ToiQdFDe4,m_:#_`Rqqj^.Ea>%Cph_hj'^(oSm8oY^MZLO:Ap:)%qJBe?9W'rWP3(pK`o]LM^iF<Pc5"uIeP6?:k)'3]7!s@%&^tpEj'O0>Tf\_UC/Q??<>&<0B$1E@Bc2V^2')fa+Nr=/I=r]2-:[dH!<DK9!lK[5>ah)]-c('1St4i5#MO'T*`Yd5Q,qM?iSm.!%LSGmY9U?67=!QHU4'@-ke]>1+YLZDQi1*%RWX,Pm&Q,tdoN&rk+q,p)LeSehLr[[dA_O;.%.16m*c4Br]V9pU_&8MRq&$$Y\9<"i%c%qB]m93MJWp*a2q`E&8:U3iA`9tmkVQ+OKWdnChjd-L#g=1/5m?]o6$q^k+VPD@:l_$#Fm'aH:N7.us'.i>7q:X9p=s$aAok2S2%ntFA)/5NL?R[R1^7s-cpS2nX5a#NHKh'E;q&].E4>1NOK,;IC=4)#!\\O]XrD)QNjV68NOQ(XSW[!9O<T$_'8_He\1B#N8#[>IuO%'fF1SnhH`Ij/Jc7CdtKM<Vo?fFf?fMbK"l(ZH;O&gPc[Rhm97a#A;?PnhH^RYMZ0%Rh;)f*E<,QN5Nho3__SXD9SI]E`h^4#4!W$%A(Z4S1uURB&_f0?DFTFL),:pJ=ZDJ;n"*[D6,i?)))9N>8!Up%h=_[jTfIOY\P!/d,8TJ-E!iPbBE=HhKoY-7D5M0;]5+\ifoo6o%AHGh(R_ei>X'feQNj[32<P[GiDFR)"-*el5g2N,#?dh^VdN]N3]78qfo2k^Mft[7Ye^J<[Sj)r8l169p*khFC`FEYUnuZVqf@iJW%$0R`+m,I<m-C(N-MBtaqT%m:Xi$P*$6M#>5JjPCHBM@/GrMjj:"Xb/.qq+>]^U@a(T9U7eqP>4m$<8/D19qKk\]-/eXr6\e:48"X%YAAOX:6,i<UY==(Bm7h+B5I*Pj$C[?E%k(hX>^o(d%TfSJ8?XToFI%M#K)QuE%Xl'eqg`3:%_R*g""`TW:mW!g0HMo)2%j$Ci!sF%YP*-UA-GuApe&/6`]KrtT@+&s7pEC9@q.$fno%O^>s;^>B11+n[?+sc7am*B95XREcQdb+dd#l/%8E#<[$2>B#:YWlls6Wu)5Y2m%MOi,q>q>+G@W2`%d>&Uc`Q>+80!3id%])@*8.sZGiG*lLF?g^b$R;SWg,0@t2,Bm]<g`@^W`pmMmR)ts042BF]0K.Y`-)IW@,Z2Q%NZ+EWb62Sp123U^:%gA(+H?WU"Jh]ZJCM]`*!rX.iaYO6M-eJ^c57s>73>@"1CDYG;Ppg]Wo0:;]5'Gk*?eN'+0bBhl?UXd@g(>g%^"_tD:/@51/#RX=l%83gjZ+>IFf0H<?.8%0JTGf>N=RfdP+*i\n`>"o\<N*X<^2NH<A>b6p,#r2Jjst]Y\'cq,ei<YRoBm`B&irP%*S1)'Xq?6H_`_N(9^T?.7ZQujENbR\)Au[?lukk`44+oo4]B0E,C?i4Y7%AI:Fb`a+0k3GFLRIW\\!IHAlNq*i`[@n'DRk(qok)l%Xop[#mQfL,987R<Z6gGA*c<nWc<:f62^=q7lX!j>Xp`Q5EH_.SjoYRC0=C4?U77;%cDq+i'(5>\SosC,=jV^cZ(TfmR!#2:<3)pB%1'Zt1f@EX8F@"303&VK!2#F50@s-2$-KZoJoQ1H)BoptQZFLjDs8#n6NE?kN\t3.Sa#2;YI#=fm)Ge@sG87s=W7"da!*+,/Q!>uQ%gM%\m6tC+8`SHLFG&1[mXXhN63!;#daeuP`g4EF.p$6*<kaX!*I)KZ`Rp7t?S$=d)`)%&Q'KTkC><^o31OO44[;2GiN"N&c!"1jG%g,6e*nmP<8jAY`.g6iZ5j7u*\F?n;YT4fndYGX?KT;_3'&<JR[@2,_p(#K3T#32XkMn\MVd+JudrS!/-17b:b'!b@1V9+<U'`f^-%)aW#RWO09L]OsqS9(t/FW-3K'J/QmJU!i@t@@nEe0E'>s?(m.>Q][9#M?d29>r1?*l3+#pbaQXT4$>L;Jgr*SBm7h+B0?/@&Sik/%F>HOQlLZU%K2Z+''h@:D@f9PphT7^qm`F:D%])@*f@K-g'X!ul#BV0!0S1d,M"^pR)b6/6W:Y9:eL_J7pRt(.Q7q+M*S`"d@_7;-%Y]/<FU'@OC1;Om:^=GV?#@t'3RS"8n;i*R&R%lIX:^h")*!*78a(tHhONQme:o1e(Br[rNO\fb97E9&D%k*DJ<kP)O#4m_5TR%>s%gKi:mBu=UER=e6N<-L"Akm4:N^"_tD:/CcTQV-Od^'s;+P%a7Z)`^^eZWGM^-F"*.h63rKfP/C6C0Z%'Wh19s?9s!6brC^gB0'2#%7M[m,7t$=Ie4E2jgaqpdF<,u@=kJZQoeEaK-Qt?fZb4b")!>"`:,\jK>`i1Ska^//I)K[bI&MiWK4,9YT=UCh(TD.YddggBoAGM5%[2Jf$=SM+/@9o%ta``S0p>b/+.%f+I3&rAMcH0m\45J5=&p[4Wk+70>_bQNN7o6<?je3+0h63qPR@'EB>u>&Z?tb^((FA?U7nlBS%h!$h[eVORf0(IYS:47PYMK5T9?X76D'?(jj>s:>_<O&<rO_dLpQTX+:['%jtB/e&%Z;/[JG/_2?8>jK4=O9'JEqurcXPRQ#X):D9%F^o2"5XFS7(<aaFf#]EWo>tV:gsu^td/aKPR:VZpqu8@JD'k).GlF0lI6Q9ZDrS&:\`1:_G,UYsE.Ho))V_fM$l%F-]]%hXpc*t"%$]!8UfBe8kc`bn?;F59/Rq"f8W0.rImB.;i>ccuUl!*DSVJcfAPg$rq,ZCX&rfqZYN-F"*;qYTKO\_![0;Gj8GBp+L]S4BiI(T8l%1O@:1""WTjr`q_Ce$![r3BEYW@oa[L5o&!K/_&2.*6GOQ[)u4Pk+khM,M?au\r<:S,^0^q]S#X$D9ZV8aBp;)S#_XBbt+bQ#+3d=%nLE`0RW0<AAA1V2qW"l.ei0@pY7EIbK7dT?&+-%_UG[6(O$cIa/8Vig9.Oid<U*_TKb7;K1mN79N-E9^G7kWsoh=Ucec(SgXe89n%X0fKN`+L4&Pte<\@j>3g^?l<.XCIN=<t*SS$>q55bZ8oNAu*<hK<r6'(8t*??u6\h9r6Ztl;OER[?D<)G>`j=c0`LC^,Y09P;LH>%%ApM*H8q>+NhDhWm'aO'j"m%pj\KV5ZU0p-8?I+W<R.C4]5'GjmHZ6oe2+4'4f<QmNhC^amC'X(e#/D*R?$jk->BK4TKKXTUJsI$%$<9hs[8/ZkqmA;&3lBfL/fa<%2M4At"hq9*7aO/`C&+uGdP?le%dnA@bt)J;#,[FX**6B-h!*!,:;l:<=k@8ELY#$sB6.(=\9tr%%>u@B6F>bA&A;'3s),ulh/Ka\FOlJhtXn5<+Ct)$SSU;m9f2TLp`,(g/T]kFWWYO*t).C!aXLZWrCFju25gS/Y;*(g2)@G$'$Qhfo%YG4^t0<79%GJCRq17GPXBN,hrAu*mc"3ftZPneBE+#o9LA#=k3Yn"c+q;.'R^-9o<V'u5=6C!g&Tpf*um:VHa/>&q6ENmHT2C"h6%lX!k.X7<mbSNc@iU5H0>;ung/WsefI`Ls(r/0FSUgidL"VQs\jUW5>m\e0&P,V0u)FRc`lH.n4K]mB-&3cZFr>6s7o<6&uIlO'38%N7*se\-cE;2![:VEOL]!H9/Z2q)5!IZ9G"7.PI\d20#YDfu9_Ya[nRRj#A/GFb<^9fEbY>F0-fSECL3qM0rS`"DgQ=4#XHtc5@H7%%sT^KkLaEmGMd:-:T`q5JIDmV3tI6>HNl7SmRc2mT%a$s$<f[;leS?+s"71sSjf;IR!.rd7b4)7h=jBLr#QTENWMuZ9k98\oNX>f%1j(XaE*-t$ND;HS3n&(_OMI=1q[QA6(R"cMC/Fa;dc1guAGUd!`X\rPB90h"3VZE??-jWN+cdo5^YKSR/K@gG>r1cP\o117bI'0]%bt)cn7TN?"iNV&(Rdj.R-Yg9$W((TI>'He!]o;(h%]f!"l1A,Z-^@Ug(j>5m*j\!pNAg3tCYNi.TAJ#5gdtj:7FM;)'nW\.,qelY%ATU1X$JN&5(*,]%6(V]Z(e[BI&M+m1TFU="e.EXH<[C74C#Q;Mm[?nsBJ1a1WMOgYd&u,^oQatp$C)A:X6m&-opO@YW:5Mc88h!f%<mXuuZ[BDAHHYQTnpkd^H";>N$D$3<b==__WNL2qc,_8&\u3n8Y-V52SY;4Y]PB=o`KB"'rIm\E!Le,,8dcNeS5Q&<OkAM3QlYmp%:sEb`e#B,6bcJh%Qd5,CQIq&S@!9',As?e*R;Z6;!LhVWM!"N`BN_#YWqiFW6:F^PW90.80+NOo>3EN`H"fJ`E_XA)o$t0_b=O+1%M/@sBf$W9i@C=o+rLW(#qMVf*'M"iD'P:_']8fJkLXgQLoQ`J/8UXI\F$U$e>'<UTeam$[G=A,O.Jr,GR!tn`g8WRVW!K&cOlJ0>%Pj6;l-J0rB_!*\%eTP?rF#3C+Ol"UpLa#--1t8=,NE1A6@am36jY$)UN"CXSi__'[<MHk1cY%E2:kdeE`cuQqO,ri/I'PV5->ZF+%>s'uW?#.0kT/U8#8pu)0?=)aj91Rg_`&=/cQEQ+U""#meg5@Xf8*<;(`Ij`t#V)S:B&nk[]rR(12%b.ST?g3QXR)t3kRO\d`k"!0%gT?BhHPW;H4-J!1S6?,s91F%QW[;^;*p8q]-5@lU(.1ri*KIALK!mO(MF&,?H7j_Ok#iY4'^BGH)aUn%B=H\3I@d^6T9rNBc7.LK%[EE't/#]lVmC'W9ctAZJ<$Ct)Oj8srXB6A&R)n:GcA4ug\&JMf=Qb&(i>$Hp$S<Fl[#q<(b;LSP*:$nd*)ts\9D^hQ)Wh_8\9;!.%@+;69<HEn]`M9#e>B\Q\@@srF;-0OY.X+TM?ejf^,KB.&D+80FDCTJ9BN0+rhNV#EWQ!ne0mN&"Y+&9E=l#lSf5bXFn_uaY#TY9>%F1Ysj1J6$b6B.XZjCRkSc`E4'Kt_CnBjlEt"e@HE0-9Pg9r;BYhi)r&XEWcZe]mpU:$FJ.s.'3kh`YD;;6!Hj+;l2id=SO+:TZQe%:RCLKoklQH'(9UrJW,VJmhgJEPV5ch?tuR+bjbb3\nPTJ;MsZPY2.Zn7%oKMP`$eW:j#ehmB5u,cJ2![)fL(%la6(N]mCXA/K@gG%?.8$o/;^QVVJMgRrf2u?TLrms[(Bqg1PrYVVmXoSK=6uPLHHVp13#&9_es-C.G`L2\3cJ'>qUXI6'\<NBm7fecT:C#EjR_LSK8_X%^21!5%ZY?k=.GLbKeU`<\5.2nG5(fEF;4B[kI]IQBYG7]NXefa61q5"m>di3Hmq2t6$3S.1L*$1Mc[ui[9foFV];oJ<O+mCg*<QE%*%UEZ)>9KK1+iIQ3cVR:@jB0qeqkpEXr6\e1&hrS=f\+D:6,jgTLsI2[(Br&1P'&Ua55`0]<6o([;?gbLTB5-Y!EN(:M\\ie3)\S%>F-6=pf*e/j]aQ3d!7BQ,PfM1@63-#AFW!O/\DraaG$X.[*V7$(<TfNomnQ9Hg:Q/:q`Ld]52(L*eVDTP[/qZ+>k5jSjoErk>UeZ%*'okAW7(*kISZHZ<82`41HLo<Ep%9S*N\4;].<_?D%]c/9_Z*Q'<?JHB=*[/qRkSNME[Y-%+*e[Lo1jfUlL4fV\qKeoj_'"jlfXt%-Ia=9A&QI4PQj7pHeeoFF'[-F!bNID'2]R,qZ#Jon:B_)QWi\fDI"0`8[s\64)L4^n<qPB([#B&3W?FrcY$7pW5:3BUXbm.c7eIq%V8e:VNcr!7heA1J?&g]\[AMDqN`5+92,:T)eC-Ne[B1Vt7YkHC?l$,O$&uu]N:=.kn`u/oq=G)Kj+;##3:FNm</\T)mB.;hN%/e(%\'Y_&341r2NA%JQ*??hr\s9#8>&%ken[tE8]MM$,)pI'pbgtm[]$+3=mhUt1`clWS`Gp+`2e/bY>h_DncL7=X5$L,SB9p)4ft<fZ%NF%?$K$KeP((YUM]"2>Ngl*8kHLD2%@R==<^7-VXGp<.NY&/59dbU%Z.9+Jk24Nji!M=MYFN)*N*4:q7ebJECeOFNe?1I:H5upZ,%Ruu!V%'6*H`g?A:pWUfH<clj98=rDlVpIH[GO_UZ"gM#!>0iLC4HA%)T6>aVVUrE7?*=!Y65?CHQ]-rtMF(Cu?"7N<\WAX,Xr0e'%P@NFlW2?kcG1Uh^L<1NAcr&Usm%`:fZ%3WhZ&_MhCPM_9G;HjsmhDcI\T04d#c]/\9"SknIF\npasl)(FF%bRq<#m^3]OeV?#aP<%j1mQ/o#C3\a6o8NN"2OFgjGOM!6pkIe^;26/#YX>\_Risg%J%a7Sqo-?M4D'5NF\RYe98^S@I)DfV+tm_9""[@estUfoUGWA_9i8%;So+oPo-HS>=Xqe<G?[%E6mrYcJ1')*EIMK2R89Vl)E,!RdnZLVO`*[[9-Pum+B)\Wl2bH]5*.J<^,jW*?JHD5%%"Y?JQ38Ss%^(%rpiXJYsKI\c$,65As??HkupC9NrNQg?rE.MTuXlf:cG01W]ml.$T)%s8KH>lTj2Q<:JX:Ll)C;SRIbVB/UKO/*Ba%154mWAFO6@p%Is)PIbf=V5/,DDG\5H[5;$IA-4s.2<F]<XG.daD&o<\`uI8S=3\L^t2BYNlDNXk2s\(qdISs0BpHgIZrXHCR&'Zc^9e;kTCqJe$a%E]g<menEb3Tr,UF_gamPd-]n_b-!E]35Pb\UPRQFFA>A64R+`G[BK)$_/KX"HX4XplN9"N\9PO4nN%DfZPiSu]XBT9bng'Lb\r-k%jW_T>CH>MZ,'AoEj%bM&4dX'0CdM-JV0q5H"Jnk@$JO'acXZaek>F:"*MZKj[R2+;q.cJTei@f2M_?.=RG5T!T*G]m6!\=b7o6<[%m'aN8e7WY+gLV:mOZnhc0=0Rt3abF"HV^2$e_&R7H(0_!3]8;:V:D&4\mDjJeMWC+%p5oPSoss/7@"sS>1</U/6eHfCGPJ?;9oMT%a#>mBmdn]eR;]0o&*iBV8ZA8\`H-!AU=em2h2EE@4PUNjcK)V8C;jmaCtEX=)'q?:hIUfIoR*0.bHop"]B!NZdataD'm,IP/[p/!%(#dt+c"ok+Bc0tmXVuDD;]>8o:Z$]\f$..dEFj71BXOGiSs^mO=1-qEFEMD%"e@Fe/5FCg^WXbaKCFW[)]a-t)bq#le_#+S)s`7F%;PAe!`Y]3^#uInG`q0Lb(Z#&@)I`Kd,*PX61q-G_NX!]P)aST\hJTr@`]H\_NdG5.[l!EMG'7\0):bgdddER_Ss_93qPD<=lE(ON%.jM*hK>=SEG1V]IoSYu7%Ok:\mH3&_$E?X:V;4!2S\A;n2;Zmid%DWVmM3+2&Y%h1E1E4o:I-G1d#lQYh5ldl!\-7,^_LMW3#_YK%r1&Qhm8B:qa=+%jNa97ia^XQG_DnJB<XaGD\1+Z7X36:`?kLs_5O4uJJN$:NIB''2in!>_nhlpo6(ZHr>9Tep73$t8QbaD9c&MkK%j=7C89bf44]RYn'.<#`qWD^uNBH_P&`C+(;RNOb]):bM(doHVW>]$t#2;Oi\DQ5?*:TsnY#s%]&M)++!0hb[&>gqS%h,\s.b]!UU%>imV?"nccfD0([GFSb9f`@g):O=fr&+%t05-UE$-X/Dh@^_E^e/X9Ag9\ES5\/";@)55P[U0_IH<L-No536njQ4I\i:u`54-ZIdB%>+sE7O\]#)=!d*RlG(!TBC.4O:ta)!mAuK(.RC5dmcB(mWPib]o;oq#g3M2=YG5sZ&o]BVr/=^d,!Ts77-c$r<l#ZAFSXA1q1Xl$%_^]bB1Er,c"kY:.X3nN?,<`(o&f!1.)'MON_HN3ZCSYbA;!77-?@?-1U=?%m+Oro[WmF`Zc^'X^m-=&)hC9J@!gPVu.s,o1l-FX?%27WOW21F=:G2u]Bd7mofXG`iR_6kWL/g'VZCfqpLRur!"Y#*Nu'ud;TnPq>L,M:10G"/3:Kt(qgaO#k`@R_eQ515jds5T=%?"J@=%U6ZTO9F\)hlGqS\F3^6IA9_1`fo0#NWl$:DN4QBDN+Z,s^2id&,A5N\MYpGh)5H!XTq7OJZtgE3N"DTGTJEGVDU$V>I&)t#d]*(!%9q7DINoSNWm!i9n=?Cs&Y;CG,#6+;Cs1V+-2#C?l]f\?equ#uBoH=/,?upGQq;\7MV;K%6p#>(_jnCTQn/fg,".liPrc<"_ehXon%LJrGBIII*A472tWT0GMenDC"-QS7fu5QCP3-V%OYI.6d]dEB3NIm*S!U\tGDT>,XDi763skqDp0?69'13de=7f<6k,"%[`,*^>/R%_p<5frI7s)W=T~>%AI9_PrivateDataEnd